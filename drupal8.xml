<?xml version="1.0" encoding="UTF-8"?>
<templateSet group="drupal8">
  <template name="hook_entity_browser_display_info_alter" value="/**&#10; * Implements hook_entity_browser_display_info_alter().&#10; *&#10; * Alter the information provided in \Drupal\entity_browser\Annotation\EntityBrowserDisplay.&#10; *&#10; * @param array $displays&#10; *   The array of display plugins, keyed on the machine-readable name.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_browser_display_info_alter(array &amp;$displays) {&#10;  $displays[&#39;modal_display&#39;][&#39;label&#39;] = t(&#39;Superb fancy stuff!&#39;);&#10;  $END$&#10;}" description="hook_entity_browser_display_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_browser_display_info_alter" value="/**&#10; * Implements hook_entity_browser_display_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_browser_display_info_alter(array &amp;$displays) {&#10;  $displays[&#39;modal_display&#39;][&#39;label&#39;] = t(&#39;Superb fancy stuff!&#39;);&#10;  $END$&#10;}" description="hook_entity_browser_display_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_browser_widget_info_alter" value="/**&#10; * Implements hook_entity_browser_widget_info_alter().&#10; *&#10; * Alter the information provided in \Drupal\entity_browser\Annotation\EntityBrowserWidget.&#10; *&#10; * @param array $widgets&#10; *   The array of widget plugins, keyed on the machine-readable name.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_browser_widget_info_alter(array &amp;$widgets) {&#10;  $widgets[&#39;view_widget&#39;][&#39;label&#39;] = t(&#39;Views FTW!&#39;);&#10;  $END$&#10;}" description="hook_entity_browser_widget_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_browser_widget_info_alter" value="/**&#10; * Implements hook_entity_browser_widget_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_browser_widget_info_alter(array &amp;$widgets) {&#10;  $widgets[&#39;view_widget&#39;][&#39;label&#39;] = t(&#39;Views FTW!&#39;);&#10;  $END$&#10;}" description="hook_entity_browser_widget_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_browser_selection_display_info_alter" value="/**&#10; * Implements hook_entity_browser_selection_display_info_alter().&#10; *&#10; * Alter the information provided in \Drupal\entity_browser\Annotation\SelectionDisplay.&#10; *&#10; * @param array $selection_displays&#10; *   The array of selection display plugins, keyed on the machine-readable name.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_browser_selection_display_info_alter(array &amp;$selection_displays) {&#10;  $selection_displays[&#39;no_selection&#39;][&#39;label&#39;] = t(&#39;Nothing!&#39;);&#10;  $END$&#10;}" description="hook_entity_browser_selection_display_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_browser_selection_display_info_alter" value="/**&#10; * Implements hook_entity_browser_selection_display_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_browser_selection_display_info_alter(array &amp;$selection_displays) {&#10;  $selection_displays[&#39;no_selection&#39;][&#39;label&#39;] = t(&#39;Nothing!&#39;);&#10;  $END$&#10;}" description="hook_entity_browser_selection_display_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_browser_widget_selector_info_alter" value="/**&#10; * Implements hook_entity_browser_widget_selector_info_alter().&#10; *&#10; * Alter the information provided in \Drupal\entity_browser\Annotation\EntityBrowserWidgetSelector.&#10; *&#10; * @param array $widget_selectors&#10; *   The array of widget selector plugins, keyed on the machine-readable name.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_browser_widget_selector_info_alter(array &amp;$widget_selectors) {&#10;  $widgets[&#39;tab_selector&#39;][&#39;label&#39;] = t(&#39;Tabs are for winners&#39;);&#10;  $END$&#10;}" description="hook_entity_browser_widget_selector_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_browser_widget_selector_info_alter" value="/**&#10; * Implements hook_entity_browser_widget_selector_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_browser_widget_selector_info_alter(array &amp;$widget_selectors) {&#10;  $widgets[&#39;tab_selector&#39;][&#39;label&#39;] = t(&#39;Tabs are for winners&#39;);&#10;  $END$&#10;}" description="hook_entity_browser_widget_selector_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_browser_field_widget_display_info_alter" value="/**&#10; * Implements hook_entity_browser_field_widget_display_info_alter().&#10; *&#10; * Alter the information provided in \Drupal\entity_browser\Annotation\EntityBrowserFieldWidgetDisplay.&#10; *&#10; * @param array $field_displays&#10; *   The array of field widget display plugins, keyed on the machine-readable&#10; *   name.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_browser_field_widget_display_info_alter(array &amp;$field_displays) {&#10;  $field_displays[&#39;rendered_entity&#39;][&#39;label&#39;] = t(&#39;Entity render system FTW&#39;);&#10;  $END$&#10;}" description="hook_entity_browser_field_widget_display_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_browser_field_widget_display_info_alter" value="/**&#10; * Implements hook_entity_browser_field_widget_display_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_browser_field_widget_display_info_alter(array &amp;$field_displays) {&#10;  $field_displays[&#39;rendered_entity&#39;][&#39;label&#39;] = t(&#39;Entity render system FTW&#39;);&#10;  $END$&#10;}" description="hook_entity_browser_field_widget_display_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_browser_widget_validation_info_alter" value="/**&#10; * Implements hook_entity_browser_widget_validation_info_alter().&#10; *&#10; * Alter the information provided in \Drupal\entity_browser\Annotation\EntityBrowserWidgetValidation.&#10; *&#10; * @param array $validation_plugins&#10; *   The array of widget validation plugins, keyed on the machine-readable&#10; *   name.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_browser_widget_validation_info_alter(array &amp;$validation_plugins) {&#10;  $field_displays[&#39;not_null&#39;][&#39;label&#39;] = t(&#39;Not null fabulous validator&#39;);&#10;  $END$&#10;}" description="hook_entity_browser_widget_validation_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_browser_widget_validation_info_alter" value="/**&#10; * Implements hook_entity_browser_widget_validation_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_browser_widget_validation_info_alter(array &amp;$validation_plugins) {&#10;  $field_displays[&#39;not_null&#39;][&#39;label&#39;] = t(&#39;Not null fabulous validator&#39;);&#10;  $END$&#10;}" description="hook_entity_browser_widget_validation_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_embed_type_plugins_alter" value="/**&#10; * Implements hook_embed_type_plugins_alter().&#10; *&#10; * Alter the embed type plugin definitions.&#10; *&#10; * @param array &amp;$plugins&#10; *   An associative array containing the embed type plugin definitions keyed by&#10; *   plugin ID.&#10; *&#10; * @see \Drupal\embed\EmbedType\EmbedTypeManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_embed_type_plugins_alter(array &amp;$plugins) {&#10;  if (isset($plugins[&#39;entity&#39;])) {&#10;    $plugins[&#39;entity&#39;][&#39;label&#39;] = &#39;A better label for embedded entities&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_embed_type_plugins_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_embed_type_plugins_alter" value="/**&#10; * Implements hook_embed_type_plugins_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_embed_type_plugins_alter(array &amp;$plugins) {&#10;  if (isset($plugins[&#39;entity&#39;])) {&#10;    $plugins[&#39;entity&#39;][&#39;label&#39;] = &#39;A better label for embedded entities&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_embed_type_plugins_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_embed_display_plugins_alter" value="/**&#10; * Implements hook_entity_embed_display_plugins_alter().&#10; *&#10; * Alter the Entity Embed Display plugin definitions.&#10; *&#10; * @param array &amp;$info&#10; *   An associative array containing the plugin definitions keyed by plugin ID.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_embed_display_plugins_alter(array &amp;$info) {&#10;&#10;  $END$&#10;}" description="hook_entity_embed_display_plugins_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_embed_display_plugins_alter" value="/**&#10; * Implements hook_entity_embed_display_plugins_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_embed_display_plugins_alter(array &amp;$info) {&#10;&#10;  $END$&#10;}" description="hook_entity_embed_display_plugins_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_embed_display_plugins_for_context_alter" value="/**&#10; * Implements hook_entity_embed_display_plugins_for_context_alter().&#10; *&#10; * Alter the Entity Embed Display plugin definitions for a given context.&#10; *&#10; * Usually used to remove certain Entity Embed Display plugins for specific&#10; * entities.&#10; *&#10; * @param array &amp;$definitions&#10; *   Remove options from this list if they should not be available for the given&#10; *   context.&#10; * @param array $contexts&#10; *   The provided context, typically an entity.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_embed_display_plugins_for_context_alter(array &amp;$definitions, array $contexts) {&#10;  // Do nothing if no entity is provided.&#10;  if (!isset($contexts[&#39;entity&#39;])) {&#10;    return;&#10;  }&#10;  $entity = $contexts[&#39;entity&#39;];&#10;&#10;  // For video and audio files, limit the available options to the media player.&#10;  if ($entity instanceof \Drupal\file\FileInterface &amp;&amp; in_array($entity-&#62;bundle(), [&#39;audio&#39;, &#39;video&#39;])) {&#10;    $definitions = array_intersect_key($definitions, array_flip([&#39;file:jwplayer_formatter&#39;]));&#10;  }&#10;&#10;  // For images, use the image formatter.&#10;  if ($entity instanceof \Drupal\file\FileInterface &amp;&amp; in_array($entity-&#62;bundle(), [&#39;image&#39;])) {&#10;    $definitions = array_intersect_key($definitions, array_flip([&#39;image:image&#39;]));&#10;  }&#10;&#10;  // For nodes, use the default option.&#10;  if ($entity instanceof \Drupal\node\NodeInterface) {&#10;    $definitions = array_intersect_key($definitions, array_flip([&#39;entity_reference:entity_reference_entity_view&#39;]));&#10;  }&#10;  $END$&#10;}" description="hook_entity_embed_display_plugins_for_context_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_embed_display_plugins_for_context_alter" value="/**&#10; * Implements hook_entity_embed_display_plugins_for_context_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_embed_display_plugins_for_context_alter(array &amp;$definitions, array $contexts) {&#10;  // Do nothing if no entity is provided.&#10;  if (!isset($contexts[&#39;entity&#39;])) {&#10;    return;&#10;  }&#10;  $entity = $contexts[&#39;entity&#39;];&#10;&#10;  // For video and audio files, limit the available options to the media player.&#10;  if ($entity instanceof \Drupal\file\FileInterface &amp;&amp; in_array($entity-&#62;bundle(), [&#39;audio&#39;, &#39;video&#39;])) {&#10;    $definitions = array_intersect_key($definitions, array_flip([&#39;file:jwplayer_formatter&#39;]));&#10;  }&#10;&#10;  // For images, use the image formatter.&#10;  if ($entity instanceof \Drupal\file\FileInterface &amp;&amp; in_array($entity-&#62;bundle(), [&#39;image&#39;])) {&#10;    $definitions = array_intersect_key($definitions, array_flip([&#39;image:image&#39;]));&#10;  }&#10;&#10;  // For nodes, use the default option.&#10;  if ($entity instanceof \Drupal\node\NodeInterface) {&#10;    $definitions = array_intersect_key($definitions, array_flip([&#39;entity_reference:entity_reference_entity_view&#39;]));&#10;  }&#10;  $END$&#10;}" description="hook_entity_embed_display_plugins_for_context_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_embed_context_alter" value="/**&#10; * Implements hook_entity_embed_context_alter().&#10; *&#10; * Alter the context of an embedded entity before it is rendered.&#10; *&#10; * @param array &amp;$context&#10; *   The context array.&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity object.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_embed_context_alter(array &amp;$context, \Drupal\Core\Entity\EntityInterface $entity) {&#10;  if (isset($context[&#39;overrides&#39;]) &amp;&amp; is_array($context[&#39;overrides&#39;])) {&#10;    foreach ($context[&#39;overrides&#39;] as $key =&#62; $value) {&#10;      $entity-&#62;key = $value;&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_entity_embed_context_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_embed_context_alter" value="/**&#10; * Implements hook_entity_embed_context_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_embed_context_alter(array &amp;$context, \Drupal\Core\Entity\EntityInterface $entity) {&#10;  if (isset($context[&#39;overrides&#39;]) &amp;&amp; is_array($context[&#39;overrides&#39;])) {&#10;    foreach ($context[&#39;overrides&#39;] as $key =&#62; $value) {&#10;      $entity-&#62;key = $value;&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_entity_embed_context_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_embed_context_alter" value="/**&#10; * Implements hook_ENTITY_TYPE_embed_context_alter().&#10; *&#10; * Alter the context of an particular embedded entity type before it is rendered.&#10; *&#10; * @param array &amp;$context&#10; *   The context array.&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity object.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_embed_context_alter(array &amp;$context, \Drupal\Core\Entity\EntityInterface $entity) {&#10;  if (isset($context[&#39;overrides&#39;]) &amp;&amp; is_array($context[&#39;overrides&#39;])) {&#10;    foreach ($context[&#39;overrides&#39;] as $key =&#62; $value) {&#10;      $entity-&#62;key = $value;&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_embed_context_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_embed_context_alter" value="/**&#10; * Implements hook_ENTITY_TYPE_embed_context_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_embed_context_alter(array &amp;$context, \Drupal\Core\Entity\EntityInterface $entity) {&#10;  if (isset($context[&#39;overrides&#39;]) &amp;&amp; is_array($context[&#39;overrides&#39;])) {&#10;    foreach ($context[&#39;overrides&#39;] as $key =&#62; $value) {&#10;      $entity-&#62;key = $value;&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_embed_context_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_embed_alter" value="/**&#10; * Implements hook_entity_embed_alter().&#10; *&#10; * Alter the results of an embedded entity build array.&#10; *&#10; * This hook is called after the content has been assembled in a structured&#10; * array and may be used for doing processing which requires that the complete&#10; * block content structure has been built.&#10; *&#10; * @param array &amp;$build&#10; *   A renderable array representing the embedded entity content.&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The embedded entity object.&#10; * @param array $context&#10; *   The context array.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_embed_alter(array &amp;$build, \Drupal\Core\Entity\EntityInterface $entity, array &amp;$context) {&#10;  // Remove the contextual links.&#10;  if (isset($build[&#39;#contextual_links&#39;])) {&#10;    unset($build[&#39;#contextual_links&#39;]);&#10;  }&#10;  $END$&#10;}" description="hook_entity_embed_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_embed_alter" value="/**&#10; * Implements hook_entity_embed_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_embed_alter(array &amp;$build, \Drupal\Core\Entity\EntityInterface $entity, array &amp;$context) {&#10;  // Remove the contextual links.&#10;  if (isset($build[&#39;#contextual_links&#39;])) {&#10;    unset($build[&#39;#contextual_links&#39;]);&#10;  }&#10;  $END$&#10;}" description="hook_entity_embed_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_embed_alter" value="/**&#10; * Implements hook_ENTITY_TYPE_embed_alter().&#10; *&#10; * Alter the results of the particular embedded entity type build array.&#10; *&#10; * @param array &amp;$build&#10; *   A renderable array representing the embedded entity content.&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The embedded entity object.&#10; * @param array $context&#10; *   The context array.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_embed_alter(array &amp;$build, \Drupal\Core\Entity\EntityInterface $entity, array &amp;$context) {&#10;  // Remove the contextual links.&#10;  if (isset($build[&#39;#contextual_links&#39;])) {&#10;    unset($build[&#39;#contextual_links&#39;]);&#10;  }&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_embed_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_embed_alter" value="/**&#10; * Implements hook_ENTITY_TYPE_embed_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_embed_alter(array &amp;$build, \Drupal\Core\Entity\EntityInterface $entity, array &amp;$context) {&#10;  // Remove the contextual links.&#10;  if (isset($build[&#39;#contextual_links&#39;])) {&#10;    unset($build[&#39;#contextual_links&#39;]);&#10;  }&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_embed_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_slick_skins_info" value="/**&#10; * Implements hook_slick_skins_info().&#10; *&#10; * Implements hook_slick_skins_info().&#10; *&#10; * Registers a class that should hold skin definitions and implements&#10; * \Drupal\slick\SlickSkinInterface.&#10; *&#10; * @deprecated, will be removed anytime when a core solution is available.&#10; * @see #2233261&#10; * Postponed till D9.&#10; *&#10; * @see slick_hook_info()&#10; * @see slick_example.module&#10; * @see slick_extras.module&#10; * @see \Drupal\slick\SlickSkinInterface&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_slick_skins_info() {&#10;  return &#39;\Drupal\hook\HookSlickSkin&#39;;&#10;  $END$&#10;}" description="hook_slick_skins_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_slick_skins_info" value="/**&#10; * Implements hook_slick_skins_info().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_slick_skins_info() {&#10;  return &#39;\Drupal\hook\HookSlickSkin&#39;;&#10;  $END$&#10;}" description="hook_slick_skins_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_inline_entity_form_entity_form_alter" value="/**&#10; * Implements hook_inline_entity_form_entity_form_alter().&#10; *&#10; * Perform alterations before an entity form is included in the IEF widget.&#10; *&#10; * @param $entity_form&#10; *   Nested array of form elements that comprise the entity form.&#10; * @param $form_state&#10; *   The form state of the parent form.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_inline_entity_form_entity_form_alter(&amp;$entity_form, &amp;$form_state) {&#10;  if ($entity_form[&#39;#entity_type&#39;] == &#39;commerce_line_item&#39;) {&#10;    $entity_form[&#39;quantity&#39;][&#39;#description&#39;] = t(&#39;New quantity description.&#39;);&#10;  }&#10;  $END$&#10;}" description="hook_inline_entity_form_entity_form_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_inline_entity_form_entity_form_alter" value="/**&#10; * Implements hook_inline_entity_form_entity_form_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_inline_entity_form_entity_form_alter(&amp;$entity_form, &amp;$form_state) {&#10;  if ($entity_form[&#39;#entity_type&#39;] == &#39;commerce_line_item&#39;) {&#10;    $entity_form[&#39;quantity&#39;][&#39;#description&#39;] = t(&#39;New quantity description.&#39;);&#10;  }&#10;  $END$&#10;}" description="hook_inline_entity_form_entity_form_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_inline_entity_form_reference_form_alter" value="/**&#10; * Implements hook_inline_entity_form_reference_form_alter().&#10; *&#10; * Perform alterations before the reference form is included in the IEF widget.&#10; *&#10; * The reference form is used to add existing entities through an autocomplete&#10; * field&#10; *&#10; * @param $reference_form&#10; *   Nested array of form elements that comprise the reference form.&#10; * @param $form_state&#10; *   The form state of the parent form.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_inline_entity_form_reference_form_alter(&amp;$reference_form, &amp;$form_state) {&#10;  $reference_form[&#39;entity_id&#39;][&#39;#description&#39;] = t(&#39;New autocomplete description&#39;);&#10;  $END$&#10;}" description="hook_inline_entity_form_reference_form_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_inline_entity_form_reference_form_alter" value="/**&#10; * Implements hook_inline_entity_form_reference_form_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_inline_entity_form_reference_form_alter(&amp;$reference_form, &amp;$form_state) {&#10;  $reference_form[&#39;entity_id&#39;][&#39;#description&#39;] = t(&#39;New autocomplete description&#39;);&#10;  $END$&#10;}" description="hook_inline_entity_form_reference_form_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_inline_entity_form_table_fields_alter" value="/**&#10; * Implements hook_inline_entity_form_table_fields_alter().&#10; *&#10; * Alter the fields used to represent an entity in the IEF table.&#10; *&#10; * @param array $fields&#10; *   The fields, keyed by field name.&#10; * @param array $context&#10; *   An array with the following keys:&#10; *   - parent_entity_type: The type of the parent entity.&#10; *   - parent_bundle: The bundle of the parent entity.&#10; *   - field_name: The name of the reference field on which IEF is operating.&#10; *   - entity_type: The type of the referenced entities.&#10; *   - allowed_bundles: Bundles allowed on the reference field.&#10; *&#10; * @see \Drupal\inline_entity_form\InlineFormInterface::getTableFields()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_inline_entity_form_table_fields_alter(&amp;$fields, $context) {&#10;  if ($context[&#39;entity_type&#39;] == &#39;commerce_product_variation&#39;) {&#10;    $fields[&#39;field_category&#39;] = [&#10;      &#39;type&#39; =&#62; &#39;field&#39;,&#10;      &#39;label&#39; =&#62; t(&#39;Category&#39;),&#10;      &#39;weight&#39; =&#62; 101,&#10;    ];&#10;  }&#10;  $END$&#10;}" description="hook_inline_entity_form_table_fields_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_inline_entity_form_table_fields_alter" value="/**&#10; * Implements hook_inline_entity_form_table_fields_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_inline_entity_form_table_fields_alter(&amp;$fields, $context) {&#10;  if ($context[&#39;entity_type&#39;] == &#39;commerce_product_variation&#39;) {&#10;    $fields[&#39;field_category&#39;] = [&#10;      &#39;type&#39; =&#62; &#39;field&#39;,&#10;      &#39;label&#39; =&#62; t(&#39;Category&#39;),&#10;      &#39;weight&#39; =&#62; 101,&#10;    ];&#10;  }&#10;  $END$&#10;}" description="hook_inline_entity_form_table_fields_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ds_fields_info_alter" value="/**&#10; * Implements hook_ds_fields_info_alter().&#10; *&#10; * Modify the list of available ds field plugins.&#10; *&#10; * This hook may be used to modify plugin properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing plugin definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\DsPluginManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_fields_info_alter(&amp;$plugins) {&#10;  $plugins[&#39;node_title&#39;][&#39;title&#39;] = t(&#39;My title&#39;);&#10;  $END$&#10;}" description="hook_ds_fields_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ds_fields_info_alter" value="/**&#10; * Implements hook_ds_fields_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_fields_info_alter(&amp;$plugins) {&#10;  $plugins[&#39;node_title&#39;][&#39;title&#39;] = t(&#39;My title&#39;);&#10;  $END$&#10;}" description="hook_ds_fields_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ds_field_templates_info_alter" value="/**&#10; * Implements hook_ds_field_templates_info_alter().&#10; *&#10; * Modify the list of available ds field template plugins.&#10; *&#10; * This hook may be used to modify plugin properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing plugin definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\DsFieldTemplatePluginManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_field_templates_info_alter(&amp;$plugins) {&#10;  $plugins[&#39;expert&#39;][&#39;title&#39;] = t(&#39;My template&#39;);&#10;  $END$&#10;}" description="hook_ds_field_templates_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ds_field_templates_info_alter" value="/**&#10; * Implements hook_ds_field_templates_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_field_templates_info_alter(&amp;$plugins) {&#10;  $plugins[&#39;expert&#39;][&#39;title&#39;] = t(&#39;My template&#39;);&#10;  $END$&#10;}" description="hook_ds_field_templates_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ds_field_format_summary" value="/**&#10; * Implements hook_ds_field_format_summary().&#10; *&#10; * Return configuration summary for the field format.&#10; *&#10; * As soon as you have hook_ds_fields and one of the fields&#10; * has a settings key, Display Suite will call this hook for the summary.&#10; *&#10; * @param array $field&#10; *   The configuration of the field.&#10; *&#10; * @return string&#10; *   The summary to show on the Field UI.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_field_format_summary($field) {&#10;  return &#39;Field summary&#39;;&#10;  $END$&#10;}" description="hook_ds_field_format_summary" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ds_field_format_summary" value="/**&#10; * Implements hook_ds_field_format_summary().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_field_format_summary($field) {&#10;  return &#39;Field summary&#39;;&#10;  $END$&#10;}" description="hook_ds_field_format_summary" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ds_layout_settings_alter" value="/**&#10; * Implements hook_ds_layout_settings_alter().&#10; *&#10; * Modify the layout settings just before they get saved.&#10; *&#10; * @param array $record&#10; *   The record just before it gets saved into the database.&#10; * @param \Drupal\Core\Form\FormStateInterface $form_state&#10; *   The form_state values.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_layout_settings_alter($record, \Drupal\Core\Form\FormStateInterface $form_state) {&#10;  $record[&#39;layout&#39;][&#39;settings&#39;][&#39;classes&#39;] = array(&#39;layout-class&#39;);&#10;  $END$&#10;}" description="hook_ds_layout_settings_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ds_layout_settings_alter" value="/**&#10; * Implements hook_ds_layout_settings_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_layout_settings_alter($record, \Drupal\Core\Form\FormStateInterface $form_state) {&#10;  $record[&#39;layout&#39;][&#39;settings&#39;][&#39;classes&#39;] = array(&#39;layout-class&#39;);&#10;  $END$&#10;}" description="hook_ds_layout_settings_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ds_pre_render_alter" value="/**&#10; * Implements hook_ds_pre_render_alter().&#10; *&#10; * Alter the layout render array.&#10; *&#10; * @param array $layout_render_array&#10; *   The render array.&#10; * @param array $context&#10; *   An array with the context that is being rendered. Available keys are&#10; *   - entity&#10; *   - entity_type&#10; *   - bundle&#10; *   - view_mode&#10; * @param array $vars&#10; *   All variables available for render. You can use this to add css classes.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_pre_render_alter(&amp;$layout_render_array, $context, &amp;$vars) {&#10;  $layout_render_array[&#39;left&#39;][] = array(&#39;#markup&#39; =&#62; &#39;cool!&#39;, &#39;#weight&#39; =&#62; 20);&#10;  $vars[&#39;attributes&#39;][&#39;class&#39;][] = &#39;custom&#39;;&#10;  $END$&#10;}" description="hook_ds_pre_render_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ds_pre_render_alter" value="/**&#10; * Implements hook_ds_pre_render_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_pre_render_alter(&amp;$layout_render_array, $context, &amp;$vars) {&#10;  $layout_render_array[&#39;left&#39;][] = array(&#39;#markup&#39; =&#62; &#39;cool!&#39;, &#39;#weight&#39; =&#62; 20);&#10;  $vars[&#39;attributes&#39;][&#39;class&#39;][] = &#39;custom&#39;;&#10;  $END$&#10;}" description="hook_ds_pre_render_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ds_layout_region_alter" value="/**&#10; * Implements hook_ds_layout_region_alter().&#10; *&#10; * Alter the region options in the field UI screen.&#10; *&#10; * This function is only called when a layout has been chosen.&#10; *&#10; * @param array $context&#10; *   A collection of keys for the context. The keys are &#39;entity_type&#39;,&#10; *   &#39;bundle&#39; and &#39;view_mode&#39;.&#10; * @param array $region_info&#10; *   A collection of info for regions. The keys are &#39;region_options&#39;&#10; *   and &#39;table_regions&#39;.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_layout_region_alter($context, &amp;$region_info) {&#10;  $region_info[&#39;region_options&#39;][&#39;my_region&#39;] = &#39;New region&#39;;&#10;  $region_info[&#39;table_regions&#39;][&#39;my_region&#39;] = array(&#10;    &#39;title&#39; =&#62; \Drupal\Component\Utility\Html::escape(&#39;New region&#39;),&#10;    &#39;message&#39; =&#62; t(&#39;No fields are displayed in this region&#39;),&#10;  );&#10;  $END$&#10;}" description="hook_ds_layout_region_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ds_layout_region_alter" value="/**&#10; * Implements hook_ds_layout_region_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_layout_region_alter($context, &amp;$region_info) {&#10;  $region_info[&#39;region_options&#39;][&#39;my_region&#39;] = &#39;New region&#39;;&#10;  $region_info[&#39;table_regions&#39;][&#39;my_region&#39;] = array(&#10;    &#39;title&#39; =&#62; \Drupal\Component\Utility\Html::escape(&#39;New region&#39;),&#10;    &#39;message&#39; =&#62; t(&#39;No fields are displayed in this region&#39;),&#10;  );&#10;  $END$&#10;}" description="hook_ds_layout_region_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ds_label_options_alter" value="/**&#10; * Implements hook_ds_label_options_alter().&#10; *&#10; * Alter the field label options.&#10; *&#10; * Note that you will either update the preprocess functions or the&#10; * field.html.twig file when adding new options.&#10; *&#10; * @param array $field_label_options&#10; *   A collection of field label options.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_label_options_alter(&amp;$field_label_options) {&#10;  $field_label_options[&#39;label_after&#39;] = t(&#39;Label after field&#39;);&#10;  $END$&#10;}" description="hook_ds_label_options_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ds_label_options_alter" value="/**&#10; * Implements hook_ds_label_options_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_label_options_alter(&amp;$field_label_options) {&#10;  $field_label_options[&#39;label_after&#39;] = t(&#39;Label after field&#39;);&#10;  $END$&#10;}" description="hook_ds_label_options_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ds_views_view_mode_alter" value="/**&#10; * Implements hook_ds_views_view_mode_alter().&#10; *&#10; * Alter the view mode just before it&#39;s rendered by the DS views entity plugin.&#10; *&#10; * @param string $view_mode&#10; *   The name of the view mode.&#10; * @param array $context&#10; *   A collection of items which can be used to identify in what&#10; *   context an entity is being rendered. The variable contains 3 keys:&#10; *     - entity: The entity being rendered.&#10; *     - view_name: the name of the view.&#10; *     - display: the name of the display of the view.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_views_view_mode_alter(&amp;$view_mode, $context) {&#10;  if ($context[&#39;view_name&#39;] == &#39;my_view_name&#39;) {&#10;    $view_mode = &#39;new_view_mode&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_ds_views_view_mode_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ds_views_view_mode_alter" value="/**&#10; * Implements hook_ds_views_view_mode_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_views_view_mode_alter(&amp;$view_mode, $context) {&#10;  if ($context[&#39;view_name&#39;] == &#39;my_view_name&#39;) {&#10;    $view_mode = &#39;new_view_mode&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_ds_views_view_mode_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ds_views_row_render_entity" value="/**&#10; * Implements hook_ds_views_row_render_entity().&#10; *&#10; * Theme an entity through an advanced function.&#10; *&#10; * The function is coming from the views entity plugin.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity.&#10; * @param string $view_mode&#10; *   The name of the view mode.&#10; *&#10; * @return array&#10; *   The rendered entity&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_views_row_render_entity(\Drupal\Core\Entity\EntityInterface $entity, $view_mode) {&#10;  $entity = Drupal\ds\Plugin\DsField\Node::load(1);&#10;  return \Drupal::entityManager()-&#62;getViewBuilder(&#39;node&#39;)-&#62;view($entity, $view_mode);&#10;  $END$&#10;}" description="hook_ds_views_row_render_entity" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ds_views_row_render_entity" value="/**&#10; * Implements hook_ds_views_row_render_entity().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_views_row_render_entity(\Drupal\Core\Entity\EntityInterface $entity, $view_mode) {&#10;  $entity = Drupal\ds\Plugin\DsField\Node::load(1);&#10;  return \Drupal::entityManager()-&#62;getViewBuilder(&#39;node&#39;)-&#62;view($entity, $view_mode);&#10;  $END$&#10;}" description="hook_ds_views_row_render_entity" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ds_views_row_render_entity_alter" value="/**&#10; * Implements hook_ds_views_row_render_entity_alter().&#10; *&#10; * Theme an entity through an advanced function.&#10; *&#10; * Function is coming from the views entity plugin.&#10; *&#10; * @param array $build&#10; *   The builded entity.&#10; * @param array $context&#10; *   Collection of parameters (row, view and view_mode).&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_views_row_render_entity_alter(&amp;$build, $context) {&#10;  // You can do whatever you want to here.&#10;  $build[&#39;data&#39;] = array(&#10;    &#39;#markup&#39; =&#62; &#39;Sample text&#39;,&#10;    &#39;#weight&#39; =&#62; 20,&#10;  );&#10;  $END$&#10;}" description="hook_ds_views_row_render_entity_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ds_views_row_render_entity_alter" value="/**&#10; * Implements hook_ds_views_row_render_entity_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_views_row_render_entity_alter(&amp;$build, $context) {&#10;  // You can do whatever you want to here.&#10;  $build[&#39;data&#39;] = array(&#10;    &#39;#markup&#39; =&#62; &#39;Sample text&#39;,&#10;    &#39;#weight&#39; =&#62; 20,&#10;  );&#10;  $END$&#10;}" description="hook_ds_views_row_render_entity_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ds_classes_alter" value="/**&#10; * Implements hook_ds_classes_alter().&#10; *&#10; * Allow modules to provide additional classes for regions and layouts.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_classes_alter(&amp;$classes, $name) {&#10;  if (&#39;ds_classes_regions&#39; === $name) {&#10;    $classes[&#39;css-class-name&#39;] = t(&#39;Custom Styling&#39;);&#10;  }&#10;  $END$&#10;}" description="hook_ds_classes_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ds_classes_alter" value="/**&#10; * Implements hook_ds_classes_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_classes_alter(&amp;$classes, $name) {&#10;  if (&#39;ds_classes_regions&#39; === $name) {&#10;    $classes[&#39;css-class-name&#39;] = t(&#39;Custom Styling&#39;);&#10;  }&#10;  $END$&#10;}" description="hook_ds_classes_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ds_field_operations_alter" value="/**&#10; * Implements hook_ds_field_operations_alter().&#10; *&#10; * Allow modules to alter the operations on the dynamic field overview page.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_field_operations_alter(&amp;$operations, $field) {&#10;  if ($field[&#39;type&#39;] == &#39;block&#39;) {&#10;    unset($operations[&#39;edit&#39;]);&#10;  }&#10;  $END$&#10;}" description="hook_ds_field_operations_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ds_field_operations_alter" value="/**&#10; * Implements hook_ds_field_operations_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ds_field_operations_alter(&amp;$operations, $field) {&#10;  if ($field[&#39;type&#39;] == &#39;block&#39;) {&#10;    unset($operations[&#39;edit&#39;]);&#10;  }&#10;  $END$&#10;}" description="hook_ds_field_operations_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_media_entity_type_info_alter" value="/**&#10; * Implements hook_media_entity_type_info_alter().&#10; *&#10; * Alter the information provided in \Drupal\media_entity\Annotation\MediaType.&#10; *&#10; * @param array $types&#10; *   The array of type plugins, keyed on the machine-readable name.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_media_entity_type_info_alter(&amp;$types) {&#10;  $types[&#39;youtube&#39;][&#39;label&#39;] = t(&#39;Youtube rocks!&#39;);&#10;  $END$&#10;}" description="hook_media_entity_type_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_media_entity_type_info_alter" value="/**&#10; * Implements hook_media_entity_type_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_media_entity_type_info_alter(&amp;$types) {&#10;  $types[&#39;youtube&#39;][&#39;label&#39;] = t(&#39;Youtube rocks!&#39;);&#10;  $END$&#10;}" description="hook_media_entity_type_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_preprocess_video_embed_iframe" value="/**&#10; * Implements hook_preprocess_video_embed_iframe().&#10; *&#10; * Preprocess video iframes.&#10; *&#10; * For video providers that use the &#34;video_embed_iframe&#34; element, you can&#10; * preprocess the element to access the individual components which make up the&#10; * iframe including:&#10; *  - url: The URL of the iframe, excluding the query parameters.&#10; *  - query: Individually manipulatable query string parameters.&#10; *  - attributes: The attributes on the iframe HTML element.&#10; *  - provider: The provider which has rendered the iframe, available for&#10; *    conditional logic only, should not be changed.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_preprocess_video_embed_iframe(&amp;$variables) {&#10;  // Add a class to all iframes that point to vimeo.&#10;  if ($variables[&#39;provider&#39;] == &#39;vimeo&#39;) {&#10;    $variables[&#39;attributes&#39;][&#39;class&#39;][] = &#39;vimeo-embed&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_preprocess_video_embed_iframe" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_preprocess_video_embed_iframe" value="/**&#10; * Implements hook_preprocess_video_embed_iframe().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_preprocess_video_embed_iframe(&amp;$variables) {&#10;  // Add a class to all iframes that point to vimeo.&#10;  if ($variables[&#39;provider&#39;] == &#39;vimeo&#39;) {&#10;    $variables[&#39;attributes&#39;][&#39;class&#39;][] = &#39;vimeo-embed&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_preprocess_video_embed_iframe" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_preprocess_video_embed_iframe__youtube" value="/**&#10; * Implements hook_preprocess_video_embed_iframe__youtube().&#10; *&#10; * Preprocess iframes in the format of preprocess_video_embed_iframe__PROVIDER.&#10; *&#10; * Allows you to preprocess video embed iframes but only for specific providers.&#10; * This allows you to, for instance control things specific to each provider.&#10; * For example, if you wanted to enable a specific youtube feature by altering&#10; * the query string, you could do so as demonstrated.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_preprocess_video_embed_iframe__youtube(&amp;$variables) {&#10;  // Remove the YouTube logo from youtube embeds.&#10;  $variables[&#39;query&#39;][&#39;modestbranding&#39;] = &#39;1&#39;;&#10;  $END$&#10;}" description="hook_preprocess_video_embed_iframe__youtube" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_preprocess_video_embed_iframe__youtube" value="/**&#10; * Implements hook_preprocess_video_embed_iframe__youtube().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_preprocess_video_embed_iframe__youtube(&amp;$variables) {&#10;  // Remove the YouTube logo from youtube embeds.&#10;  $variables[&#39;query&#39;][&#39;modestbranding&#39;] = &#39;1&#39;;&#10;  $END$&#10;}" description="hook_preprocess_video_embed_iframe__youtube" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_video_embed_field_provider_info_alter" value="/**&#10; * Implements hook_video_embed_field_provider_info_alter().&#10; *&#10; * Alter the video_embed_field plugin definitions.&#10; *&#10; * This hook allows you alter the plugin definitions managed by ProviderManager.&#10; * This could be useful if you wish to remove a particular definition or perhaps&#10; * replace one with your own implementation (as demonstrated).&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_video_embed_field_provider_info_alter(&amp;$definitions) {&#10;  // Replace the YouTube provider class with another implementation.&#10;  $definitions[&#39;youtube&#39;][&#39;class&#39;] = &#39;Drupal\my_module\CustomYouTubeProvider&#39;;&#10;  $END$&#10;}" description="hook_video_embed_field_provider_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_video_embed_field_provider_info_alter" value="/**&#10; * Implements hook_video_embed_field_provider_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_video_embed_field_provider_info_alter(&amp;$definitions) {&#10;  // Replace the YouTube provider class with another implementation.&#10;  $definitions[&#39;youtube&#39;][&#39;class&#39;] = &#39;Drupal\my_module\CustomYouTubeProvider&#39;;&#10;  $END$&#10;}" description="hook_video_embed_field_provider_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_webform_element_info_alter" value="/**&#10; * Implements hook_webform_element_info_alter().&#10; *&#10; * Alter the information provided in \Drupal\webform\Annotation\WebformElement.&#10; *&#10; * @param array $elements&#10; *   The array of webform handlers, keyed on the machine-readable element name.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_webform_element_info_alter(array &amp;$elements) {&#10;&#10;  $END$&#10;}" description="hook_webform_element_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_webform_element_info_alter" value="/**&#10; * Implements hook_webform_element_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_webform_element_info_alter(array &amp;$elements) {&#10;&#10;  $END$&#10;}" description="hook_webform_element_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_webform_handler_info_alter" value="/**&#10; * Implements hook_webform_handler_info_alter().&#10; *&#10; * Alter the information provided in \Drupal\webform\Annotation\WebformHandler.&#10; *&#10; * @param array $handlers&#10; *   The array of webform handlers, keyed on the machine-readable handler name.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_webform_handler_info_alter(array &amp;$handlers) {&#10;&#10;  $END$&#10;}" description="hook_webform_handler_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_webform_handler_info_alter" value="/**&#10; * Implements hook_webform_handler_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_webform_handler_info_alter(array &amp;$handlers) {&#10;&#10;  $END$&#10;}" description="hook_webform_handler_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_webform_element_alter" value="/**&#10; * Implements hook_webform_element_alter().&#10; *&#10; * Alter webform elements.&#10; *&#10; * @param array $element&#10; *   The webform element.&#10; * @param \Drupal\Core\Form\FormStateInterface $form_state&#10; *   The current state of the form.&#10; * @param array $context&#10; *   An associative array containing the following key-value pairs:&#10; *   - webform: The webform structure to which elements is being attached.&#10; *&#10; * @see \Drupal\webform\WebformSubmissionForm::prepareElements()&#10; * @see hook_webform_element_ELEMENT_TYPE_form_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_webform_element_alter(array &amp;$element, \Drupal\Core\Form\FormStateInterface $form_state, array $context) {&#10;  // Code here acts on all elements included in a webform.&#10;  /** @var \Drupal\webform\WebformSubmissionForm $form_object */&#10;  $form_object = $form_state-&#62;getFormObject();&#10;  /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */&#10;  $webform_submission = $form_object-&#62;getEntity();&#10;  /** @var \Drupal\webform\WebformInterface $webform */&#10;  $webform = $webform_submission-&#62;getWebform();&#10;&#10;  // Add custom data attributes to all elements.&#10;  $element[&#39;#attributes&#39;][&#39;data-custom&#39;] = &#39;{custom data goes here}&#39;;&#10;  $END$&#10;}" description="hook_webform_element_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_webform_element_alter" value="/**&#10; * Implements hook_webform_element_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_webform_element_alter(array &amp;$element, \Drupal\Core\Form\FormStateInterface $form_state, array $context) {&#10;  // Code here acts on all elements included in a webform.&#10;  /** @var \Drupal\webform\WebformSubmissionForm $form_object */&#10;  $form_object = $form_state-&#62;getFormObject();&#10;  /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */&#10;  $webform_submission = $form_object-&#62;getEntity();&#10;  /** @var \Drupal\webform\WebformInterface $webform */&#10;  $webform = $webform_submission-&#62;getWebform();&#10;&#10;  // Add custom data attributes to all elements.&#10;  $element[&#39;#attributes&#39;][&#39;data-custom&#39;] = &#39;{custom data goes here}&#39;;&#10;  $END$&#10;}" description="hook_webform_element_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_webform_element_ELEMENT_TYPE_form_alter" value="/**&#10; * Implements hook_webform_element_ELEMENT_TYPE_form_alter().&#10; *&#10; * Alter webform elements for a specific type.&#10; *&#10; * Modules can implement hook_webform_element_ELEMENT_TYPE_form_alter() to&#10; * modify a specific webform element, rather than using&#10; * hook_webform_element_alter() and checking the element type.&#10; *&#10; * @param array $element&#10; *   The webform element.&#10; * @param \Drupal\Core\Form\FormStateInterface $form_state&#10; *   The current state of the form.&#10; * @param array $context&#10; *   An associative array. See hook_field_widget_form_alter() for the structure&#10; *   and content of the array.&#10; *&#10; * @see \Drupal\webform\WebformSubmissionForm::prepareElements()&#10; * @see hook_webform_element_alter(()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_webform_element_ELEMENT_TYPE_form_alter(array &amp;$element, \Drupal\Core\Form\FormStateInterface $form_state, array $context) {&#10;  // Add custom data attributes to a specific element type.&#10;  $element[&#39;#attributes&#39;][&#39;data-custom&#39;] = &#39;{custom data goes here}&#39;;&#10;&#10;  // Attach a custom library to the element type.&#10;  $element[&#39;#attached&#39;][&#39;library&#39;][] = &#39;MODULE/MODULE.element.ELEMENT_TYPE&#39;;&#10;  $END$&#10;}" description="hook_webform_element_ELEMENT_TYPE_form_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_webform_element_ELEMENT_TYPE_form_alter" value="/**&#10; * Implements hook_webform_element_ELEMENT_TYPE_form_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_webform_element_ELEMENT_TYPE_form_alter(array &amp;$element, \Drupal\Core\Form\FormStateInterface $form_state, array $context) {&#10;  // Add custom data attributes to a specific element type.&#10;  $element[&#39;#attributes&#39;][&#39;data-custom&#39;] = &#39;{custom data goes here}&#39;;&#10;&#10;  // Attach a custom library to the element type.&#10;  $element[&#39;#attached&#39;][&#39;library&#39;][] = &#39;MODULE/MODULE.element.ELEMENT_TYPE&#39;;&#10;  $END$&#10;}" description="hook_webform_element_ELEMENT_TYPE_form_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_webform_options_alter" value="/**&#10; * Implements hook_webform_options_alter().&#10; *&#10; * Alter form options by id.&#10; *&#10; * @param array $options&#10; *   An associative array of options.&#10; * @param array $element&#10; *   The form element that the options is for.&#10; * @param string $options_id&#10; *   The form options id. Set to NULL if the options are custom.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_webform_options_alter(array &amp;$options, array &amp;$element, $options_id = NULL) {&#10;&#10;  $END$&#10;}" description="hook_webform_options_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_webform_options_alter" value="/**&#10; * Implements hook_webform_options_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_webform_options_alter(array &amp;$options, array &amp;$element, $options_id = NULL) {&#10;&#10;  $END$&#10;}" description="hook_webform_options_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_webform_options_WEBFORM_OPTIONS_ID_alter" value="/**&#10; * Implements hook_webform_options_WEBFORM_OPTIONS_ID_alter().&#10; *&#10; * Alter the webform options by id.&#10; *&#10; * @param array $options&#10; *   An associative array of options.&#10; * @param array $element&#10; *   The webform element that the options is for.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_webform_options_WEBFORM_OPTIONS_ID_alter(array &amp;$options, array &amp;$element = []) {&#10;&#10;  $END$&#10;}" description="hook_webform_options_WEBFORM_OPTIONS_ID_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_webform_options_WEBFORM_OPTIONS_ID_alter" value="/**&#10; * Implements hook_webform_options_WEBFORM_OPTIONS_ID_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_webform_options_WEBFORM_OPTIONS_ID_alter(array &amp;$options, array &amp;$element = []) {&#10;&#10;  $END$&#10;}" description="hook_webform_options_WEBFORM_OPTIONS_ID_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_webform_submission_form_alter" value="/**&#10; * Implements hook_webform_submission_form_alter().&#10; *&#10; * Perform alterations before a webform submission form is rendered.&#10; *&#10; * This hook is identical to hook_form_alter() but allows the&#10; * hook_webform_submission_form_alter() function to be stored in a dedicated&#10; * include file and it also allows the Webform module to implement webform alter&#10; * logic on another module&#39;s behalf.&#10; *&#10; * @param array $form&#10; *   Nested array of form elements that comprise the webform.&#10; * @param \Drupal\Core\Form\FormStateInterface $form_state&#10; *   The current state of the form. The arguments that&#10; *   \Drupal::formBuilder()-&#62;getForm() was originally called with are available&#10; *   in the array $form_state-&#62;getBuildInfo()[&#39;args&#39;].&#10; * @param string $form_id&#10; *   String representing the webform&#39;s id.&#10; *&#10; * @see webform.honeypot.inc&#10; * @see hook_form_BASE_FORM_ID_alter()&#10; * @see hook_form_FORM_ID_alter()&#10; *&#10; * @ingroup form_api&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_webform_submission_form_alter(array &amp;$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {&#10;&#10;  $END$&#10;}" description="hook_webform_submission_form_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_webform_submission_form_alter" value="/**&#10; * Implements hook_webform_submission_form_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_webform_submission_form_alter(array &amp;$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {&#10;&#10;  $END$&#10;}" description="hook_webform_submission_form_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_google_tag_insert_alter" value="/**&#10; * Implements hook_google_tag_insert_alter().&#10; *&#10; * Alter the state of snippet insertion on the current page response.&#10; *&#10; * This hook allows other modules to alter the state of snippet insertion based&#10; * on custom conditions that cannot be defined by the status, path, and role&#10; * conditions provided by this module.&#10; *&#10; * @param bool $satisfied&#10; *   The snippet insertion state.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_google_tag_insert_alter(&amp;$satisfied) {&#10;  // Do something to the state.&#10;  $state = !$state;&#10;  $END$&#10;}" description="hook_google_tag_insert_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_google_tag_insert_alter" value="/**&#10; * Implements hook_google_tag_insert_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_google_tag_insert_alter(&amp;$satisfied) {&#10;  // Do something to the state.&#10;  $state = !$state;&#10;  $END$&#10;}" description="hook_google_tag_insert_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_google_tag_snippets_alter" value="/**&#10; * Implements hook_google_tag_snippets_alter().&#10; *&#10; * Alter the snippets to be inserted on a page response.&#10; *&#10; * This hook allows other modules to alter the snippets to be inserted based on&#10; * custom settings not defined by this module.&#10; *&#10; * @param array $snippets&#10; *   Associative array of snippets keyed by type: script, noscript and&#10; *   data_layer.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_google_tag_snippets_alter(&amp;$snippets) {&#10;  // Do something to the script snippet.&#10;  $snippets[&#39;script&#39;] = str_replace(&#39;insertBefore&#39;, &#39;insertAfter&#39;, $snippets[&#39;script&#39;]);&#10;  $END$&#10;}" description="hook_google_tag_snippets_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_google_tag_snippets_alter" value="/**&#10; * Implements hook_google_tag_snippets_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_google_tag_snippets_alter(&amp;$snippets) {&#10;  // Do something to the script snippet.&#10;  $snippets[&#39;script&#39;] = str_replace(&#39;insertBefore&#39;, &#39;insertAfter&#39;, $snippets[&#39;script&#39;]);&#10;  $END$&#10;}" description="hook_google_tag_snippets_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_metatag_route_entity" value="/**&#10; * Implements hook_metatag_route_entity().&#10; *&#10; * Provides a ability to integrate alternative routes with metatags.&#10; *&#10; * Return an entity when the given route/route parameters matches a certain&#10; * entity. All metatags will be rendered on that page.&#10; *&#10; * @param \Drupal\Core\Routing\RouteMatchInterface $route_match&#10; *   The route match.&#10; *&#10; * @return \Drupal\Core\Entity\EntityInterface|null&#10; *   Return an entity, if the route should use metatags.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_metatag_route_entity(\Drupal\Core\Routing\RouteMatchInterface $route_match) {&#10;  if ($route_match-&#62;getRouteName() === &#39;example.test_route&#39;) {&#10;    if ($node = $route_match-&#62;getParameter(&#39;node&#39;)) {&#10;      return $node;&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_metatag_route_entity" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_metatag_route_entity" value="/**&#10; * Implements hook_metatag_route_entity().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_metatag_route_entity(\Drupal\Core\Routing\RouteMatchInterface $route_match) {&#10;  if ($route_match-&#62;getRouteName() === &#39;example.test_route&#39;) {&#10;    if ($node = $route_match-&#62;getParameter(&#39;node&#39;)) {&#10;      return $node;&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_metatag_route_entity" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_crop_entity_provider_info_alter" value="/**&#10; * Implements hook_crop_entity_provider_info_alter().&#10; *&#10; * Alter the information provided in \Drupal\crop\Annotation\CropEntityProvider.&#10; *&#10; * @param array $providers&#10; *   The array of provider plugins, keyed by the machine-readable name.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_crop_entity_provider_info_alter(array &amp;$providers) {&#10;  $providers[&#39;media&#39;][&#39;label&#39;] = t(&#39;Super fancy provider for media entity!&#39;);&#10;  $END$&#10;}" description="hook_crop_entity_provider_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_crop_entity_provider_info_alter" value="/**&#10; * Implements hook_crop_entity_provider_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_crop_entity_provider_info_alter(array &amp;$providers) {&#10;  $providers[&#39;media&#39;][&#39;label&#39;] = t(&#39;Super fancy provider for media entity!&#39;);&#10;  $END$&#10;}" description="hook_crop_entity_provider_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_layout_alter" value="/**&#10; * Implements hook_layout_alter().&#10; *&#10; * Allow modules to alter layout plugin definitions.&#10; *&#10; * @param array[] $definitions&#10; *   The array of layout definitions, keyed by plugin ID.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_layout_alter(&amp;$definitions) {&#10;  // Remove a layout.&#10;  unset($definitions[&#39;twocol&#39;]);&#10;  $END$&#10;}" description="hook_layout_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_layout_alter" value="/**&#10; * Implements hook_layout_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_layout_alter(&amp;$definitions) {&#10;  // Remove a layout.&#10;  unset($definitions[&#39;twocol&#39;]);&#10;  $END$&#10;}" description="hook_layout_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_paragraphs_behavior_info_alter" value="/**&#10; * Implements hook_paragraphs_behavior_info_alter().&#10; *&#10; * Alter the information provided in&#10; * \Drupal\paragraphs\Annotation\ParagraphsBehavior.&#10; *&#10; * @param $paragraphs_behavior&#10; *   The array of paragraphs behavior plugins, keyed on the&#10; *   machine-readable plugin name.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_paragraphs_behavior_info_alter(&amp;$paragraphs_behavior) {&#10;  // Set a new label for the my_layout plugin instead of the one&#10;  // provided in the annotation.&#10;  $paragraphs_behavior[&#39;my_layout&#39;][&#39;label&#39;] = t(&#39;New label&#39;);&#10;  $END$&#10;}" description="hook_paragraphs_behavior_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_paragraphs_behavior_info_alter" value="/**&#10; * Implements hook_paragraphs_behavior_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_paragraphs_behavior_info_alter(&amp;$paragraphs_behavior) {&#10;  // Set a new label for the my_layout plugin instead of the one&#10;  // provided in the annotation.&#10;  $paragraphs_behavior[&#39;my_layout&#39;][&#39;label&#39;] = t(&#39;New label&#39;);&#10;  $END$&#10;}" description="hook_paragraphs_behavior_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_panelizer_pre_view_builder_alter" value="/**&#10; * Implements hook_panelizer_pre_view_builder_alter().&#10; *&#10; * Allow other modules to alter view data.&#10; *&#10; * @param string $view_mode&#10; *   The view_mode being rendered.&#10; * @param object $entity&#10; *   The entity being viewed.&#10; * @param string $langcode&#10; *   The langcode.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_panelizer_pre_view_builder_alter(&amp;$view_mode, \Drupal\Core\Entity\EntityInterface $entity, &amp;$langcode) {&#10;&#10;  if ($entity-&#62;bundle() == &#39;article&#39;) {&#10;    $view_mode = &#39;my_custom_view_mode&#39;;&#10;  }&#10;&#10;  $END$&#10;}" description="hook_panelizer_pre_view_builder_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_panelizer_pre_view_builder_alter" value="/**&#10; * Implements hook_panelizer_pre_view_builder_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_panelizer_pre_view_builder_alter(&amp;$view_mode, \Drupal\Core\Entity\EntityInterface $entity, &amp;$langcode) {&#10;&#10;  if ($entity-&#62;bundle() == &#39;article&#39;) {&#10;    $view_mode = &#39;my_custom_view_mode&#39;;&#10;  }&#10;&#10;  $END$&#10;}" description="hook_panelizer_pre_view_builder_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_xmlsitemap_link_info" value="/**&#10; * Implements hook_xmlsitemap_link_info().&#10; *&#10; * Provide information on the type of links this module provides.&#10; *&#10; * @see hook_entity_info()&#10; * @see hook_entity_info_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_link_info() {&#10;  return array(&#10;    &#39;mymodule&#39; =&#62; array(&#10;      &#39;label&#39; =&#62; &#39;My module&#39;,&#10;      &#39;base table&#39; =&#62; &#39;mymodule&#39;,&#10;      &#39;entity keys&#39; =&#62; array(&#10;        // Primary ID key on {base table}&#10;        &#39;id&#39; =&#62; &#39;myid&#39;,&#10;        // Subtype key on {base table}&#10;        &#39;bundle&#39; =&#62; &#39;mysubtype&#39;,&#10;      ),&#10;      &#39;path callback&#39; =&#62; &#39;mymodule_path&#39;,&#10;      &#39;bundle label&#39; =&#62; t(&#39;Subtype name&#39;),&#10;      &#39;bundles&#39; =&#62; array(&#10;        &#39;mysubtype1&#39; =&#62; array(&#10;          &#39;label&#39; =&#62; t(&#39;My subtype 1&#39;),&#10;          &#39;admin&#39; =&#62; array(&#10;            &#39;real path&#39; =&#62; &#39;admin/settings/mymodule/mysubtype1/edit&#39;,&#10;            &#39;access arguments&#39; =&#62; array(&#39;administer mymodule&#39;),&#10;          ),&#10;          &#39;xmlsitemap&#39; =&#62; array(&#10;            &#39;status&#39; =&#62; XMLSITEMAP_STATUS_DEFAULT,&#10;            &#39;priority&#39; =&#62; XMLSITEMAP_PRIORITY_DEFAULT,&#10;          ),&#10;        ),&#10;      ),&#10;      &#39;xmlsitemap&#39; =&#62; array(&#10;        // Callback function to take an array of IDs and save them as sitemap&#10;        // links.&#10;        &#39;process callback&#39; =&#62; &#39;&#39;,&#10;        // Callback function used in batch API for rebuilding all links.&#10;        &#39;rebuild callback&#39; =&#62; &#39;&#39;,&#10;        // Callback function called from the XML sitemap settings page.&#10;        &#39;settings callback&#39; =&#62; &#39;&#39;,&#10;      ),&#10;    ),&#10;  );&#10;  $END$&#10;}" description="hook_xmlsitemap_link_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_xmlsitemap_link_info" value="/**&#10; * Implements hook_xmlsitemap_link_info().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_link_info() {&#10;  return array(&#10;    &#39;mymodule&#39; =&#62; array(&#10;      &#39;label&#39; =&#62; &#39;My module&#39;,&#10;      &#39;base table&#39; =&#62; &#39;mymodule&#39;,&#10;      &#39;entity keys&#39; =&#62; array(&#10;        // Primary ID key on {base table}&#10;        &#39;id&#39; =&#62; &#39;myid&#39;,&#10;        // Subtype key on {base table}&#10;        &#39;bundle&#39; =&#62; &#39;mysubtype&#39;,&#10;      ),&#10;      &#39;path callback&#39; =&#62; &#39;mymodule_path&#39;,&#10;      &#39;bundle label&#39; =&#62; t(&#39;Subtype name&#39;),&#10;      &#39;bundles&#39; =&#62; array(&#10;        &#39;mysubtype1&#39; =&#62; array(&#10;          &#39;label&#39; =&#62; t(&#39;My subtype 1&#39;),&#10;          &#39;admin&#39; =&#62; array(&#10;            &#39;real path&#39; =&#62; &#39;admin/settings/mymodule/mysubtype1/edit&#39;,&#10;            &#39;access arguments&#39; =&#62; array(&#39;administer mymodule&#39;),&#10;          ),&#10;          &#39;xmlsitemap&#39; =&#62; array(&#10;            &#39;status&#39; =&#62; XMLSITEMAP_STATUS_DEFAULT,&#10;            &#39;priority&#39; =&#62; XMLSITEMAP_PRIORITY_DEFAULT,&#10;          ),&#10;        ),&#10;      ),&#10;      &#39;xmlsitemap&#39; =&#62; array(&#10;        // Callback function to take an array of IDs and save them as sitemap&#10;        // links.&#10;        &#39;process callback&#39; =&#62; &#39;&#39;,&#10;        // Callback function used in batch API for rebuilding all links.&#10;        &#39;rebuild callback&#39; =&#62; &#39;&#39;,&#10;        // Callback function called from the XML sitemap settings page.&#10;        &#39;settings callback&#39; =&#62; &#39;&#39;,&#10;      ),&#10;    ),&#10;  );&#10;  $END$&#10;}" description="hook_xmlsitemap_link_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_xmlsitemap_link_alter" value="/**&#10; * Implements hook_xmlsitemap_link_alter().&#10; *&#10; * Alter the data of a sitemap link before the link is saved.&#10; *&#10; * @param $link&#10; *   An array with the data of the sitemap link.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_link_alter(&amp;$link) {&#10;  if ($link[&#39;type&#39;] == &#39;mymodule&#39;) {&#10;    $link[&#39;priority&#39;] += 0.5;&#10;  }&#10;  $END$&#10;}" description="hook_xmlsitemap_link_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_xmlsitemap_link_alter" value="/**&#10; * Implements hook_xmlsitemap_link_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_link_alter(&amp;$link) {&#10;  if ($link[&#39;type&#39;] == &#39;mymodule&#39;) {&#10;    $link[&#39;priority&#39;] += 0.5;&#10;  }&#10;  $END$&#10;}" description="hook_xmlsitemap_link_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_xmlsitemap_link_insert" value="/**&#10; * Implements hook_xmlsitemap_link_insert().&#10; *&#10; * Inform modules that an XML sitemap link has been created.&#10; *&#10; * @param $link&#10; *   Associative array defining an XML sitemap link as passed into&#10; *   \Drupal\xmlsitemap\XmlSitemapLinkStorageInterface::save().&#10; *&#10; * @see hook_xmlsitemap_link_update()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_link_insert(array $link) {&#10;  db_insert(&#39;mytable&#39;)&#10;      -&#62;fields(array(&#10;        &#39;link_type&#39; =&#62; $link[&#39;type&#39;],&#10;        &#39;link_id&#39; =&#62; $link[&#39;id&#39;],&#10;        &#39;link_status&#39; =&#62; $link[&#39;status&#39;],&#10;      ))&#10;      -&#62;execute();&#10;  $END$&#10;}" description="hook_xmlsitemap_link_insert" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_xmlsitemap_link_insert" value="/**&#10; * Implements hook_xmlsitemap_link_insert().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_link_insert(array $link) {&#10;  db_insert(&#39;mytable&#39;)&#10;      -&#62;fields(array(&#10;        &#39;link_type&#39; =&#62; $link[&#39;type&#39;],&#10;        &#39;link_id&#39; =&#62; $link[&#39;id&#39;],&#10;        &#39;link_status&#39; =&#62; $link[&#39;status&#39;],&#10;      ))&#10;      -&#62;execute();&#10;  $END$&#10;}" description="hook_xmlsitemap_link_insert" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_xmlsitemap_link_update" value="/**&#10; * Implements hook_xmlsitemap_link_update().&#10; *&#10; * Inform modules that an XML sitemap link has been updated.&#10; *&#10; * @param $link&#10; *   Associative array defining an XML sitemap link as passed into&#10; *   \Drupal\xmlsitemap\XmlSitemapLinkStorageInterface::save().&#10; *&#10; * @see hook_xmlsitemap_link_insert()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_link_update(array $link) {&#10;  db_update(&#39;mytable&#39;)&#10;      -&#62;fields(array(&#10;        &#39;link_type&#39; =&#62; $link[&#39;type&#39;],&#10;        &#39;link_id&#39; =&#62; $link[&#39;id&#39;],&#10;        &#39;link_status&#39; =&#62; $link[&#39;status&#39;],&#10;      ))&#10;      -&#62;execute();&#10;  $END$&#10;}" description="hook_xmlsitemap_link_update" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_xmlsitemap_link_update" value="/**&#10; * Implements hook_xmlsitemap_link_update().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_link_update(array $link) {&#10;  db_update(&#39;mytable&#39;)&#10;      -&#62;fields(array(&#10;        &#39;link_type&#39; =&#62; $link[&#39;type&#39;],&#10;        &#39;link_id&#39; =&#62; $link[&#39;id&#39;],&#10;        &#39;link_status&#39; =&#62; $link[&#39;status&#39;],&#10;      ))&#10;      -&#62;execute();&#10;  $END$&#10;}" description="hook_xmlsitemap_link_update" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_xmlsitemap_index_links" value="/**&#10; * Implements hook_xmlsitemap_index_links().&#10; *&#10; * Index links for the XML sitemaps.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_index_links($limit) {&#10;&#10;  $END$&#10;}" description="hook_xmlsitemap_index_links" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_xmlsitemap_index_links" value="/**&#10; * Implements hook_xmlsitemap_index_links().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_index_links($limit) {&#10;&#10;  $END$&#10;}" description="hook_xmlsitemap_index_links" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_xmlsitemap_context_info" value="/**&#10; * Implements hook_xmlsitemap_context_info().&#10; *&#10; * Provide information about contexts available to XML sitemap.&#10; *&#10; * @see hook_xmlsitemap_context_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_context_info() {&#10;  $info[&#39;vocabulary&#39;] = array(&#10;    &#39;label&#39; =&#62; t(&#39;Vocabulary&#39;),&#10;    &#39;summary callback&#39; =&#62; &#39;mymodule_xmlsitemap_vocabulary_context_summary&#39;,&#10;    &#39;default&#39; =&#62; 0,&#10;  );&#10;  return $info;&#10;  $END$&#10;}" description="hook_xmlsitemap_context_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_xmlsitemap_context_info" value="/**&#10; * Implements hook_xmlsitemap_context_info().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_context_info() {&#10;  $info[&#39;vocabulary&#39;] = array(&#10;    &#39;label&#39; =&#62; t(&#39;Vocabulary&#39;),&#10;    &#39;summary callback&#39; =&#62; &#39;mymodule_xmlsitemap_vocabulary_context_summary&#39;,&#10;    &#39;default&#39; =&#62; 0,&#10;  );&#10;  return $info;&#10;  $END$&#10;}" description="hook_xmlsitemap_context_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_xmlsitemap_context_info_alter" value="/**&#10; * Implements hook_xmlsitemap_context_info_alter().&#10; *&#10; * Alter XML sitemap context info.&#10; *&#10; * @see hook_xmlsitemap_context_info().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_context_info_alter(&amp;$info) {&#10;  $info[&#39;vocabulary&#39;][&#39;label&#39;] = t(&#39;Site vocabularies&#39;);&#10;  $END$&#10;}" description="hook_xmlsitemap_context_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_xmlsitemap_context_info_alter" value="/**&#10; * Implements hook_xmlsitemap_context_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_context_info_alter(&amp;$info) {&#10;  $info[&#39;vocabulary&#39;][&#39;label&#39;] = t(&#39;Site vocabularies&#39;);&#10;  $END$&#10;}" description="hook_xmlsitemap_context_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_xmlsitemap_context" value="/**&#10; * Implements hook_xmlsitemap_context().&#10; *&#10; * Provide information about the current context on the site.&#10; *&#10; * @see hook_xmlsitemap_context_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_context() {&#10;  $context = array();&#10;  if ($vid = mymodule_get_current_vocabulary()) {&#10;    $context[&#39;vocabulary&#39;] = $vid;&#10;  }&#10;  return $context;&#10;  $END$&#10;}" description="hook_xmlsitemap_context" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_xmlsitemap_context" value="/**&#10; * Implements hook_xmlsitemap_context().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_context() {&#10;  $context = array();&#10;  if ($vid = mymodule_get_current_vocabulary()) {&#10;    $context[&#39;vocabulary&#39;] = $vid;&#10;  }&#10;  return $context;&#10;  $END$&#10;}" description="hook_xmlsitemap_context" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_xmlsitemap_context_alter" value="/**&#10; * Implements hook_xmlsitemap_context_alter().&#10; *&#10; * Alter the current context information.&#10; *&#10; * @see hook_xmlsitemap_context()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_context_alter(&amp;$context) {&#10;  $currentUser = \Drupal::currentUser();&#10;  if ($currentUser-&#62;hasPermission(&#39;administer taxonomy&#39;)) {&#10;    unset($context[&#39;vocabulary&#39;]);&#10;  }&#10;  $END$&#10;}" description="hook_xmlsitemap_context_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_xmlsitemap_context_alter" value="/**&#10; * Implements hook_xmlsitemap_context_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_context_alter(&amp;$context) {&#10;  $currentUser = \Drupal::currentUser();&#10;  if ($currentUser-&#62;hasPermission(&#39;administer taxonomy&#39;)) {&#10;    unset($context[&#39;vocabulary&#39;]);&#10;  }&#10;  $END$&#10;}" description="hook_xmlsitemap_context_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_xmlsitemap_context_url_options" value="/**&#10; * Implements hook_xmlsitemap_context_url_options().&#10; *&#10; * Provide options for the url() function based on an XML sitemap context.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_context_url_options(array $context) {&#10;&#10;  $END$&#10;}" description="hook_xmlsitemap_context_url_options" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_xmlsitemap_context_url_options" value="/**&#10; * Implements hook_xmlsitemap_context_url_options().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_context_url_options(array $context) {&#10;&#10;  $END$&#10;}" description="hook_xmlsitemap_context_url_options" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_xmlsitemap_context_url_options_alter" value="/**&#10; * Implements hook_xmlsitemap_context_url_options_alter().&#10; *&#10; * Alter the url() options based on an XML sitemap context.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_context_url_options_alter(array &amp;$options, array $context) {&#10;&#10;  $END$&#10;}" description="hook_xmlsitemap_context_url_options_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_xmlsitemap_context_url_options_alter" value="/**&#10; * Implements hook_xmlsitemap_context_url_options_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_context_url_options_alter(array &amp;$options, array $context) {&#10;&#10;  $END$&#10;}" description="hook_xmlsitemap_context_url_options_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_query_xmlsitemap_generate_alter" value="/**&#10; * Implements hook_query_xmlsitemap_generate_alter().&#10; *&#10; * Alter the query selecting data from {xmlsitemap} during sitemap generation.&#10; *&#10; * @param $query&#10; *   A Query object describing the composite parts of a SQL query.&#10; *&#10; * @see hook_query_TAG_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_query_xmlsitemap_generate_alter(QueryAlterableInterface $query) {&#10;  $sitemap = $query-&#62;getMetaData(&#39;sitemap&#39;);&#10;  if (!empty($sitemap-&#62;context[&#39;vocabulary&#39;])) {&#10;    $node_condition = db_and();&#10;    $node_condition-&#62;condition(&#39;type&#39;, &#39;taxonomy_term&#39;);&#10;    $node_condition-&#62;condition(&#39;subtype&#39;, $sitemap-&#62;context[&#39;vocabulary&#39;]);&#10;    $normal_condition = db_and();&#10;    $normal_condition-&#62;condition(&#39;type&#39;, &#39;taxonomy_term&#39;, &#39;&#60;&#62;&#39;);&#10;    $condition = db_or();&#10;    $condition-&#62;condition($node_condition);&#10;    $condition-&#62;condition($normal_condition);&#10;    $query-&#62;condition($condition);&#10;  }&#10;  $END$&#10;}" description="hook_query_xmlsitemap_generate_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_query_xmlsitemap_generate_alter" value="/**&#10; * Implements hook_query_xmlsitemap_generate_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_query_xmlsitemap_generate_alter(QueryAlterableInterface $query) {&#10;  $sitemap = $query-&#62;getMetaData(&#39;sitemap&#39;);&#10;  if (!empty($sitemap-&#62;context[&#39;vocabulary&#39;])) {&#10;    $node_condition = db_and();&#10;    $node_condition-&#62;condition(&#39;type&#39;, &#39;taxonomy_term&#39;);&#10;    $node_condition-&#62;condition(&#39;subtype&#39;, $sitemap-&#62;context[&#39;vocabulary&#39;]);&#10;    $normal_condition = db_and();&#10;    $normal_condition-&#62;condition(&#39;type&#39;, &#39;taxonomy_term&#39;, &#39;&#60;&#62;&#39;);&#10;    $condition = db_or();&#10;    $condition-&#62;condition($node_condition);&#10;    $condition-&#62;condition($normal_condition);&#10;    $query-&#62;condition($condition);&#10;  }&#10;  $END$&#10;}" description="hook_query_xmlsitemap_generate_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_xmlsitemap_sitemap_operations" value="/**&#10; * Implements hook_xmlsitemap_sitemap_operations().&#10; *&#10; * Provide information about XML sitemap bulk operations.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_sitemap_operations() {&#10;&#10;  $END$&#10;}" description="hook_xmlsitemap_sitemap_operations" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_xmlsitemap_sitemap_operations" value="/**&#10; * Implements hook_xmlsitemap_sitemap_operations().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_sitemap_operations() {&#10;&#10;  $END$&#10;}" description="hook_xmlsitemap_sitemap_operations" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_xmlsitemap_sitemap_delete" value="/**&#10; * Implements hook_xmlsitemap_sitemap_delete().&#10; *&#10; * Respond to XML sitemap deletion.&#10; *&#10; * This hook is invoked from xmlsitemap_sitemap_delete_multiple() after the XML&#10; * sitemap has been removed from the table in the database.&#10; *&#10; * @param $sitemap&#10; *   The XML sitemap object that was deleted.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_sitemap_delete(XmlSitemapInterface $sitemap) {&#10;  db_query(&#34;DELETE FROM {mytable} WHERE smid = &#39;%s&#39;&#34;, $sitemap-&#62;smid);&#10;  $END$&#10;}" description="hook_xmlsitemap_sitemap_delete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_xmlsitemap_sitemap_delete" value="/**&#10; * Implements hook_xmlsitemap_sitemap_delete().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_sitemap_delete(XmlSitemapInterface $sitemap) {&#10;  db_query(&#34;DELETE FROM {mytable} WHERE smid = &#39;%s&#39;&#34;, $sitemap-&#62;smid);&#10;  $END$&#10;}" description="hook_xmlsitemap_sitemap_delete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_xmlsitemap_engine_info" value="/**&#10; * Implements hook_xmlsitemap_engine_info().&#10; *&#10; * Provide a list of supported sitemap engines.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_engine_info() {&#10;  $engines[&#39;example&#39;] = array(&#10;    &#39;name&#39; =&#62; t(&#39;Example search engine&#39;),&#10;    &#39;url&#39; =&#62; &#39;http://example.com/ping?sitemap=[sitemap]&#39;,&#10;  );&#10;  return $engines;&#10;  $END$&#10;}" description="hook_xmlsitemap_engine_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_xmlsitemap_engine_info" value="/**&#10; * Implements hook_xmlsitemap_engine_info().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_engine_info() {&#10;  $engines[&#39;example&#39;] = array(&#10;    &#39;name&#39; =&#62; t(&#39;Example search engine&#39;),&#10;    &#39;url&#39; =&#62; &#39;http://example.com/ping?sitemap=[sitemap]&#39;,&#10;  );&#10;  return $engines;&#10;  $END$&#10;}" description="hook_xmlsitemap_engine_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_xmlsitemap_engine_info_alter" value="/**&#10; * Implements hook_xmlsitemap_engine_info_alter().&#10; *&#10; * Alter the list of sitemap engines.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_engine_info_alter(&amp;$engines) {&#10;  $engines[&#39;example&#39;][&#39;name&#39;] = t(&#39;Kitten Search&#39;);&#10;  $engines[&#39;example&#39;][&#39;url&#39;] = &#39;http://kittens.com/ping?sitemap=[sitemap]&#39;;&#10;  $END$&#10;}" description="hook_xmlsitemap_engine_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_xmlsitemap_engine_info_alter" value="/**&#10; * Implements hook_xmlsitemap_engine_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_xmlsitemap_engine_info_alter(&amp;$engines) {&#10;  $engines[&#39;example&#39;][&#39;name&#39;] = t(&#39;Kitten Search&#39;);&#10;  $engines[&#39;example&#39;][&#39;url&#39;] = &#39;http://kittens.com/ping?sitemap=[sitemap]&#39;;&#10;  $END$&#10;}" description="hook_xmlsitemap_engine_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_path_alias_types_alter" value="/**&#10; * Implements hook_path_alias_types_alter().&#10; *&#10; * Alter pathauto alias type definitions.&#10; *&#10; * @param array &amp;$definitions&#10; *   Alias type definitions.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_path_alias_types_alter(array &amp;$definitions) {&#10;  $END$&#10;}" description="hook_path_alias_types_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_path_alias_types_alter" value="/**&#10; * Implements hook_path_alias_types_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_path_alias_types_alter(array &amp;$definitions) {&#10;  $END$&#10;}" description="hook_path_alias_types_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_pathauto_is_alias_reserved" value="/**&#10; * Implements hook_pathauto_is_alias_reserved().&#10; *&#10; * Determine if a possible URL alias would conflict with any existing paths.&#10; *&#10; * Returning TRUE from this function will trigger pathauto_alias_uniquify() to&#10; * generate a similar URL alias with a suffix to avoid conflicts.&#10; *&#10; * @param string $alias&#10; *   The potential URL alias.&#10; * @param string $source&#10; *   The source path for the alias (e.g. &#39;node/1&#39;).&#10; * @param string $langcode&#10; *   The language code for the alias (e.g. &#39;en&#39;).&#10; *&#10; * @return bool&#10; *   TRUE if $alias conflicts with an existing, reserved path, or FALSE/NULL if&#10; *   it does not match any reserved paths.&#10; *&#10; * @see pathauto_alias_uniquify()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_pathauto_is_alias_reserved($alias, $source, $langcode) {&#10;  // Check our module&#39;s list of paths and return TRUE if $alias matches any of&#10;  // them.&#10;  return (bool) \Drupal::database()-&#62;query(&#34;SELECT 1 FROM {mytable} WHERE path = :path&#34;, [&#39;:path&#39; =&#62; $alias])-&#62;fetchField();&#10;  $END$&#10;}" description="hook_pathauto_is_alias_reserved" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_pathauto_is_alias_reserved" value="/**&#10; * Implements hook_pathauto_is_alias_reserved().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_pathauto_is_alias_reserved($alias, $source, $langcode) {&#10;  // Check our module&#39;s list of paths and return TRUE if $alias matches any of&#10;  // them.&#10;  return (bool) \Drupal::database()-&#62;query(&#34;SELECT 1 FROM {mytable} WHERE path = :path&#34;, [&#39;:path&#39; =&#62; $alias])-&#62;fetchField();&#10;  $END$&#10;}" description="hook_pathauto_is_alias_reserved" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_pathauto_pattern_alter" value="/**&#10; * Implements hook_pathauto_pattern_alter().&#10; *&#10; * Alter the pattern to be used before an alias is generated by Pathauto.&#10; *&#10; * This hook will only be called if a default pattern is configured (on&#10; * admin/config/search/path/patterns).&#10; *&#10; * @param string $pattern&#10; *   The alias pattern for Pathauto to pass to token_replace() to generate the&#10; *   URL alias.&#10; * @param array $context&#10; *   An associative array of additional options, with the following elements:&#10; *   - &#39;module&#39;: The module or entity type being aliased.&#10; *   - &#39;op&#39;: A string with the operation being performed on the object being&#10; *     aliased. Can be either &#39;insert&#39;, &#39;update&#39;, &#39;return&#39;, or &#39;bulkupdate&#39;.&#10; *   - &#39;source&#39;: A string of the source path for the alias (e.g. &#39;node/1&#39;).&#10; *   - &#39;data&#39;: An array of keyed objects to pass to token_replace().&#10; *   - &#39;type&#39;: The sub-type or bundle of the object being aliased.&#10; *   - &#39;language&#39;: A string of the language code for the alias (e.g. &#39;en&#39;).&#10; *     This can be altered by reference.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_pathauto_pattern_alter(&amp;$pattern, array $context) {&#10;  // Switch out any [node:created:*] tokens with [node:updated:*] on update.&#10;  if ($context[&#39;module&#39;] == &#39;node&#39; &amp;&amp; ($context[&#39;op&#39;] == &#39;update&#39;)) {&#10;    $pattern = preg_replace(&#39;/\[node:created(\:[^]]*)?\]/&#39;, &#39;[node:updated$1]&#39;, $pattern);&#10;  }&#10;  $END$&#10;}" description="hook_pathauto_pattern_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_pathauto_pattern_alter" value="/**&#10; * Implements hook_pathauto_pattern_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_pathauto_pattern_alter(&amp;$pattern, array $context) {&#10;  // Switch out any [node:created:*] tokens with [node:updated:*] on update.&#10;  if ($context[&#39;module&#39;] == &#39;node&#39; &amp;&amp; ($context[&#39;op&#39;] == &#39;update&#39;)) {&#10;    $pattern = preg_replace(&#39;/\[node:created(\:[^]]*)?\]/&#39;, &#39;[node:updated$1]&#39;, $pattern);&#10;  }&#10;  $END$&#10;}" description="hook_pathauto_pattern_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_pathauto_alias_alter" value="/**&#10; * Implements hook_pathauto_alias_alter().&#10; *&#10; * Alter Pathauto-generated aliases before saving.&#10; *&#10; * @param string $alias&#10; *   The automatic alias after token replacement and strings cleaned.&#10; * @param array $context&#10; *   An associative array of additional options, with the following elements:&#10; *   - &#39;module&#39;: The module or entity type being aliased.&#10; *   - &#39;op&#39;: A string with the operation being performed on the object being&#10; *     aliased. Can be either &#39;insert&#39;, &#39;update&#39;, &#39;return&#39;, or &#39;bulkupdate&#39;.&#10; *   - &#39;source&#39;: A string of the source path for the alias (e.g. &#39;node/1&#39;).&#10; *     This can be altered by reference.&#10; *   - &#39;data&#39;: An array of keyed objects to pass to token_replace().&#10; *   - &#39;type&#39;: The sub-type or bundle of the object being aliased.&#10; *   - &#39;language&#39;: A string of the language code for the alias (e.g. &#39;en&#39;).&#10; *     This can be altered by reference.&#10; *   - &#39;pattern&#39;: A string of the pattern used for aliasing the object.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_pathauto_alias_alter(&amp;$alias, array &amp;$context) {&#10;  // Add a suffix so that all aliases get saved as &#39;content/my-title.html&#39;&#10;  $alias .= &#39;.html&#39;;&#10;&#10;  // Force all aliases to be saved as language neutral.&#10;  $context[&#39;language&#39;] = Language::LANGCODE_NOT_SPECIFIED;&#10;  $END$&#10;}" description="hook_pathauto_alias_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_pathauto_alias_alter" value="/**&#10; * Implements hook_pathauto_alias_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_pathauto_alias_alter(&amp;$alias, array &amp;$context) {&#10;  // Add a suffix so that all aliases get saved as &#39;content/my-title.html&#39;&#10;  $alias .= &#39;.html&#39;;&#10;&#10;  // Force all aliases to be saved as language neutral.&#10;  $context[&#39;language&#39;] = Language::LANGCODE_NOT_SPECIFIED;&#10;  $END$&#10;}" description="hook_pathauto_alias_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_pathauto_punctuation_chars_alter" value="/**&#10; * Implements hook_pathauto_punctuation_chars_alter().&#10; *&#10; * Alter the list of punctuation characters for Pathauto control.&#10; *&#10; * @param $punctuation&#10; *   An array of punctuation to be controlled by Pathauto during replacement&#10; *   keyed by punctuation name. Each punctuation record should be an array&#10; *   with the following key/value pairs:&#10; *   - value: The raw value of the punctuation mark.&#10; *   - name: The human-readable name of the punctuation mark. This must be&#10; *     translated using t() already.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_pathauto_punctuation_chars_alter(array &amp;$punctuation) {&#10;  // Add the trademark symbol.&#10;  $punctuation[&#39;trademark&#39;] = array(&#39;value&#39; =&#62; &#39;™&#39;, &#39;name&#39; =&#62; t(&#39;Trademark symbol&#39;));&#10;&#10;  // Remove the dollar sign.&#10;  unset($punctuation[&#39;dollar&#39;]);&#10;  $END$&#10;}" description="hook_pathauto_punctuation_chars_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_pathauto_punctuation_chars_alter" value="/**&#10; * Implements hook_pathauto_punctuation_chars_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_pathauto_punctuation_chars_alter(array &amp;$punctuation) {&#10;  // Add the trademark symbol.&#10;  $punctuation[&#39;trademark&#39;] = array(&#39;value&#39; =&#62; &#39;™&#39;, &#39;name&#39; =&#62; t(&#39;Trademark symbol&#39;));&#10;&#10;  // Remove the dollar sign.&#10;  unset($punctuation[&#39;dollar&#39;]);&#10;  $END$&#10;}" description="hook_pathauto_punctuation_chars_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_redirect_load" value="/**&#10; * Implements hook_redirect_load().&#10; *&#10; * Act on redirects being loaded from the database.&#10; *&#10; * This hook is invoked during redirect loading, which is handled by&#10; * entity_load(), via classes RedirectController and&#10; * DrupalDefaultEntityController. After the redirect information is read from&#10; * the database or the entity cache, hook_entity_load() is invoked on all&#10; * implementing modules, and then hook_redirect_load() is invoked on all&#10; * implementing modules.&#10; *&#10; * This hook should only be used to add information that is not in the redirect&#10; * table, not to replace information that is in that table (which could&#10; * interfere with the entity cache). For performance reasons, information for&#10; * all available redirects should be loaded in a single query where possible.&#10; *&#10; * The $types parameter allows for your module to have an early return (for&#10; * efficiency) if your module only supports certain redirect types.&#10; *&#10; * @param $redirects&#10; *   An array of the redirects being loaded, keyed by rid.&#10; * @param $types&#10; *   An array containing the types of the redirects.&#10; *&#10; * @ingroup redirect_api_hooks&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_redirect_load(array &amp;$redirects, $types) {&#10;&#10;  $END$&#10;}" description="hook_redirect_load" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_redirect_load" value="/**&#10; * Implements hook_redirect_load().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_redirect_load(array &amp;$redirects, $types) {&#10;&#10;  $END$&#10;}" description="hook_redirect_load" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_redirect_load_by_source_alter" value="/**&#10; * Implements hook_redirect_load_by_source_alter().&#10; *&#10; * Alter the list of redirects matching a certain source.&#10; *&#10; * @param $redirects&#10; *   An array of redirect objects.&#10; * @param $source&#10; *   The source request path.&#10; * @param $context&#10; *   An array with the following key/value pairs:&#10; *   - language: The language code of the source request.&#10; *   - query: An array of the source request query string.&#10; *&#10; * @see redirect_load_by_source()&#10; * @ingroup redirect_api_hooks&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_redirect_load_by_source_alter(array &amp;$redirects, $source, array $context) {&#10;  foreach ($redirects as $rid =&#62; $redirect) {&#10;    if ($redirect-&#62;source !== $source) {&#10;      // If the redirects to do not exactly match $source (e.g. case&#10;      // insensitive matches), then remove them from the results.&#10;      unset($redirects[$rid]);&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_redirect_load_by_source_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_redirect_load_by_source_alter" value="/**&#10; * Implements hook_redirect_load_by_source_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_redirect_load_by_source_alter(array &amp;$redirects, $source, array $context) {&#10;  foreach ($redirects as $rid =&#62; $redirect) {&#10;    if ($redirect-&#62;source !== $source) {&#10;      // If the redirects to do not exactly match $source (e.g. case&#10;      // insensitive matches), then remove them from the results.&#10;      unset($redirects[$rid]);&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_redirect_load_by_source_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_redirect_prepare" value="/**&#10; * Implements hook_redirect_prepare().&#10; *&#10; * Act on a redirect object about to be shown on the add/edit form.&#10; *&#10; * This hook is invoked from redirect_create().&#10; *&#10; * @param $redirect&#10; *   The redirect that is about to be shown on the add/edit form.&#10; *&#10; * @ingroup redirect_api_hooks&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_redirect_prepare($redirect) {&#10;&#10;  $END$&#10;}" description="hook_redirect_prepare" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_redirect_prepare" value="/**&#10; * Implements hook_redirect_prepare().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_redirect_prepare($redirect) {&#10;&#10;  $END$&#10;}" description="hook_redirect_prepare" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_redirect_alter" value="/**&#10; * Implements hook_redirect_alter().&#10; *&#10; * Act on a redirect being redirected.&#10; *&#10; * This hook is invoked from redirect_redirect() before the redirect callback&#10; * is invoked.&#10; *&#10; * @param $redirect&#10; *   The redirect that is being used for the redirect.&#10; *&#10; * @see redirect_redirect()&#10; * @see drupal_page_is_cacheable()&#10; * @ingroup redirect_api_hooks&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_redirect_alter($redirect) {&#10;  $END$&#10;}" description="hook_redirect_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_redirect_alter" value="/**&#10; * Implements hook_redirect_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_redirect_alter($redirect) {&#10;  $END$&#10;}" description="hook_redirect_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_panels_build_alter" value="/**&#10; * Implements hook_panels_build_alter().&#10; *&#10; * Allow modules to alter the built Panels output.&#10; *&#10; * @param array &amp;$build&#10; *   The fully built render array.&#10; * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display&#10; *   The Panels display that was rendered.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_panels_build_alter(array &amp;$build, PanelsDisplayVariant $panels_display) {&#10;  $build[&#39;extra&#39;] = [&#10;    &#39;#markup&#39; =&#62; &#39;&#60;div&#62;Some extra markup&#60;/div&#62;&#39;,&#10;  ];&#10;  $END$&#10;}" description="hook_panels_build_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_panels_build_alter" value="/**&#10; * Implements hook_panels_build_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_panels_build_alter(array &amp;$build, PanelsDisplayVariant $panels_display) {&#10;  $build[&#39;extra&#39;] = [&#10;    &#39;#markup&#39; =&#62; &#39;&#60;div&#62;Some extra markup&#60;/div&#62;&#39;,&#10;  ];&#10;  $END$&#10;}" description="hook_panels_build_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_panels_ipe_panels_display_presave" value="/**&#10; * Implements hook_panels_ipe_panels_display_presave().&#10; *&#10; * Act on a Panels Display before it is saved via the IPE.&#10; *&#10; * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display&#10; *   The current Panels display.&#10; * @param array $layout_model&#10; *   The decoded LayoutModel from our App.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_panels_ipe_panels_display_presave(PanelsDisplayVariant $panels_display, array $layout_model) {&#10;  if (isset($layout_model[&#39;use_custom_storage&#39;])) {&#10;    $configuration = $panels_display-&#62;getConfiguration();&#10;    $panels_display-&#62;setStorage(&#39;custom_storage_key&#39;, $configuration[&#39;storage_id&#39;]);&#10;  }&#10;  $END$&#10;}" description="hook_panels_ipe_panels_display_presave" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_panels_ipe_panels_display_presave" value="/**&#10; * Implements hook_panels_ipe_panels_display_presave().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_panels_ipe_panels_display_presave(PanelsDisplayVariant $panels_display, array $layout_model) {&#10;  if (isset($layout_model[&#39;use_custom_storage&#39;])) {&#10;    $configuration = $panels_display-&#62;getConfiguration();&#10;    $panels_display-&#62;setStorage(&#39;custom_storage_key&#39;, $configuration[&#39;storage_id&#39;]);&#10;  }&#10;  $END$&#10;}" description="hook_panels_ipe_panels_display_presave" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_panels_ipe_blocks_alter" value="/**&#10; * Implements hook_panels_ipe_blocks_alter().&#10; *&#10; * Modify the list of blocks available through the IPE interface.&#10; *&#10; * @param array $blocks&#10; *   The blocks that are currently available.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_panels_ipe_blocks_alter(array &amp;$blocks = array()) {&#10;  // Only show blocks that were provided by the &#39;mymodule&#39; module.&#10;  foreach ($blocks as $key =&#62; $block) {&#10;    if ($block[&#39;provider&#39;] !== &#39;mymodule&#39;) {&#10;      unset($blocks[$key]);&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_panels_ipe_blocks_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_panels_ipe_blocks_alter" value="/**&#10; * Implements hook_panels_ipe_blocks_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_panels_ipe_blocks_alter(array &amp;$blocks = array()) {&#10;  // Only show blocks that were provided by the &#39;mymodule&#39; module.&#10;  foreach ($blocks as $key =&#62; $block) {&#10;    if ($block[&#39;provider&#39;] !== &#39;mymodule&#39;) {&#10;      unset($blocks[$key]);&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_panels_ipe_blocks_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_system_themes_page_alter" value="/**&#10; * Implements hook_system_themes_page_alter().&#10; *&#10; * Alters theme operation links.&#10; *&#10; * @param $theme_groups&#10; *   An associative array containing groups of themes.&#10; *&#10; * @see system_themes_page()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_system_themes_page_alter(&amp;$theme_groups) {&#10;  foreach ($theme_groups as $state =&#62; &amp;$group) {&#10;    foreach ($theme_groups[$state] as &amp;$theme) {&#10;      // Add a foo link to each list of theme operations.&#10;      $theme-&#62;operations[] = array(&#10;        &#39;title&#39; =&#62; t(&#39;Foo&#39;),&#10;        &#39;url&#39; =&#62; Url::fromRoute(&#39;system.themes_page&#39;),&#10;        &#39;query&#39; =&#62; array(&#39;theme&#39; =&#62; $theme-&#62;getName())&#10;      );&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_system_themes_page_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_system_themes_page_alter" value="/**&#10; * Implements hook_system_themes_page_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_system_themes_page_alter(&amp;$theme_groups) {&#10;  foreach ($theme_groups as $state =&#62; &amp;$group) {&#10;    foreach ($theme_groups[$state] as &amp;$theme) {&#10;      // Add a foo link to each list of theme operations.&#10;      $theme-&#62;operations[] = array(&#10;        &#39;title&#39; =&#62; t(&#39;Foo&#39;),&#10;        &#39;url&#39; =&#62; Url::fromRoute(&#39;system.themes_page&#39;),&#10;        &#39;query&#39; =&#62; array(&#39;theme&#39; =&#62; $theme-&#62;getName())&#10;      );&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_system_themes_page_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_rest_resource_alter" value="/**&#10; * Implements hook_rest_resource_alter().&#10; *&#10; * Alter the resource plugin definitions.&#10; *&#10; * @param array $definitions&#10; *   The collection of resource definitions.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_rest_resource_alter(&amp;$definitions) {&#10;  if (isset($definitions[&#39;entity:node&#39;])) {&#10;    // We want to handle REST requests regarding nodes with our own plugin&#10;    // class.&#10;    $definitions[&#39;entity:node&#39;][&#39;class&#39;] = &#39;Drupal\mymodule\Plugin\rest\resource\NodeResource&#39;;&#10;    // Serialized nodes should be expanded to my specific node class.&#10;    $definitions[&#39;entity:node&#39;][&#39;serialization_class&#39;] = &#39;Drupal\mymodule\Entity\MyNode&#39;;&#10;  }&#10;  // We don&#39;t want Views to show up in the array of plugins at all.&#10;  unset($definitions[&#39;entity:view&#39;]);&#10;  $END$&#10;}" description="hook_rest_resource_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_rest_resource_alter" value="/**&#10; * Implements hook_rest_resource_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_rest_resource_alter(&amp;$definitions) {&#10;  if (isset($definitions[&#39;entity:node&#39;])) {&#10;    // We want to handle REST requests regarding nodes with our own plugin&#10;    // class.&#10;    $definitions[&#39;entity:node&#39;][&#39;class&#39;] = &#39;Drupal\mymodule\Plugin\rest\resource\NodeResource&#39;;&#10;    // Serialized nodes should be expanded to my specific node class.&#10;    $definitions[&#39;entity:node&#39;][&#39;serialization_class&#39;] = &#39;Drupal\mymodule\Entity\MyNode&#39;;&#10;  }&#10;  // We don&#39;t want Views to show up in the array of plugins at all.&#10;  unset($definitions[&#39;entity:view&#39;]);&#10;  $END$&#10;}" description="hook_rest_resource_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_rest_type_uri_alter" value="/**&#10; * Implements hook_rest_type_uri_alter().&#10; *&#10; * Alter the REST type URI.&#10; *&#10; * Modules may wish to alter the type URI generated for a resource based on the&#10; * context of the serializer/normalizer operation.&#10; *&#10; * @param string $uri&#10; *   The URI to alter.&#10; * @param array $context&#10; *   The context from the serializer/normalizer operation.&#10; *&#10; * @see \Symfony\Component\Serializer\SerializerInterface::serialize()&#10; * @see \Symfony\Component\Serializer\SerializerInterface::deserialize()&#10; * @see \Symfony\Component\Serializer\NormalizerInterface::normalize()&#10; * @see \Symfony\Component\Serializer\DenormalizerInterface::denormalize()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_rest_type_uri_alter(&amp;$uri, $context = array()) {&#10;  if ($context[&#39;mymodule&#39;] == TRUE) {&#10;    $base = \Drupal::config(&#39;rest.settings&#39;)-&#62;get(&#39;link_domain&#39;);&#10;    $uri = str_replace($base, &#39;http://mymodule.domain&#39;, $uri);&#10;  }&#10;  $END$&#10;}" description="hook_rest_type_uri_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_rest_type_uri_alter" value="/**&#10; * Implements hook_rest_type_uri_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_rest_type_uri_alter(&amp;$uri, $context = array()) {&#10;  if ($context[&#39;mymodule&#39;] == TRUE) {&#10;    $base = \Drupal::config(&#39;rest.settings&#39;)-&#62;get(&#39;link_domain&#39;);&#10;    $uri = str_replace($base, &#39;http://mymodule.domain&#39;, $uri);&#10;  }&#10;  $END$&#10;}" description="hook_rest_type_uri_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_rest_relation_uri_alter" value="/**&#10; * Implements hook_rest_relation_uri_alter().&#10; *&#10; * Alter the REST relation URI.&#10; *&#10; * Modules may wish to alter the relation URI generated for a resource based on&#10; * the context of the serializer/normalizer operation.&#10; *&#10; * @param string $uri&#10; *   The URI to alter.&#10; * @param array $context&#10; *   The context from the serializer/normalizer operation.&#10; *&#10; * @see \Symfony\Component\Serializer\SerializerInterface::serialize()&#10; * @see \Symfony\Component\Serializer\SerializerInterface::deserialize()&#10; * @see \Symfony\Component\Serializer\NormalizerInterface::normalize()&#10; * @see \Symfony\Component\Serializer\DenormalizerInterface::denormalize()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_rest_relation_uri_alter(&amp;$uri, $context = array()) {&#10;  if ($context[&#39;mymodule&#39;] == TRUE) {&#10;    $base = \Drupal::config(&#39;rest.settings&#39;)-&#62;get(&#39;link_domain&#39;);&#10;    $uri = str_replace($base, &#39;http://mymodule.domain&#39;, $uri);&#10;  }&#10;  $END$&#10;}" description="hook_rest_relation_uri_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_rest_relation_uri_alter" value="/**&#10; * Implements hook_rest_relation_uri_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_rest_relation_uri_alter(&amp;$uri, $context = array()) {&#10;  if ($context[&#39;mymodule&#39;] == TRUE) {&#10;    $base = \Drupal::config(&#39;rest.settings&#39;)-&#62;get(&#39;link_domain&#39;);&#10;    $uri = str_replace($base, &#39;http://mymodule.domain&#39;, $uri);&#10;  }&#10;  $END$&#10;}" description="hook_rest_relation_uri_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_help" value="/**&#10; * Implements hook_help().&#10; *&#10; * Provide online user help.&#10; *&#10; * By implementing hook_help(), a module can make documentation available to&#10; * the user for the module as a whole, or for specific pages. Help for&#10; * developers should usually be provided via function header comments in the&#10; * code, or in special API example files.&#10; *&#10; * The page-specific help information provided by this hook appears in the&#10; * Help block (provided by the core Help module), if the block is displayed on&#10; * that page. The module overview help information is displayed by the Help&#10; * module. It can be accessed from the page at /admin/help or from the Extend&#10; * page. If a module implements hook_help() the help system expects module&#10; * overview help to be provided.&#10; *&#10; * For detailed usage examples of:&#10; * - Module overview help, see content_translation_help(). Module overview&#10; *   help should follow&#10; *   @link https://www.drupal.org/node/632280 the standard help template. @endlink&#10; * - Page-specific help using only routes, see book_help().&#10; * - Page-specific help using routes and $request, see block_help().&#10; *&#10; * @param string $route_name&#10; *   For page-specific help, use the route name as identified in the&#10; *   module&#39;s routing.yml file. For module overview help, the route name&#10; *   will be in the form of &#34;help.page.$modulename&#34;.&#10; * @param Drupal\Core\Routing\RouteMatchInterface $route_match&#10; *   The current route match. This can be used to generate different help&#10; *   output for different pages that share the same route.&#10; *&#10; * @return string|array&#10; *   A render array, localized string, or object that can be rendered into&#10; *   a string, containing the help text.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {&#10;  switch ($route_name) {&#10;    // Main module help for the block module.&#10;    case &#39;help.page.block&#39;:&#10;      return &#39;&#60;p&#62;&#39; . t(&#39;Blocks are boxes of content rendered into an area, or region, of a web page. The default theme Bartik, for example, implements the regions &#34;Sidebar first&#34;, &#34;Sidebar second&#34;, &#34;Featured&#34;, &#34;Content&#34;, &#34;Header&#34;, &#34;Footer&#34;, etc., and a block may appear in any one of these areas. The &#60;a href=&#34;:blocks&#34;&#62;blocks administration page&#60;/a&#62; provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions.&#39;, array(&#39;:blocks&#39; =&#62; \Drupal::url(&#39;block.admin_display&#39;))) . &#39;&#60;/p&#62;&#39;;&#10;&#10;    // Help for another path in the block module.&#10;    case &#39;block.admin_display&#39;:&#10;      return &#39;&#60;p&#62;&#39; . t(&#39;This page provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions. Since not all themes implement the same regions, or display regions in the same way, blocks are positioned on a per-theme basis. Remember that your changes will not be saved until you click the &#60;em&#62;Save blocks&#60;/em&#62; button at the bottom of the page.&#39;) . &#39;&#60;/p&#62;&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_help" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_help" value="/**&#10; * Implements hook_help().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {&#10;  switch ($route_name) {&#10;    // Main module help for the block module.&#10;    case &#39;help.page.block&#39;:&#10;      return &#39;&#60;p&#62;&#39; . t(&#39;Blocks are boxes of content rendered into an area, or region, of a web page. The default theme Bartik, for example, implements the regions &#34;Sidebar first&#34;, &#34;Sidebar second&#34;, &#34;Featured&#34;, &#34;Content&#34;, &#34;Header&#34;, &#34;Footer&#34;, etc., and a block may appear in any one of these areas. The &#60;a href=&#34;:blocks&#34;&#62;blocks administration page&#60;/a&#62; provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions.&#39;, array(&#39;:blocks&#39; =&#62; \Drupal::url(&#39;block.admin_display&#39;))) . &#39;&#60;/p&#62;&#39;;&#10;&#10;    // Help for another path in the block module.&#10;    case &#39;block.admin_display&#39;:&#10;      return &#39;&#60;p&#62;&#39; . t(&#39;This page provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions. Since not all themes implement the same regions, or display regions in the same way, blocks are positioned on a per-theme basis. Remember that your changes will not be saved until you click the &#60;em&#62;Save blocks&#60;/em&#62; button at the bottom of the page.&#39;) . &#39;&#60;/p&#62;&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_help" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_help_section_info_alter" value="/**&#10; * Implements hook_help_section_info_alter().&#10; *&#10; * Perform alterations on help page section plugin definitions.&#10; *&#10; * Sections for the page at /admin/help are provided by plugins. This hook&#10; * allows modules to alter the plugin definitions.&#10; *&#10; * @param array $info&#10; *   Array of plugin information exposed by hook page section plugins, altered&#10; *   by reference.&#10; *&#10; * @see \Drupal\help\HelpSectionPluginInterface&#10; * @see \Drupal\help\Annotation\HelpSection&#10; * @see \Drupal\help\HelpSectionManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_help_section_info_alter(&amp;$info) {&#10;  // Alter the header for the module overviews section.&#10;  $info[&#39;hook_help&#39;][&#39;header&#39;] = t(&#39;Overviews of modules&#39;);&#10;  $END$&#10;}" description="hook_help_section_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_help_section_info_alter" value="/**&#10; * Implements hook_help_section_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_help_section_info_alter(&amp;$info) {&#10;  // Alter the header for the module overviews section.&#10;  $info[&#39;hook_help&#39;][&#39;header&#39;] = t(&#39;Overviews of modules&#39;);&#10;  $END$&#10;}" description="hook_help_section_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_migrate_prepare_row" value="/**&#10; * Implements hook_migrate_prepare_row().&#10; *&#10; * Allows adding data to a row before processing it.&#10; *&#10; * For example, filter module used to store filter format settings in the&#10; * variables table which now needs to be inside the filter format config&#10; * file. So, it needs to be added here.&#10; *&#10; * hook_migrate_MIGRATION_ID_prepare_row() is also available.&#10; *&#10; * @ingroup migration&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {&#10;  if ($migration-&#62;id() == &#39;d6_filter_formats&#39;) {&#10;    $value = $source-&#62;getDatabase()-&#62;query(&#39;SELECT value FROM {variable} WHERE name = :name&#39;, array(&#39;:name&#39; =&#62; &#39;mymodule_filter_foo_&#39; . $row-&#62;getSourceProperty(&#39;format&#39;)))-&#62;fetchField();&#10;    if ($value) {&#10;      $row-&#62;setSourceProperty(&#39;settings:mymodule:foo&#39;, unserialize($value));&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_migrate_prepare_row" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_migrate_prepare_row" value="/**&#10; * Implements hook_migrate_prepare_row().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {&#10;  if ($migration-&#62;id() == &#39;d6_filter_formats&#39;) {&#10;    $value = $source-&#62;getDatabase()-&#62;query(&#39;SELECT value FROM {variable} WHERE name = :name&#39;, array(&#39;:name&#39; =&#62; &#39;mymodule_filter_foo_&#39; . $row-&#62;getSourceProperty(&#39;format&#39;)))-&#62;fetchField();&#10;    if ($value) {&#10;      $row-&#62;setSourceProperty(&#39;settings:mymodule:foo&#39;, unserialize($value));&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_migrate_prepare_row" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_migration_plugins_alter" value="/**&#10; * Implements hook_migration_plugins_alter().&#10; *&#10; * Allows altering the list of discovered migration plugins.&#10; *&#10; * Modules are able to alter specific migrations structures or even remove or&#10; * append additional migrations to the discovery. For example, this&#10; * implementation filters out Drupal 6 migrations from the discovered migration&#10; * list. This is done by checking the migration tags.&#10; *&#10; * @param array[] $migrations&#10; *   An associative array of migrations keyed by migration ID. Each value is the&#10; *   migration array, obtained by decoding the migration YAML file and enriched&#10; *   with some meta information added during discovery phase, like migration&#10; *   &#39;class&#39;, &#39;provider&#39; or &#39;_discovered_file_path&#39;.&#10; *&#10; * @ingroup migration&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_migration_plugins_alter(array &amp;$migrations) {&#10;  $migrations = array_filter($migrations, function (array $migration) {&#10;    $tags = isset($migration[&#39;migration_tags&#39;]) ? (array) $migration[&#39;migration_tags&#39;] : [];&#10;    return !in_array(&#39;Drupal 6&#39;, $tags);&#10;  });&#10;  $END$&#10;}" description="hook_migration_plugins_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_migration_plugins_alter" value="/**&#10; * Implements hook_migration_plugins_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_migration_plugins_alter(array &amp;$migrations) {&#10;  $migrations = array_filter($migrations, function (array $migration) {&#10;    $tags = isset($migration[&#39;migration_tags&#39;]) ? (array) $migration[&#39;migration_tags&#39;] : [];&#10;    return !in_array(&#39;Drupal 6&#39;, $tags);&#10;  });&#10;  $END$&#10;}" description="hook_migration_plugins_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_quickedit_editor_alter" value="/**&#10; * Implements hook_quickedit_editor_alter().&#10; *&#10; * Allow modules to alter in-place editor plugin metadata.&#10; *&#10; * This hook is called after the in-place editor plugins have been discovered,&#10; * but before they are cached. Hence any alterations will be cached.&#10; *&#10; * @param array &amp;$editors&#10; *   An array of metadata on existing in-place editors, as collected by the&#10; *   annotation discovery mechanism.&#10; *&#10; * @see \Drupal\quickedit\Annotation\InPlaceEditor&#10; * @see \Drupal\quickedit\Plugin\EditorManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_quickedit_editor_alter(&amp;$editors) {&#10;  // Cleanly override editor.module&#39;s in-place editor plugin.&#10;  $editors[&#39;editor&#39;][&#39;class&#39;] = &#39;Drupal\advanced_editor\Plugin\quickedit\editor\AdvancedEditor&#39;;&#10;  $END$&#10;}" description="hook_quickedit_editor_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_quickedit_editor_alter" value="/**&#10; * Implements hook_quickedit_editor_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_quickedit_editor_alter(&amp;$editors) {&#10;  // Cleanly override editor.module&#39;s in-place editor plugin.&#10;  $editors[&#39;editor&#39;][&#39;class&#39;] = &#39;Drupal\advanced_editor\Plugin\quickedit\editor\AdvancedEditor&#39;;&#10;  $END$&#10;}" description="hook_quickedit_editor_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_quickedit_render_field" value="/**&#10; * Implements hook_quickedit_render_field().&#10; *&#10; * Returns a renderable array for the value of a single field in an entity.&#10; *&#10; * To integrate with in-place field editing when a non-standard render pipeline&#10; * is used (FieldItemListInterface::view() is not sufficient to render back the&#10; * field following in-place editing in the exact way it was displayed&#10; * originally), implement this hook.&#10; *&#10; * Edit module integrates with HTML elements with data-edit-field-id attributes.&#10; * For example:&#10; *   data-edit-field-id=&#34;node/1/&#60;field-name&#62;/und/&#60;module-name&#62;-&#60;custom-id&#62;&#34;&#10; * After the editing is complete, this hook is invoked on the module with&#10; * the custom render pipeline identifier (last part of data-edit-field-id) to&#10; * re-render the field. Use the same logic used when rendering the field for&#10; * the original display.&#10; *&#10; * The implementation should take care of invoking the prepare_view steps. It&#10; * should also respect field access permissions.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity containing the field to display.&#10; * @param string $field_name&#10; *   The name of the field to display.&#10; * @param string $view_mode_id&#10; *   View mode ID for the custom render pipeline this field view was destined&#10; *   for. This is not a regular view mode ID for the Entity/Field API render&#10; *   pipeline and is provided by the renderer module instead. An example could&#10; *   be Views&#39; render pipeline. In the example of Views, the view mode ID would&#10; *   probably contain the View&#39;s ID, display and the row index. Views would&#10; *   know the internal structure of this ID. The only structure imposed on this&#10; *   ID is that it contains dash separated values and the first value is the&#10; *   module name. Only that module&#39;s hook implementation will be invoked. Eg.&#10; *   &#39;views-...-...&#39;.&#10; * @param string $langcode&#10; *   (Optional) The language code the field values are to be shown in.&#10; *&#10; * @return&#10; *   A renderable array for the field value.&#10; *&#10; * @see \Drupal\Core\Field\FieldItemListInterface::view()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_quickedit_render_field(Drupal\Core\Entity\EntityInterface $entity, $field_name, $view_mode_id, $langcode) {&#10;  return array(&#10;    &#39;#prefix&#39; =&#62; &#39;&#60;div class=&#34;example-markup&#34;&#62;&#39;,&#10;    &#39;field&#39; =&#62; $entity-&#62;getTranslation($langcode)-&#62;get($field_name)-&#62;view($view_mode_id),&#10;    &#39;#suffix&#39; =&#62; &#39;&#60;/div&#62;&#39;,&#10;  );&#10;  $END$&#10;}" description="hook_quickedit_render_field" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_quickedit_render_field" value="/**&#10; * Implements hook_quickedit_render_field().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_quickedit_render_field(Drupal\Core\Entity\EntityInterface $entity, $field_name, $view_mode_id, $langcode) {&#10;  return array(&#10;    &#39;#prefix&#39; =&#62; &#39;&#60;div class=&#34;example-markup&#34;&#62;&#39;,&#10;    &#39;field&#39; =&#62; $entity-&#62;getTranslation($langcode)-&#62;get($field_name)-&#62;view($view_mode_id),&#10;    &#39;#suffix&#39; =&#62; &#39;&#60;/div&#62;&#39;,&#10;  );&#10;  $END$&#10;}" description="hook_quickedit_render_field" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_analyze" value="/**&#10; * Implements hook_views_analyze().&#10; *&#10; * Analyze a view to provide warnings about its configuration.&#10; *&#10; * @param \Drupal\views\ViewExecutable $view&#10; *   The view being executed.&#10; *&#10; * @return array&#10; *   Array of warning messages built by Analyzer::formatMessage to be displayed&#10; *   to the user following analysis of the view.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_analyze(Drupal\views\ViewExecutable $view) {&#10;  $messages = array();&#10;&#10;  if ($view-&#62;display_handler-&#62;options[&#39;pager&#39;][&#39;type&#39;] == &#39;none&#39;) {&#10;    $messages[] = Drupal\views\Analyzer::formatMessage(t(&#39;This view has no pager. This could cause performance issues when the view contains many items.&#39;), &#39;warning&#39;);&#10;  }&#10;&#10;  return $messages;&#10;  $END$&#10;}" description="hook_views_analyze" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_analyze" value="/**&#10; * Implements hook_views_analyze().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_analyze(Drupal\views\ViewExecutable $view) {&#10;  $messages = array();&#10;&#10;  if ($view-&#62;display_handler-&#62;options[&#39;pager&#39;][&#39;type&#39;] == &#39;none&#39;) {&#10;    $messages[] = Drupal\views\Analyzer::formatMessage(t(&#39;This view has no pager. This could cause performance issues when the view contains many items.&#39;), &#39;warning&#39;);&#10;  }&#10;&#10;  return $messages;&#10;  $END$&#10;}" description="hook_views_analyze" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_data" value="/**&#10; * Implements hook_views_data().&#10; *&#10; * Describe data tables and fields (or the equivalent) to Views.&#10; *&#10; * The table and fields are processed in Views using various plugins. See&#10; * the @link views_plugins Views plugins topic @endlink for more information.&#10; *&#10; * To provide views data for an entity, instead of implementing this hook,&#10; * create a class implementing \Drupal\views\EntityViewsDataInterface and&#10; * reference this in the &#34;views&#34; annotation in the entity class. The return&#10; * value of the getViewsData() method on the interface is the same as this hook,&#10; * and base class in \Drupal\views\EntityViewsData will take care of adding the&#10; * basic Views tables and fields for your entity. See the&#10; * @link entity_api Entity API topic @endlink for more information about&#10; * entities.&#10; *&#10; * The data described with this hook is fetched and retrieved by&#10; * \Drupal\views\Views::viewsData()-&#62;get().&#10; *&#10; * @return array&#10; *   An associative array describing the structure of database tables and fields&#10; *   (and their equivalents) provided for use in Views. At the outermost level,&#10; *   the keys are the names used internally by Views for the tables (usually the&#10; *   actual table name). Each table&#39;s array describes the table itself, how to&#10; *   join to other tables, and the fields that are part of the table. The sample&#10; *   function body provides documentation of the details.&#10; *&#10; * @see hook_views_data_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_data() {&#10;  // This example describes how to write hook_views_data() for a table defined&#10;  // like this:&#10;  // CREATE TABLE example_table (&#10;  //   nid INT(11) NOT NULL         COMMENT &#39;Primary key: {node}.nid.&#39;,&#10;  //   plain_text_field VARCHAR(32) COMMENT &#39;Just a plain text field.&#39;,&#10;  //   numeric_field INT(11)        COMMENT &#39;Just a numeric field.&#39;,&#10;  //   boolean_field INT(1)         COMMENT &#39;Just an on/off field.&#39;,&#10;  //   timestamp_field INT(8)       COMMENT &#39;Just a timestamp field.&#39;,&#10;  //   langcode VARCHAR(12)         COMMENT &#39;Language code field.&#39;,&#10;  //   PRIMARY KEY(nid)&#10;  // );&#10;&#10;  // Define the return array.&#10;  $data = array();&#10;&#10;  // The outermost keys of $data are Views table names, which should usually&#10;  // be the same as the hook_schema() table names.&#10;  $data[&#39;example_table&#39;] = array();&#10;&#10;  // The value corresponding to key &#39;table&#39; gives properties of the table&#10;  // itself.&#10;  $data[&#39;example_table&#39;][&#39;table&#39;] = array();&#10;&#10;  // Within &#39;table&#39;, the value of &#39;group&#39; (translated string) is used as a&#10;  // prefix in Views UI for this table&#39;s fields, filters, etc. When adding&#10;  // a field, filter, etc. you can also filter by the group.&#10;  $data[&#39;example_table&#39;][&#39;table&#39;][&#39;group&#39;] = t(&#39;Example table&#39;);&#10;&#10;  // Within &#39;table&#39;, the value of &#39;provider&#39; is the module that provides schema&#10;  // or the entity type that causes the table to exist. Setting this ensures&#10;  // that views have the correct dependencies. This is automatically set to the&#10;  // module that implements hook_views_data().&#10;  $data[&#39;example_table&#39;][&#39;table&#39;][&#39;provider&#39;] = &#39;example_module&#39;;&#10;&#10;  // Some tables are &#34;base&#34; tables, meaning that they can be the base tables&#10;  // for views. Non-base tables can only be brought in via relationships in&#10;  // views based on other tables. To define a table to be a base table, add&#10;  // key &#39;base&#39; to the &#39;table&#39; array:&#10;  $data[&#39;example_table&#39;][&#39;table&#39;][&#39;base&#39;] = array(&#10;    // Identifier (primary) field in this table for Views.&#10;    &#39;field&#39; =&#62; &#39;nid&#39;,&#10;    // Label in the UI.&#10;    &#39;title&#39; =&#62; t(&#39;Example table&#39;),&#10;    // Longer description in the UI. Required.&#10;    &#39;help&#39; =&#62; t(&#39;Example table contains example content and can be related to nodes.&#39;),&#10;    &#39;weight&#39; =&#62; -10,&#10;  );&#10;&#10;  // Some tables have an implicit, automatic relationship to other tables,&#10;  // meaning that when the other table is available in a view (either as the&#10;  // base table or through a relationship), this table&#39;s fields, filters, etc.&#10;  // are automatically made available without having to add an additional&#10;  // relationship. To define an implicit relationship that will make your&#10;  // table automatically available when another table is present, add a &#39;join&#39;&#10;  // section to your &#39;table&#39; section. Note that it is usually only a good idea&#10;  // to do this for one-to-one joins, because otherwise your automatic join&#10;  // will add more rows to the view. It is also not a good idea to do this if&#10;  // most views won&#39;t need your table -- if that is the case, define a&#10;  // relationship instead (see below).&#10;  //&#10;  // If you&#39;ve decided an automatic join is a good idea, here&#39;s how to do it;&#10;  // the resulting SQL query will look something like this:&#10;  //   ... FROM example_table et ... JOIN node_field_data nfd&#10;  //   ON et.nid = nfd.nid AND (&#39;extra&#39; clauses will be here) ...&#10;  // although the table aliases will be different.&#10;  $data[&#39;example_table&#39;][&#39;table&#39;][&#39;join&#39;] = array(&#10;    // Within the &#39;join&#39; section, list one or more tables to automatically&#10;    // join to. In this example, every time &#39;node_field_data&#39; is available in&#10;    // a view, &#39;example_table&#39; will be too. The array keys here are the array&#10;    // keys for the other tables, given in their hook_views_data()&#10;    // implementations. If the table listed here is from another module&#39;s&#10;    // hook_views_data() implementation, make sure your module depends on that&#10;    // other module.&#10;    &#39;node_field_data&#39; =&#62; array(&#10;      // Primary key field in node_field_data to use in the join.&#10;      &#39;left_field&#39; =&#62; &#39;nid&#39;,&#10;      // Foreign key field in example_table to use in the join.&#10;      &#39;field&#39; =&#62; &#39;nid&#39;,&#10;      // &#39;extra&#39; is an array of additional conditions on the join.&#10;      &#39;extra&#39; =&#62; array(&#10;        0 =&#62; array(&#10;          // Adds AND node_field_data.published = TRUE to the join.&#10;          &#39;field&#39; =&#62; &#39;published&#39;,&#10;          &#39;value&#39; =&#62; TRUE,&#10;        ),&#10;        1 =&#62; array(&#10;          // Adds AND example_table.numeric_field = 1 to the join.&#10;          &#39;left_field&#39; =&#62; &#39;numeric_field&#39;,&#10;          &#39;value&#39; =&#62; 1,&#10;          // If true, the value will not be surrounded in quotes.&#10;          &#39;numeric&#39; =&#62; TRUE,&#10;        ),&#10;        2 =&#62; array(&#10;          // Adds AND example_table.boolean_field &#60;&#62;&#10;          // node_field_data.published to the join.&#10;          &#39;field&#39; =&#62; &#39;published&#39;,&#10;          &#39;left_field&#39; =&#62; &#39;boolean_field&#39;,&#10;          // The operator used, Defaults to &#34;=&#34;.&#10;          &#39;operator&#39; =&#62; &#39;!=&#39;,&#10;        ),&#10;      ),&#10;    ),&#10;  );&#10;&#10;  // You can also do a more complex join, where in order to get to a certain&#10;  // base table defined in a hook_views_data() implementation, you will join&#10;  // to a different table that Views knows how to auto-join to the base table.&#10;  // For instance, if another module that your module depends on had&#10;  // defined a table &#39;foo&#39; with an automatic join to &#39;node_field_table&#39; (as&#10;  // shown above), you could join to &#39;node_field_table&#39; via the &#39;foo&#39; table.&#10;  // Here&#39;s how to do this, and the resulting SQL query would look something&#10;  // like this:&#10;  //   ... FROM example_table et ... JOIN foo foo&#10;  //   ON et.nid = foo.nid AND (&#39;extra&#39; clauses will be here) ...&#10;  //   JOIN node_field_data nfd ON (definition of the join from the foo&#10;  //   module goes here) ...&#10;  // although the table aliases will be different.&#10;  $data[&#39;example_table&#39;][&#39;table&#39;][&#39;join&#39;][&#39;node_field_data&#39;] = array(&#10;    // &#39;node_field_data&#39; above is the base we&#39;re joining to in Views.&#10;    // &#39;left_table&#39; is the table we&#39;re actually joining to, in order to get to&#10;    // &#39;node_field_data&#39;. It has to be something that Views knows how to join&#10;    // to &#39;node_field_data&#39;.&#10;    &#39;left_table&#39; =&#62; &#39;foo&#39;,&#10;    &#39;left_field&#39; =&#62; &#39;nid&#39;,&#10;    &#39;field&#39; =&#62; &#39;nid&#39;,&#10;    // &#39;extra&#39; is an array of additional conditions on the join.&#10;    &#39;extra&#39; =&#62; array(&#10;      // This syntax matches additional fields in the two tables:&#10;      // ... AND foo.langcode = example_table.langcode ...&#10;      array(&#39;left_field&#39; =&#62; &#39;langcode&#39;, &#39;field&#39; =&#62; &#39;langcode&#39;),&#10;      // This syntax adds a condition on our table. &#39;operator&#39; defaults to&#10;      // &#39;=&#39; for non-array values, or &#39;IN&#39; for array values.&#10;      // ... AND example_table.numeric_field &#62; 0 ...&#10;      array(&#39;field&#39; =&#62; &#39;numeric_field&#39;, &#39;value&#39; =&#62; 0, &#39;numeric&#39; =&#62; TRUE, &#39;operator&#39; =&#62; &#39;&#62;&#39;),&#10;    ),&#10;  );&#10;&#10;  // Other array elements at the top level of your table&#39;s array describe&#10;  // individual database table fields made available to Views. The array keys&#10;  // are the names (unique within the table) used by Views for the fields,&#10;  // usually equal to the database field names.&#10;  //&#10;  // Each field entry must have the following elements:&#10;  // - title: Translated label for the field in the UI.&#10;  // - help: Description of the field in the UI.&#10;  //&#10;  // Each field entry may also have one or more of the following elements,&#10;  // describing &#34;handlers&#34; (plugins) for the field:&#10;  // - relationship: Specifies a handler that allows this field to be used&#10;  //   to define a relationship to another table in Views.&#10;  // - field: Specifies a handler to make it available to Views as a field.&#10;  // - filter: Specifies a handler to make it available to Views as a filter.&#10;  // - sort: Specifies a handler to make it available to Views as a sort.&#10;  // - argument: Specifies a handler to make it available to Views as an&#10;  //   argument, or contextual filter as it is known in the UI.&#10;  // - area: Specifies a handler to make it available to Views to add content&#10;  //   to the header, footer, or as no result behavior.&#10;  //&#10;  // Note that when specifying handlers, you must give the handler plugin ID&#10;  // and you may also specify overrides for various settings that make up the&#10;  // plugin definition. See examples below; the Boolean example demonstrates&#10;  // setting overrides.&#10;&#10;  // Node ID field, exposed as relationship only, since it is a foreign key&#10;  // in this table.&#10;  $data[&#39;example_table&#39;][&#39;nid&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;Example content&#39;),&#10;    &#39;help&#39; =&#62; t(&#39;Relate example content to the node content&#39;),&#10;&#10;    // Define a relationship to the node_field_data table, so views whose&#10;    // base table is example_table can add a relationship to nodes. To make a&#10;    // relationship in the other direction, you can:&#10;    // - Use hook_views_data_alter() -- see the function body example on that&#10;    //   hook for details.&#10;    // - Use the implicit join method described above.&#10;    &#39;relationship&#39; =&#62; array(&#10;      // Views name of the table to join to for the relationship.&#10;      &#39;base&#39; =&#62; &#39;node_field_data&#39;,&#10;      // Database field name in the other table to join on.&#10;      &#39;base field&#39; =&#62; &#39;nid&#39;,&#10;      // ID of relationship handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;standard&#39;,&#10;      // Default label for relationship in the UI.&#10;      &#39;label&#39; =&#62; t(&#39;Example node&#39;),&#10;    ),&#10;  );&#10;&#10;  // Plain text field, exposed as a field, sort, filter, and argument.&#10;  $data[&#39;example_table&#39;][&#39;plain_text_field&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;Plain text field&#39;),&#10;    &#39;help&#39; =&#62; t(&#39;Just a plain text field.&#39;),&#10;&#10;    &#39;field&#39; =&#62; array(&#10;      // ID of field handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;standard&#39;,&#10;    ),&#10;&#10;    &#39;sort&#39; =&#62; array(&#10;      // ID of sort handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;standard&#39;,&#10;    ),&#10;&#10;    &#39;filter&#39; =&#62; array(&#10;      // ID of filter handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;string&#39;,&#10;    ),&#10;&#10;    &#39;argument&#39; =&#62; array(&#10;      // ID of argument handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;string&#39;,&#10;    ),&#10;  );&#10;&#10;  // Numeric field, exposed as a field, sort, filter, and argument.&#10;  $data[&#39;example_table&#39;][&#39;numeric_field&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;Numeric field&#39;),&#10;    &#39;help&#39; =&#62; t(&#39;Just a numeric field.&#39;),&#10;&#10;    &#39;field&#39; =&#62; array(&#10;      // ID of field handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;numeric&#39;,&#10;    ),&#10;&#10;    &#39;sort&#39; =&#62; array(&#10;      // ID of sort handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;standard&#39;,&#10;    ),&#10;&#10;    &#39;filter&#39; =&#62; array(&#10;      // ID of filter handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;numeric&#39;,&#10;    ),&#10;&#10;    &#39;argument&#39; =&#62; array(&#10;      // ID of argument handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;numeric&#39;,&#10;    ),&#10;  );&#10;&#10;  // Boolean field, exposed as a field, sort, and filter. The filter section&#10;  // illustrates overriding various settings.&#10;  $data[&#39;example_table&#39;][&#39;boolean_field&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;Boolean field&#39;),&#10;    &#39;help&#39; =&#62; t(&#39;Just an on/off field.&#39;),&#10;&#10;    &#39;field&#39; =&#62; array(&#10;      // ID of field handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;boolean&#39;,&#10;    ),&#10;&#10;    &#39;sort&#39; =&#62; array(&#10;      // ID of sort handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;standard&#39;,&#10;    ),&#10;&#10;    &#39;filter&#39; =&#62; array(&#10;      // ID of filter handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;boolean&#39;,&#10;      // Override the generic field title, so that the filter uses a different&#10;      // label in the UI.&#10;      &#39;label&#39; =&#62; t(&#39;Published&#39;),&#10;      // Override the default BooleanOperator filter handler&#39;s &#39;type&#39; setting,&#10;      // to display this as a &#34;Yes/No&#34; filter instead of a &#34;True/False&#34; filter.&#10;      &#39;type&#39; =&#62; &#39;yes-no&#39;,&#10;      // Override the default Boolean filter handler&#39;s &#39;use_equal&#39; setting, to&#10;      // make the query use &#39;boolean_field = 1&#39; instead of &#39;boolean_field &#60;&#62; 0&#39;.&#10;      &#39;use_equal&#39; =&#62; TRUE,&#10;    ),&#10;  );&#10;&#10;  // Integer timestamp field, exposed as a field, sort, and filter.&#10;  $data[&#39;example_table&#39;][&#39;timestamp_field&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;Timestamp field&#39;),&#10;    &#39;help&#39; =&#62; t(&#39;Just a timestamp field.&#39;),&#10;&#10;    &#39;field&#39; =&#62; array(&#10;      // ID of field handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;date&#39;,&#10;    ),&#10;&#10;    &#39;sort&#39; =&#62; array(&#10;      // ID of sort handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;date&#39;,&#10;    ),&#10;&#10;    &#39;filter&#39; =&#62; array(&#10;      // ID of filter handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;date&#39;,&#10;    ),&#10;  );&#10;&#10;  // Area example. Areas are not generally associated with actual data&#10;  // tables and fields. This example is from views_views_data(), which defines&#10;  // the &#34;Global&#34; table (not really a table, but a group of Fields, Filters,&#10;  // etc. that are grouped into section &#34;Global&#34; in the UI). Here&#39;s the&#10;  // definition of the generic &#34;Text area&#34;:&#10;  $data[&#39;views&#39;][&#39;area&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;Text area&#39;),&#10;    &#39;help&#39; =&#62; t(&#39;Provide markup text for the area.&#39;),&#10;    &#39;area&#39; =&#62; array(&#10;      // ID of the area handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;text&#39;,&#10;    ),&#10;  );&#10;&#10;  return $data;&#10;  $END$&#10;}" description="hook_views_data" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_data" value="/**&#10; * Implements hook_views_data().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_data() {&#10;  // This example describes how to write hook_views_data() for a table defined&#10;  // like this:&#10;  // CREATE TABLE example_table (&#10;  //   nid INT(11) NOT NULL         COMMENT &#39;Primary key: {node}.nid.&#39;,&#10;  //   plain_text_field VARCHAR(32) COMMENT &#39;Just a plain text field.&#39;,&#10;  //   numeric_field INT(11)        COMMENT &#39;Just a numeric field.&#39;,&#10;  //   boolean_field INT(1)         COMMENT &#39;Just an on/off field.&#39;,&#10;  //   timestamp_field INT(8)       COMMENT &#39;Just a timestamp field.&#39;,&#10;  //   langcode VARCHAR(12)         COMMENT &#39;Language code field.&#39;,&#10;  //   PRIMARY KEY(nid)&#10;  // );&#10;&#10;  // Define the return array.&#10;  $data = array();&#10;&#10;  // The outermost keys of $data are Views table names, which should usually&#10;  // be the same as the hook_schema() table names.&#10;  $data[&#39;example_table&#39;] = array();&#10;&#10;  // The value corresponding to key &#39;table&#39; gives properties of the table&#10;  // itself.&#10;  $data[&#39;example_table&#39;][&#39;table&#39;] = array();&#10;&#10;  // Within &#39;table&#39;, the value of &#39;group&#39; (translated string) is used as a&#10;  // prefix in Views UI for this table&#39;s fields, filters, etc. When adding&#10;  // a field, filter, etc. you can also filter by the group.&#10;  $data[&#39;example_table&#39;][&#39;table&#39;][&#39;group&#39;] = t(&#39;Example table&#39;);&#10;&#10;  // Within &#39;table&#39;, the value of &#39;provider&#39; is the module that provides schema&#10;  // or the entity type that causes the table to exist. Setting this ensures&#10;  // that views have the correct dependencies. This is automatically set to the&#10;  // module that implements hook_views_data().&#10;  $data[&#39;example_table&#39;][&#39;table&#39;][&#39;provider&#39;] = &#39;example_module&#39;;&#10;&#10;  // Some tables are &#34;base&#34; tables, meaning that they can be the base tables&#10;  // for views. Non-base tables can only be brought in via relationships in&#10;  // views based on other tables. To define a table to be a base table, add&#10;  // key &#39;base&#39; to the &#39;table&#39; array:&#10;  $data[&#39;example_table&#39;][&#39;table&#39;][&#39;base&#39;] = array(&#10;    // Identifier (primary) field in this table for Views.&#10;    &#39;field&#39; =&#62; &#39;nid&#39;,&#10;    // Label in the UI.&#10;    &#39;title&#39; =&#62; t(&#39;Example table&#39;),&#10;    // Longer description in the UI. Required.&#10;    &#39;help&#39; =&#62; t(&#39;Example table contains example content and can be related to nodes.&#39;),&#10;    &#39;weight&#39; =&#62; -10,&#10;  );&#10;&#10;  // Some tables have an implicit, automatic relationship to other tables,&#10;  // meaning that when the other table is available in a view (either as the&#10;  // base table or through a relationship), this table&#39;s fields, filters, etc.&#10;  // are automatically made available without having to add an additional&#10;  // relationship. To define an implicit relationship that will make your&#10;  // table automatically available when another table is present, add a &#39;join&#39;&#10;  // section to your &#39;table&#39; section. Note that it is usually only a good idea&#10;  // to do this for one-to-one joins, because otherwise your automatic join&#10;  // will add more rows to the view. It is also not a good idea to do this if&#10;  // most views won&#39;t need your table -- if that is the case, define a&#10;  // relationship instead (see below).&#10;  //&#10;  // If you&#39;ve decided an automatic join is a good idea, here&#39;s how to do it;&#10;  // the resulting SQL query will look something like this:&#10;  //   ... FROM example_table et ... JOIN node_field_data nfd&#10;  //   ON et.nid = nfd.nid AND (&#39;extra&#39; clauses will be here) ...&#10;  // although the table aliases will be different.&#10;  $data[&#39;example_table&#39;][&#39;table&#39;][&#39;join&#39;] = array(&#10;    // Within the &#39;join&#39; section, list one or more tables to automatically&#10;    // join to. In this example, every time &#39;node_field_data&#39; is available in&#10;    // a view, &#39;example_table&#39; will be too. The array keys here are the array&#10;    // keys for the other tables, given in their hook_views_data()&#10;    // implementations. If the table listed here is from another module&#39;s&#10;    // hook_views_data() implementation, make sure your module depends on that&#10;    // other module.&#10;    &#39;node_field_data&#39; =&#62; array(&#10;      // Primary key field in node_field_data to use in the join.&#10;      &#39;left_field&#39; =&#62; &#39;nid&#39;,&#10;      // Foreign key field in example_table to use in the join.&#10;      &#39;field&#39; =&#62; &#39;nid&#39;,&#10;      // &#39;extra&#39; is an array of additional conditions on the join.&#10;      &#39;extra&#39; =&#62; array(&#10;        0 =&#62; array(&#10;          // Adds AND node_field_data.published = TRUE to the join.&#10;          &#39;field&#39; =&#62; &#39;published&#39;,&#10;          &#39;value&#39; =&#62; TRUE,&#10;        ),&#10;        1 =&#62; array(&#10;          // Adds AND example_table.numeric_field = 1 to the join.&#10;          &#39;left_field&#39; =&#62; &#39;numeric_field&#39;,&#10;          &#39;value&#39; =&#62; 1,&#10;          // If true, the value will not be surrounded in quotes.&#10;          &#39;numeric&#39; =&#62; TRUE,&#10;        ),&#10;        2 =&#62; array(&#10;          // Adds AND example_table.boolean_field &#60;&#62;&#10;          // node_field_data.published to the join.&#10;          &#39;field&#39; =&#62; &#39;published&#39;,&#10;          &#39;left_field&#39; =&#62; &#39;boolean_field&#39;,&#10;          // The operator used, Defaults to &#34;=&#34;.&#10;          &#39;operator&#39; =&#62; &#39;!=&#39;,&#10;        ),&#10;      ),&#10;    ),&#10;  );&#10;&#10;  // You can also do a more complex join, where in order to get to a certain&#10;  // base table defined in a hook_views_data() implementation, you will join&#10;  // to a different table that Views knows how to auto-join to the base table.&#10;  // For instance, if another module that your module depends on had&#10;  // defined a table &#39;foo&#39; with an automatic join to &#39;node_field_table&#39; (as&#10;  // shown above), you could join to &#39;node_field_table&#39; via the &#39;foo&#39; table.&#10;  // Here&#39;s how to do this, and the resulting SQL query would look something&#10;  // like this:&#10;  //   ... FROM example_table et ... JOIN foo foo&#10;  //   ON et.nid = foo.nid AND (&#39;extra&#39; clauses will be here) ...&#10;  //   JOIN node_field_data nfd ON (definition of the join from the foo&#10;  //   module goes here) ...&#10;  // although the table aliases will be different.&#10;  $data[&#39;example_table&#39;][&#39;table&#39;][&#39;join&#39;][&#39;node_field_data&#39;] = array(&#10;    // &#39;node_field_data&#39; above is the base we&#39;re joining to in Views.&#10;    // &#39;left_table&#39; is the table we&#39;re actually joining to, in order to get to&#10;    // &#39;node_field_data&#39;. It has to be something that Views knows how to join&#10;    // to &#39;node_field_data&#39;.&#10;    &#39;left_table&#39; =&#62; &#39;foo&#39;,&#10;    &#39;left_field&#39; =&#62; &#39;nid&#39;,&#10;    &#39;field&#39; =&#62; &#39;nid&#39;,&#10;    // &#39;extra&#39; is an array of additional conditions on the join.&#10;    &#39;extra&#39; =&#62; array(&#10;      // This syntax matches additional fields in the two tables:&#10;      // ... AND foo.langcode = example_table.langcode ...&#10;      array(&#39;left_field&#39; =&#62; &#39;langcode&#39;, &#39;field&#39; =&#62; &#39;langcode&#39;),&#10;      // This syntax adds a condition on our table. &#39;operator&#39; defaults to&#10;      // &#39;=&#39; for non-array values, or &#39;IN&#39; for array values.&#10;      // ... AND example_table.numeric_field &#62; 0 ...&#10;      array(&#39;field&#39; =&#62; &#39;numeric_field&#39;, &#39;value&#39; =&#62; 0, &#39;numeric&#39; =&#62; TRUE, &#39;operator&#39; =&#62; &#39;&#62;&#39;),&#10;    ),&#10;  );&#10;&#10;  // Other array elements at the top level of your table&#39;s array describe&#10;  // individual database table fields made available to Views. The array keys&#10;  // are the names (unique within the table) used by Views for the fields,&#10;  // usually equal to the database field names.&#10;  //&#10;  // Each field entry must have the following elements:&#10;  // - title: Translated label for the field in the UI.&#10;  // - help: Description of the field in the UI.&#10;  //&#10;  // Each field entry may also have one or more of the following elements,&#10;  // describing &#34;handlers&#34; (plugins) for the field:&#10;  // - relationship: Specifies a handler that allows this field to be used&#10;  //   to define a relationship to another table in Views.&#10;  // - field: Specifies a handler to make it available to Views as a field.&#10;  // - filter: Specifies a handler to make it available to Views as a filter.&#10;  // - sort: Specifies a handler to make it available to Views as a sort.&#10;  // - argument: Specifies a handler to make it available to Views as an&#10;  //   argument, or contextual filter as it is known in the UI.&#10;  // - area: Specifies a handler to make it available to Views to add content&#10;  //   to the header, footer, or as no result behavior.&#10;  //&#10;  // Note that when specifying handlers, you must give the handler plugin ID&#10;  // and you may also specify overrides for various settings that make up the&#10;  // plugin definition. See examples below; the Boolean example demonstrates&#10;  // setting overrides.&#10;&#10;  // Node ID field, exposed as relationship only, since it is a foreign key&#10;  // in this table.&#10;  $data[&#39;example_table&#39;][&#39;nid&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;Example content&#39;),&#10;    &#39;help&#39; =&#62; t(&#39;Relate example content to the node content&#39;),&#10;&#10;    // Define a relationship to the node_field_data table, so views whose&#10;    // base table is example_table can add a relationship to nodes. To make a&#10;    // relationship in the other direction, you can:&#10;    // - Use hook_views_data_alter() -- see the function body example on that&#10;    //   hook for details.&#10;    // - Use the implicit join method described above.&#10;    &#39;relationship&#39; =&#62; array(&#10;      // Views name of the table to join to for the relationship.&#10;      &#39;base&#39; =&#62; &#39;node_field_data&#39;,&#10;      // Database field name in the other table to join on.&#10;      &#39;base field&#39; =&#62; &#39;nid&#39;,&#10;      // ID of relationship handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;standard&#39;,&#10;      // Default label for relationship in the UI.&#10;      &#39;label&#39; =&#62; t(&#39;Example node&#39;),&#10;    ),&#10;  );&#10;&#10;  // Plain text field, exposed as a field, sort, filter, and argument.&#10;  $data[&#39;example_table&#39;][&#39;plain_text_field&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;Plain text field&#39;),&#10;    &#39;help&#39; =&#62; t(&#39;Just a plain text field.&#39;),&#10;&#10;    &#39;field&#39; =&#62; array(&#10;      // ID of field handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;standard&#39;,&#10;    ),&#10;&#10;    &#39;sort&#39; =&#62; array(&#10;      // ID of sort handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;standard&#39;,&#10;    ),&#10;&#10;    &#39;filter&#39; =&#62; array(&#10;      // ID of filter handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;string&#39;,&#10;    ),&#10;&#10;    &#39;argument&#39; =&#62; array(&#10;      // ID of argument handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;string&#39;,&#10;    ),&#10;  );&#10;&#10;  // Numeric field, exposed as a field, sort, filter, and argument.&#10;  $data[&#39;example_table&#39;][&#39;numeric_field&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;Numeric field&#39;),&#10;    &#39;help&#39; =&#62; t(&#39;Just a numeric field.&#39;),&#10;&#10;    &#39;field&#39; =&#62; array(&#10;      // ID of field handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;numeric&#39;,&#10;    ),&#10;&#10;    &#39;sort&#39; =&#62; array(&#10;      // ID of sort handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;standard&#39;,&#10;    ),&#10;&#10;    &#39;filter&#39; =&#62; array(&#10;      // ID of filter handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;numeric&#39;,&#10;    ),&#10;&#10;    &#39;argument&#39; =&#62; array(&#10;      // ID of argument handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;numeric&#39;,&#10;    ),&#10;  );&#10;&#10;  // Boolean field, exposed as a field, sort, and filter. The filter section&#10;  // illustrates overriding various settings.&#10;  $data[&#39;example_table&#39;][&#39;boolean_field&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;Boolean field&#39;),&#10;    &#39;help&#39; =&#62; t(&#39;Just an on/off field.&#39;),&#10;&#10;    &#39;field&#39; =&#62; array(&#10;      // ID of field handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;boolean&#39;,&#10;    ),&#10;&#10;    &#39;sort&#39; =&#62; array(&#10;      // ID of sort handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;standard&#39;,&#10;    ),&#10;&#10;    &#39;filter&#39; =&#62; array(&#10;      // ID of filter handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;boolean&#39;,&#10;      // Override the generic field title, so that the filter uses a different&#10;      // label in the UI.&#10;      &#39;label&#39; =&#62; t(&#39;Published&#39;),&#10;      // Override the default BooleanOperator filter handler&#39;s &#39;type&#39; setting,&#10;      // to display this as a &#34;Yes/No&#34; filter instead of a &#34;True/False&#34; filter.&#10;      &#39;type&#39; =&#62; &#39;yes-no&#39;,&#10;      // Override the default Boolean filter handler&#39;s &#39;use_equal&#39; setting, to&#10;      // make the query use &#39;boolean_field = 1&#39; instead of &#39;boolean_field &#60;&#62; 0&#39;.&#10;      &#39;use_equal&#39; =&#62; TRUE,&#10;    ),&#10;  );&#10;&#10;  // Integer timestamp field, exposed as a field, sort, and filter.&#10;  $data[&#39;example_table&#39;][&#39;timestamp_field&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;Timestamp field&#39;),&#10;    &#39;help&#39; =&#62; t(&#39;Just a timestamp field.&#39;),&#10;&#10;    &#39;field&#39; =&#62; array(&#10;      // ID of field handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;date&#39;,&#10;    ),&#10;&#10;    &#39;sort&#39; =&#62; array(&#10;      // ID of sort handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;date&#39;,&#10;    ),&#10;&#10;    &#39;filter&#39; =&#62; array(&#10;      // ID of filter handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;date&#39;,&#10;    ),&#10;  );&#10;&#10;  // Area example. Areas are not generally associated with actual data&#10;  // tables and fields. This example is from views_views_data(), which defines&#10;  // the &#34;Global&#34; table (not really a table, but a group of Fields, Filters,&#10;  // etc. that are grouped into section &#34;Global&#34; in the UI). Here&#39;s the&#10;  // definition of the generic &#34;Text area&#34;:&#10;  $data[&#39;views&#39;][&#39;area&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;Text area&#39;),&#10;    &#39;help&#39; =&#62; t(&#39;Provide markup text for the area.&#39;),&#10;    &#39;area&#39; =&#62; array(&#10;      // ID of the area handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;text&#39;,&#10;    ),&#10;  );&#10;&#10;  return $data;&#10;  $END$&#10;}" description="hook_views_data" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_data_alter" value="/**&#10; * Implements hook_views_data_alter().&#10; *&#10; * Alter the table and field information from hook_views_data().&#10; *&#10; * @param array $data&#10; *   An array of all information about Views tables and fields, collected from&#10; *   hook_views_data(), passed by reference.&#10; *&#10; * @see hook_views_data()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_data_alter(array &amp;$data) {&#10;  // Alter the title of the node_field_data:nid field in the Views UI.&#10;  $data[&#39;node_field_data&#39;][&#39;nid&#39;][&#39;title&#39;] = t(&#39;Node-Nid&#39;);&#10;&#10;  // Add an additional field to the users_field_data table.&#10;  $data[&#39;users_field_data&#39;][&#39;example_field&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;Example field&#39;),&#10;    &#39;help&#39; =&#62; t(&#39;Some example content that references a user&#39;),&#10;&#10;    &#39;field&#39; =&#62; array(&#10;      // ID of the field handler to use.&#10;      &#39;id&#39; =&#62; &#39;example_field&#39;,&#10;    ),&#10;  );&#10;&#10;  // Change the handler of the node title field, presumably to a handler plugin&#10;  // you define in your module. Give the ID of this plugin.&#10;  $data[&#39;node_field_data&#39;][&#39;title&#39;][&#39;field&#39;][&#39;id&#39;] = &#39;node_title&#39;;&#10;&#10;  // Add a relationship that will allow a view whose base table is &#39;foo&#39; (from&#10;  // another module) to have a relationship to &#39;example_table&#39; (from my module),&#10;  // via joining foo.fid to example_table.eid.&#10;  //&#10;  // This relationship has to be added to the &#39;foo&#39; Views data, which my module&#10;  // does not control, so it must be done in hook_views_data_alter(), not&#10;  // hook_views_data().&#10;  //&#10;  // In Views data definitions, each field can have only one relationship. So&#10;  // rather than adding this relationship directly to the $data[&#39;foo&#39;][&#39;fid&#39;]&#10;  // field entry, which could overwrite an existing relationship, we define&#10;  // a dummy field key to handle the relationship.&#10;  $data[&#39;foo&#39;][&#39;unique_dummy_name&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;Title seen while adding relationship&#39;),&#10;    &#39;help&#39; =&#62; t(&#39;More information about the relationship&#39;),&#10;&#10;    &#39;relationship&#39; =&#62; array(&#10;      // Views name of the table being joined to from foo.&#10;      &#39;base&#39; =&#62; &#39;example_table&#39;,&#10;      // Database field name in example_table for the join.&#10;      &#39;base field&#39; =&#62; &#39;eid&#39;,&#10;      // Real database field name in foo for the join, to override&#10;      // &#39;unique_dummy_name&#39;.&#10;      &#39;field&#39; =&#62; &#39;fid&#39;,&#10;      // ID of relationship handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;standard&#39;,&#10;      &#39;label&#39; =&#62; t(&#39;Default label for relationship&#39;),&#10;    ),&#10;  );&#10;&#10;  // Note that the $data array is not returned – it is modified by reference.&#10;  $END$&#10;}" description="hook_views_data_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_data_alter" value="/**&#10; * Implements hook_views_data_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_data_alter(array &amp;$data) {&#10;  // Alter the title of the node_field_data:nid field in the Views UI.&#10;  $data[&#39;node_field_data&#39;][&#39;nid&#39;][&#39;title&#39;] = t(&#39;Node-Nid&#39;);&#10;&#10;  // Add an additional field to the users_field_data table.&#10;  $data[&#39;users_field_data&#39;][&#39;example_field&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;Example field&#39;),&#10;    &#39;help&#39; =&#62; t(&#39;Some example content that references a user&#39;),&#10;&#10;    &#39;field&#39; =&#62; array(&#10;      // ID of the field handler to use.&#10;      &#39;id&#39; =&#62; &#39;example_field&#39;,&#10;    ),&#10;  );&#10;&#10;  // Change the handler of the node title field, presumably to a handler plugin&#10;  // you define in your module. Give the ID of this plugin.&#10;  $data[&#39;node_field_data&#39;][&#39;title&#39;][&#39;field&#39;][&#39;id&#39;] = &#39;node_title&#39;;&#10;&#10;  // Add a relationship that will allow a view whose base table is &#39;foo&#39; (from&#10;  // another module) to have a relationship to &#39;example_table&#39; (from my module),&#10;  // via joining foo.fid to example_table.eid.&#10;  //&#10;  // This relationship has to be added to the &#39;foo&#39; Views data, which my module&#10;  // does not control, so it must be done in hook_views_data_alter(), not&#10;  // hook_views_data().&#10;  //&#10;  // In Views data definitions, each field can have only one relationship. So&#10;  // rather than adding this relationship directly to the $data[&#39;foo&#39;][&#39;fid&#39;]&#10;  // field entry, which could overwrite an existing relationship, we define&#10;  // a dummy field key to handle the relationship.&#10;  $data[&#39;foo&#39;][&#39;unique_dummy_name&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;Title seen while adding relationship&#39;),&#10;    &#39;help&#39; =&#62; t(&#39;More information about the relationship&#39;),&#10;&#10;    &#39;relationship&#39; =&#62; array(&#10;      // Views name of the table being joined to from foo.&#10;      &#39;base&#39; =&#62; &#39;example_table&#39;,&#10;      // Database field name in example_table for the join.&#10;      &#39;base field&#39; =&#62; &#39;eid&#39;,&#10;      // Real database field name in foo for the join, to override&#10;      // &#39;unique_dummy_name&#39;.&#10;      &#39;field&#39; =&#62; &#39;fid&#39;,&#10;      // ID of relationship handler plugin to use.&#10;      &#39;id&#39; =&#62; &#39;standard&#39;,&#10;      &#39;label&#39; =&#62; t(&#39;Default label for relationship&#39;),&#10;    ),&#10;  );&#10;&#10;  // Note that the $data array is not returned – it is modified by reference.&#10;  $END$&#10;}" description="hook_views_data_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_field_views_data" value="/**&#10; * Implements hook_field_views_data().&#10; *&#10; * Override the default Views data for a Field API field.&#10; *&#10; * The field module&#39;s implementation of hook_views_data() invokes this for each&#10; * field storage, in the module that defines the field type. It is not invoked&#10; * in other modules.&#10; *&#10; * If no hook implementation exists, hook_views_data() falls back to&#10; * views_field_default_views_data().&#10; *&#10; * @param \Drupal\field\FieldStorageConfigInterface $field_storage&#10; *   The field storage config entity.&#10; *&#10; * @return array&#10; *   An array of views data, in the same format as the return value of&#10; *   hook_views_data().&#10; *&#10; * @see views_views_data()&#10; * @see hook_field_views_data_alter()&#10; * @see hook_field_views_data_views_data_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_views_data(\Drupal\field\FieldStorageConfigInterface $field_storage) {&#10;  $data = views_field_default_views_data($field_storage);&#10;  foreach ($data as $table_name =&#62; $table_data) {&#10;    // Add the relationship only on the target_id field.&#10;    $data[$table_name][$field_storage-&#62;getName() . &#39;_target_id&#39;][&#39;relationship&#39;] = array(&#10;      &#39;id&#39; =&#62; &#39;standard&#39;,&#10;      &#39;base&#39; =&#62; &#39;file_managed&#39;,&#10;      &#39;base field&#39; =&#62; &#39;target_id&#39;,&#10;      &#39;label&#39; =&#62; t(&#39;image from @field_name&#39;, array(&#39;@field_name&#39; =&#62; $field_storage-&#62;getName())),&#10;    );&#10;  }&#10;&#10;  return $data;&#10;  $END$&#10;}" description="hook_field_views_data" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_field_views_data" value="/**&#10; * Implements hook_field_views_data().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_views_data(\Drupal\field\FieldStorageConfigInterface $field_storage) {&#10;  $data = views_field_default_views_data($field_storage);&#10;  foreach ($data as $table_name =&#62; $table_data) {&#10;    // Add the relationship only on the target_id field.&#10;    $data[$table_name][$field_storage-&#62;getName() . &#39;_target_id&#39;][&#39;relationship&#39;] = array(&#10;      &#39;id&#39; =&#62; &#39;standard&#39;,&#10;      &#39;base&#39; =&#62; &#39;file_managed&#39;,&#10;      &#39;base field&#39; =&#62; &#39;target_id&#39;,&#10;      &#39;label&#39; =&#62; t(&#39;image from @field_name&#39;, array(&#39;@field_name&#39; =&#62; $field_storage-&#62;getName())),&#10;    );&#10;  }&#10;&#10;  return $data;&#10;  $END$&#10;}" description="hook_field_views_data" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_field_views_data_alter" value="/**&#10; * Implements hook_field_views_data_alter().&#10; *&#10; * Alter the Views data for a single Field API field.&#10; *&#10; * This is called on all modules even if there is no hook_field_views_data()&#10; * implementation for the field, and therefore may be used to alter the&#10; * default data that views_field_default_views_data() supplies for the&#10; * field storage.&#10; *&#10; *  @param array $data&#10; *    The views data for the field storage. This has the same format as the&#10; *    return value of hook_views_data().&#10; *  @param \Drupal\field\FieldStorageConfigInterface $field_storage&#10; *    The field storage config entity.&#10; *&#10; * @see views_views_data()&#10; * @see hook_field_views_data()&#10; * @see hook_field_views_data_views_data_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_views_data_alter(array &amp;$data, \Drupal\field\FieldStorageConfigInterface $field_storage) {&#10;  $entity_type_id = $field_storage-&#62;getTargetEntityTypeId();&#10;  $field_name = $field_storage-&#62;getName();&#10;  $entity_type = \Drupal::entityManager()-&#62;getDefinition($entity_type_id);&#10;  $pseudo_field_name = &#39;reverse_&#39; . $field_name . &#39;_&#39; . $entity_type_id;&#10;  $table_mapping = \Drupal::entityManager()-&#62;getStorage($entity_type_id)-&#62;getTableMapping();&#10;&#10;  list($label) = views_entity_field_label($entity_type_id, $field_name);&#10;&#10;  $data[&#39;file_managed&#39;][$pseudo_field_name][&#39;relationship&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;@entity using @field&#39;, array(&#39;@entity&#39; =&#62; $entity_type-&#62;getLabel(), &#39;@field&#39; =&#62; $label)),&#10;    &#39;help&#39; =&#62; t(&#39;Relate each @entity with a @field set to the image.&#39;, array(&#39;@entity&#39; =&#62; $entity_type-&#62;getLabel(), &#39;@field&#39; =&#62; $label)),&#10;    &#39;id&#39; =&#62; &#39;entity_reverse&#39;,&#10;    &#39;field_name&#39; =&#62; $field_name,&#10;    &#39;entity_type&#39; =&#62; $entity_type_id,&#10;    &#39;field table&#39; =&#62; $table_mapping-&#62;getDedicatedDataTableName($field_storage),&#10;    &#39;field field&#39; =&#62; $field_name . &#39;_target_id&#39;,&#10;    &#39;base&#39; =&#62; $entity_type-&#62;getBaseTable(),&#10;    &#39;base field&#39; =&#62; $entity_type-&#62;getKey(&#39;id&#39;),&#10;    &#39;label&#39; =&#62; $field_name,&#10;    &#39;join_extra&#39; =&#62; array(&#10;      0 =&#62; array(&#10;        &#39;field&#39; =&#62; &#39;deleted&#39;,&#10;        &#39;value&#39; =&#62; 0,&#10;        &#39;numeric&#39; =&#62; TRUE,&#10;      ),&#10;    ),&#10;  );&#10;  $END$&#10;}" description="hook_field_views_data_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_field_views_data_alter" value="/**&#10; * Implements hook_field_views_data_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_views_data_alter(array &amp;$data, \Drupal\field\FieldStorageConfigInterface $field_storage) {&#10;  $entity_type_id = $field_storage-&#62;getTargetEntityTypeId();&#10;  $field_name = $field_storage-&#62;getName();&#10;  $entity_type = \Drupal::entityManager()-&#62;getDefinition($entity_type_id);&#10;  $pseudo_field_name = &#39;reverse_&#39; . $field_name . &#39;_&#39; . $entity_type_id;&#10;  $table_mapping = \Drupal::entityManager()-&#62;getStorage($entity_type_id)-&#62;getTableMapping();&#10;&#10;  list($label) = views_entity_field_label($entity_type_id, $field_name);&#10;&#10;  $data[&#39;file_managed&#39;][$pseudo_field_name][&#39;relationship&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;@entity using @field&#39;, array(&#39;@entity&#39; =&#62; $entity_type-&#62;getLabel(), &#39;@field&#39; =&#62; $label)),&#10;    &#39;help&#39; =&#62; t(&#39;Relate each @entity with a @field set to the image.&#39;, array(&#39;@entity&#39; =&#62; $entity_type-&#62;getLabel(), &#39;@field&#39; =&#62; $label)),&#10;    &#39;id&#39; =&#62; &#39;entity_reverse&#39;,&#10;    &#39;field_name&#39; =&#62; $field_name,&#10;    &#39;entity_type&#39; =&#62; $entity_type_id,&#10;    &#39;field table&#39; =&#62; $table_mapping-&#62;getDedicatedDataTableName($field_storage),&#10;    &#39;field field&#39; =&#62; $field_name . &#39;_target_id&#39;,&#10;    &#39;base&#39; =&#62; $entity_type-&#62;getBaseTable(),&#10;    &#39;base field&#39; =&#62; $entity_type-&#62;getKey(&#39;id&#39;),&#10;    &#39;label&#39; =&#62; $field_name,&#10;    &#39;join_extra&#39; =&#62; array(&#10;      0 =&#62; array(&#10;        &#39;field&#39; =&#62; &#39;deleted&#39;,&#10;        &#39;value&#39; =&#62; 0,&#10;        &#39;numeric&#39; =&#62; TRUE,&#10;      ),&#10;    ),&#10;  );&#10;  $END$&#10;}" description="hook_field_views_data_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_field_views_data_views_data_alter" value="/**&#10; * Implements hook_field_views_data_views_data_alter().&#10; *&#10; * Alter the Views data on a per field basis.&#10; *&#10; * The field module&#39;s implementation of hook_views_data_alter() invokes this for&#10; * each field storage, in the module that defines the field type. It is not&#10; * invoked in other modules.&#10; *&#10; * Unlike hook_field_views_data_alter(), this operates on the whole of the views&#10; * data. This allows a field type to add data that concerns its fields in&#10; * other tables, which would not yet be defined at the point when&#10; * hook_field_views_data() and hook_field_views_data_alter() are invoked. For&#10; * example, entityreference adds reverse relationships on the tables for the&#10; * entities which are referenced by entityreference fields.&#10; *&#10; * (Note: this is weirdly named so as not to conflict with&#10; * hook_field_views_data_alter().)&#10; *&#10; * @param array $data&#10; *   The views data.&#10; * @param \Drupal\field\FieldStorageConfigInterface $field&#10; *   The field storage config entity.&#10; *&#10; * @see hook_field_views_data()&#10; * @see hook_field_views_data_alter()&#10; * @see views_views_data_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_views_data_views_data_alter(array &amp;$data, \Drupal\field\FieldStorageConfigInterface $field) {&#10;  $field_name = $field-&#62;getName();&#10;  $data_key = &#39;field_data_&#39; . $field_name;&#10;  $entity_type_id = $field-&#62;entity_type;&#10;  $entity_type = \Drupal::entityManager()-&#62;getDefinition($entity_type_id);&#10;  $pseudo_field_name = &#39;reverse_&#39; . $field_name . &#39;_&#39; . $entity_type_id;&#10;  list($label) = views_entity_field_label($entity_type_id, $field_name);&#10;  $table_mapping = \Drupal::entityManager()-&#62;getStorage($entity_type_id)-&#62;getTableMapping();&#10;&#10;  // Views data for this field is in $data[$data_key].&#10;  $data[$data_key][$pseudo_field_name][&#39;relationship&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;@entity using @field&#39;, array(&#39;@entity&#39; =&#62; $entity_type-&#62;getLabel(), &#39;@field&#39; =&#62; $label)),&#10;    &#39;help&#39; =&#62; t(&#39;Relate each @entity with a @field set to the term.&#39;, array(&#39;@entity&#39; =&#62; $entity_type-&#62;getLabel(), &#39;@field&#39; =&#62; $label)),&#10;    &#39;id&#39; =&#62; &#39;entity_reverse&#39;,&#10;    &#39;field_name&#39; =&#62; $field_name,&#10;    &#39;entity_type&#39; =&#62; $entity_type_id,&#10;    &#39;field table&#39; =&#62; $table_mapping-&#62;getDedicatedDataTableName($field),&#10;    &#39;field field&#39; =&#62; $field_name . &#39;_target_id&#39;,&#10;    &#39;base&#39; =&#62; $entity_type-&#62;getBaseTable(),&#10;    &#39;base field&#39; =&#62; $entity_type-&#62;getKey(&#39;id&#39;),&#10;    &#39;label&#39; =&#62; $field_name,&#10;    &#39;join_extra&#39; =&#62; array(&#10;      0 =&#62; array(&#10;        &#39;field&#39; =&#62; &#39;deleted&#39;,&#10;        &#39;value&#39; =&#62; 0,&#10;        &#39;numeric&#39; =&#62; TRUE,&#10;      ),&#10;    ),&#10;  );&#10;  $END$&#10;}" description="hook_field_views_data_views_data_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_field_views_data_views_data_alter" value="/**&#10; * Implements hook_field_views_data_views_data_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_views_data_views_data_alter(array &amp;$data, \Drupal\field\FieldStorageConfigInterface $field) {&#10;  $field_name = $field-&#62;getName();&#10;  $data_key = &#39;field_data_&#39; . $field_name;&#10;  $entity_type_id = $field-&#62;entity_type;&#10;  $entity_type = \Drupal::entityManager()-&#62;getDefinition($entity_type_id);&#10;  $pseudo_field_name = &#39;reverse_&#39; . $field_name . &#39;_&#39; . $entity_type_id;&#10;  list($label) = views_entity_field_label($entity_type_id, $field_name);&#10;  $table_mapping = \Drupal::entityManager()-&#62;getStorage($entity_type_id)-&#62;getTableMapping();&#10;&#10;  // Views data for this field is in $data[$data_key].&#10;  $data[$data_key][$pseudo_field_name][&#39;relationship&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;@entity using @field&#39;, array(&#39;@entity&#39; =&#62; $entity_type-&#62;getLabel(), &#39;@field&#39; =&#62; $label)),&#10;    &#39;help&#39; =&#62; t(&#39;Relate each @entity with a @field set to the term.&#39;, array(&#39;@entity&#39; =&#62; $entity_type-&#62;getLabel(), &#39;@field&#39; =&#62; $label)),&#10;    &#39;id&#39; =&#62; &#39;entity_reverse&#39;,&#10;    &#39;field_name&#39; =&#62; $field_name,&#10;    &#39;entity_type&#39; =&#62; $entity_type_id,&#10;    &#39;field table&#39; =&#62; $table_mapping-&#62;getDedicatedDataTableName($field),&#10;    &#39;field field&#39; =&#62; $field_name . &#39;_target_id&#39;,&#10;    &#39;base&#39; =&#62; $entity_type-&#62;getBaseTable(),&#10;    &#39;base field&#39; =&#62; $entity_type-&#62;getKey(&#39;id&#39;),&#10;    &#39;label&#39; =&#62; $field_name,&#10;    &#39;join_extra&#39; =&#62; array(&#10;      0 =&#62; array(&#10;        &#39;field&#39; =&#62; &#39;deleted&#39;,&#10;        &#39;value&#39; =&#62; 0,&#10;        &#39;numeric&#39; =&#62; TRUE,&#10;      ),&#10;    ),&#10;  );&#10;  $END$&#10;}" description="hook_field_views_data_views_data_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_query_substitutions" value="/**&#10; * Implements hook_views_query_substitutions().&#10; *&#10; * Replace special strings in the query before it is executed.&#10; *&#10; * The idea is that certain dynamic values can be placed in a query when it is&#10; * built, and substituted at run-time, allowing the query to be cached and&#10; * still work correctly when executed.&#10; *&#10; * @param \Drupal\views\ViewExecutable $view&#10; *   The View being executed.&#10; *&#10; * @return array&#10; *   An associative array where each key is a string to be replaced, and the&#10; *   corresponding value is its replacement. The strings to replace are often&#10; *   surrounded with &#39;***&#39;, as illustrated in the example implementation, to&#10; *   avoid collisions with other values in the query.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_query_substitutions(ViewExecutable $view) {&#10;  // Example from views_views_query_substitutions().&#10;  return array(&#10;    &#39;***CURRENT_VERSION***&#39; =&#62; \Drupal::VERSION,&#10;    &#39;***CURRENT_TIME***&#39; =&#62; REQUEST_TIME,&#10;    &#39;***LANGUAGE_language_content***&#39; =&#62; \Drupal::languageManager()-&#62;getCurrentLanguage(LanguageInterface::TYPE_CONTENT)-&#62;getId(),&#10;    PluginBase::VIEWS_QUERY_LANGUAGE_SITE_DEFAULT =&#62; \Drupal::languageManager()-&#62;getDefaultLanguage()-&#62;getId(),&#10;  );&#10;  $END$&#10;}" description="hook_views_query_substitutions" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_query_substitutions" value="/**&#10; * Implements hook_views_query_substitutions().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_query_substitutions(ViewExecutable $view) {&#10;  // Example from views_views_query_substitutions().&#10;  return array(&#10;    &#39;***CURRENT_VERSION***&#39; =&#62; \Drupal::VERSION,&#10;    &#39;***CURRENT_TIME***&#39; =&#62; REQUEST_TIME,&#10;    &#39;***LANGUAGE_language_content***&#39; =&#62; \Drupal::languageManager()-&#62;getCurrentLanguage(LanguageInterface::TYPE_CONTENT)-&#62;getId(),&#10;    PluginBase::VIEWS_QUERY_LANGUAGE_SITE_DEFAULT =&#62; \Drupal::languageManager()-&#62;getDefaultLanguage()-&#62;getId(),&#10;  );&#10;  $END$&#10;}" description="hook_views_query_substitutions" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_form_substitutions" value="/**&#10; * Implements hook_views_form_substitutions().&#10; *&#10; * Replace special strings when processing a view with form elements.&#10; *&#10; * @return array&#10; *   An associative array where each key is a string to be replaced, and the&#10; *   corresponding value is its replacement. The value will be escaped unless it&#10; *   is already marked safe.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_form_substitutions() {&#10;  return array(&#10;    &#39;&#60;!--views-form-example-substitutions--&#62;&#39; =&#62; &#39;Example Substitution&#39;,&#10;  );&#10;  $END$&#10;}" description="hook_views_form_substitutions" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_form_substitutions" value="/**&#10; * Implements hook_views_form_substitutions().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_form_substitutions() {&#10;  return array(&#10;    &#39;&#60;!--views-form-example-substitutions--&#62;&#39; =&#62; &#39;Example Substitution&#39;,&#10;  );&#10;  $END$&#10;}" description="hook_views_form_substitutions" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_pre_view" value="/**&#10; * Implements hook_views_pre_view().&#10; *&#10; * Alter a view at the very beginning of Views processing.&#10; *&#10; * Output can be added to the view by setting $view-&#62;attachment_before&#10; * and $view-&#62;attachment_after.&#10; *&#10; * @param \Drupal\views\ViewExecutable $view&#10; *   The view object about to be processed.&#10; * @param string $display_id&#10; *   The machine name of the active display.&#10; * @param array $args&#10; *   An array of arguments passed into the view.&#10; *&#10; * @see \Drupal\views\ViewExecutable&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_pre_view(ViewExecutable $view, $display_id, array &amp;$args) {&#10;&#10;  // Modify contextual filters for my_special_view if user has &#39;my special permission&#39;.&#10;  $account = \Drupal::currentUser();&#10;&#10;  if ($view-&#62;id() == &#39;my_special_view&#39; &amp;&amp; $account-&#62;hasPermission(&#39;my special permission&#39;) &amp;&amp; $display_id == &#39;public_display&#39;) {&#10;    $args[0] = &#39;custom value&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_views_pre_view" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_pre_view" value="/**&#10; * Implements hook_views_pre_view().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_pre_view(ViewExecutable $view, $display_id, array &amp;$args) {&#10;&#10;  // Modify contextual filters for my_special_view if user has &#39;my special permission&#39;.&#10;  $account = \Drupal::currentUser();&#10;&#10;  if ($view-&#62;id() == &#39;my_special_view&#39; &amp;&amp; $account-&#62;hasPermission(&#39;my special permission&#39;) &amp;&amp; $display_id == &#39;public_display&#39;) {&#10;    $args[0] = &#39;custom value&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_views_pre_view" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_pre_build" value="/**&#10; * Implements hook_views_pre_build().&#10; *&#10; * Act on the view before the query is built, but after displays are attached.&#10; *&#10; * Output can be added to the view by setting $view-&#62;attachment_before&#10; * and $view-&#62;attachment_after.&#10; *&#10; * @param \Drupal\views\ViewExecutable $view&#10; *   The view object about to be processed.&#10; *&#10; * @see \Drupal\views\ViewExecutable&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_pre_build(ViewExecutable $view) {&#10;  // Because of some inexplicable business logic, we should remove all&#10;  // attachments from all views on Mondays.&#10;  // (This alter could be done later in the execution process as well.)&#10;  if (date(&#39;D&#39;) == &#39;Mon&#39;) {&#10;    unset($view-&#62;attachment_before);&#10;    unset($view-&#62;attachment_after);&#10;  }&#10;  $END$&#10;}" description="hook_views_pre_build" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_pre_build" value="/**&#10; * Implements hook_views_pre_build().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_pre_build(ViewExecutable $view) {&#10;  // Because of some inexplicable business logic, we should remove all&#10;  // attachments from all views on Mondays.&#10;  // (This alter could be done later in the execution process as well.)&#10;  if (date(&#39;D&#39;) == &#39;Mon&#39;) {&#10;    unset($view-&#62;attachment_before);&#10;    unset($view-&#62;attachment_after);&#10;  }&#10;  $END$&#10;}" description="hook_views_pre_build" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_post_build" value="/**&#10; * Implements hook_views_post_build().&#10; *&#10; * Act on the view immediately after the query is built.&#10; *&#10; * Output can be added to the view by setting $view-&#62;attachment_before&#10; * and $view-&#62;attachment_after.&#10; *&#10; * @param \Drupal\views\ViewExecutable $view&#10; *   The view object about to be processed.&#10; *&#10; * @see \Drupal\views\ViewExecutable&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_post_build(ViewExecutable $view) {&#10;  // If the exposed field &#39;type&#39; is set, hide the column containing the content&#10;  // type. (Note that this is a solution for a particular view, and makes&#10;  // assumptions about both exposed filter settings and the fields in the view.&#10;  // Also note that this alter could be done at any point before the view being&#10;  // rendered.)&#10;  if ($view-&#62;id() == &#39;my_view&#39; &amp;&amp; isset($view-&#62;exposed_raw_input[&#39;type&#39;]) &amp;&amp; $view-&#62;exposed_raw_input[&#39;type&#39;] != &#39;All&#39;) {&#10;    // &#39;Type&#39; should be interpreted as content type.&#10;    if (isset($view-&#62;field[&#39;type&#39;])) {&#10;      $view-&#62;field[&#39;type&#39;]-&#62;options[&#39;exclude&#39;] = TRUE;&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_views_post_build" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_post_build" value="/**&#10; * Implements hook_views_post_build().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_post_build(ViewExecutable $view) {&#10;  // If the exposed field &#39;type&#39; is set, hide the column containing the content&#10;  // type. (Note that this is a solution for a particular view, and makes&#10;  // assumptions about both exposed filter settings and the fields in the view.&#10;  // Also note that this alter could be done at any point before the view being&#10;  // rendered.)&#10;  if ($view-&#62;id() == &#39;my_view&#39; &amp;&amp; isset($view-&#62;exposed_raw_input[&#39;type&#39;]) &amp;&amp; $view-&#62;exposed_raw_input[&#39;type&#39;] != &#39;All&#39;) {&#10;    // &#39;Type&#39; should be interpreted as content type.&#10;    if (isset($view-&#62;field[&#39;type&#39;])) {&#10;      $view-&#62;field[&#39;type&#39;]-&#62;options[&#39;exclude&#39;] = TRUE;&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_views_post_build" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_pre_execute" value="/**&#10; * Implements hook_views_pre_execute().&#10; *&#10; * Act on the view after the query is built and just before it is executed.&#10; *&#10; * Output can be added to the view by setting $view-&#62;attachment_before&#10; * and $view-&#62;attachment_after.&#10; *&#10; * @param \Drupal\views\ViewExecutable $view&#10; *   The view object about to be processed.&#10; *&#10; * @see \Drupal\views\ViewExecutable&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_pre_execute(ViewExecutable $view) {&#10;  // Whenever a view queries more than two tables, show a message that notifies&#10;  // view administrators that the query might be heavy.&#10;  // (This action could be performed later in the execution process, but not&#10;  // earlier.)&#10;  $account = \Drupal::currentUser();&#10;&#10;  if (count($view-&#62;query-&#62;tables) &#62; 2 &amp;&amp; $account-&#62;hasPermission(&#39;administer views&#39;)) {&#10;    drupal_set_message(t(&#39;The view %view may be heavy to execute.&#39;, array(&#39;%view&#39; =&#62; $view-&#62;id())), &#39;warning&#39;);&#10;  }&#10;  $END$&#10;}" description="hook_views_pre_execute" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_pre_execute" value="/**&#10; * Implements hook_views_pre_execute().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_pre_execute(ViewExecutable $view) {&#10;  // Whenever a view queries more than two tables, show a message that notifies&#10;  // view administrators that the query might be heavy.&#10;  // (This action could be performed later in the execution process, but not&#10;  // earlier.)&#10;  $account = \Drupal::currentUser();&#10;&#10;  if (count($view-&#62;query-&#62;tables) &#62; 2 &amp;&amp; $account-&#62;hasPermission(&#39;administer views&#39;)) {&#10;    drupal_set_message(t(&#39;The view %view may be heavy to execute.&#39;, array(&#39;%view&#39; =&#62; $view-&#62;id())), &#39;warning&#39;);&#10;  }&#10;  $END$&#10;}" description="hook_views_pre_execute" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_post_execute" value="/**&#10; * Implements hook_views_post_execute().&#10; *&#10; * Act on the view immediately after the query has been executed.&#10; *&#10; * At this point the query has been executed, but the preRender() phase has&#10; * not yet happened for handlers.&#10; *&#10; * Output can be added to the view by setting $view-&#62;attachment_before&#10; * and $view-&#62;attachment_after.&#10; *&#10; * @param \Drupal\views\ViewExecutable $view&#10; *   The view object about to be processed.&#10; *&#10; * @see \Drupal\views\ViewExecutable&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_post_execute(ViewExecutable $view) {&#10;  // If there are more than 100 results, show a message that encourages the user&#10;  // to change the filter settings.&#10;  // (This action could be performed later in the execution process, but not&#10;  // earlier.)&#10;  if ($view-&#62;total_rows &#62; 100) {&#10;    drupal_set_message(t(&#39;You have more than 100 hits. Use the filter settings to narrow down your list.&#39;));&#10;  }&#10;  $END$&#10;}" description="hook_views_post_execute" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_post_execute" value="/**&#10; * Implements hook_views_post_execute().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_post_execute(ViewExecutable $view) {&#10;  // If there are more than 100 results, show a message that encourages the user&#10;  // to change the filter settings.&#10;  // (This action could be performed later in the execution process, but not&#10;  // earlier.)&#10;  if ($view-&#62;total_rows &#62; 100) {&#10;    drupal_set_message(t(&#39;You have more than 100 hits. Use the filter settings to narrow down your list.&#39;));&#10;  }&#10;  $END$&#10;}" description="hook_views_post_execute" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_pre_render" value="/**&#10; * Implements hook_views_pre_render().&#10; *&#10; * Act on the view immediately before rendering it.&#10; *&#10; * At this point the query has been executed, and the preRender() phase has&#10; * already happened for handlers, so all data should be available. This hook&#10; * can be used by themes.&#10; *&#10; * Output can be added to the view by setting $view-&#62;attachment_before&#10; * and $view-&#62;attachment_after.&#10; *&#10; * @param \Drupal\views\ViewExecutable $view&#10; *   The view object about to be processed.&#10; *&#10; * @see \Drupal\views\ViewExecutable&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_pre_render(ViewExecutable $view) {&#10;  // Scramble the order of the rows shown on this result page.&#10;  // Note that this could be done earlier, but not later in the view execution&#10;  // process.&#10;  shuffle($view-&#62;result);&#10;  $END$&#10;}" description="hook_views_pre_render" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_pre_render" value="/**&#10; * Implements hook_views_pre_render().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_pre_render(ViewExecutable $view) {&#10;  // Scramble the order of the rows shown on this result page.&#10;  // Note that this could be done earlier, but not later in the view execution&#10;  // process.&#10;  shuffle($view-&#62;result);&#10;  $END$&#10;}" description="hook_views_pre_render" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_post_render" value="/**&#10; * Implements hook_views_post_render().&#10; *&#10; * Post-process any rendered data.&#10; *&#10; * This can be valuable to be able to cache a view and still have some level of&#10; * dynamic output. In an ideal world, the actual output will include HTML&#10; * comment-based tokens, and then the post process can replace those tokens.&#10; * This hook can be used by themes.&#10; *&#10; * Example usage. If it is known that the view is a node view and that the&#10; * primary field will be a nid, you can do something like this:&#10; * @code&#10; *   &#60;!--post-FIELD-NID--&#62;&#10; * @endcode&#10; * And then in the post-render, create an array with the text that should&#10; * go there:&#10; * @code&#10; *   strtr($output, array(&#39;&#60;!--post-FIELD-1--&#62;&#39; =&#62; &#39;output for FIELD of nid 1&#39;);&#10; * @endcode&#10; * All of the cached result data will be available in $view-&#62;result, as well,&#10; * so all ids used in the query should be discoverable.&#10; *&#10; * @param \Drupal\views\ViewExecutable $view&#10; *   The view object about to be processed.&#10; * @param string $output&#10; *   A flat string with the rendered output of the view.&#10; * @param \Drupal\views\Plugin\views\cache\CachePluginBase $cache&#10; *   The cache settings.&#10; *&#10; * @see \Drupal\views\ViewExecutable&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_post_render(ViewExecutable $view, &amp;$output, CachePluginBase $cache) {&#10;  // When using full pager, disable any time-based caching if there are fewer&#10;  // than 10 results.&#10;  if ($view-&#62;pager instanceof Drupal\views\Plugin\views\pager\Full &amp;&amp; $cache instanceof Drupal\views\Plugin\views\cache\Time &amp;&amp; count($view-&#62;result) &#60; 10) {&#10;    $cache-&#62;options[&#39;results_lifespan&#39;] = 0;&#10;    $cache-&#62;options[&#39;output_lifespan&#39;] = 0;&#10;  }&#10;  $END$&#10;}" description="hook_views_post_render" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_post_render" value="/**&#10; * Implements hook_views_post_render().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_post_render(ViewExecutable $view, &amp;$output, CachePluginBase $cache) {&#10;  // When using full pager, disable any time-based caching if there are fewer&#10;  // than 10 results.&#10;  if ($view-&#62;pager instanceof Drupal\views\Plugin\views\pager\Full &amp;&amp; $cache instanceof Drupal\views\Plugin\views\cache\Time &amp;&amp; count($view-&#62;result) &#60; 10) {&#10;    $cache-&#62;options[&#39;results_lifespan&#39;] = 0;&#10;    $cache-&#62;options[&#39;output_lifespan&#39;] = 0;&#10;  }&#10;  $END$&#10;}" description="hook_views_post_render" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_query_alter" value="/**&#10; * Implements hook_views_query_alter().&#10; *&#10; * Alter the query before it is executed.&#10; *&#10; * @param \Drupal\views\ViewExecutable $view&#10; *   The view object about to be processed.&#10; * @param QueryPluginBase $query&#10; *   The query plugin object for the query.&#10; *&#10; * @see hook_views_query_substitutions()&#10; * @see \Drupal\views\Plugin\views\query\Sql&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {&#10;  // (Example assuming a view with an exposed filter on node title.)&#10;  // If the input for the title filter is a positive integer, filter against&#10;  // node ID instead of node title.&#10;  if ($view-&#62;id() == &#39;my_view&#39; &amp;&amp; is_numeric($view-&#62;exposed_raw_input[&#39;title&#39;]) &amp;&amp; $view-&#62;exposed_raw_input[&#39;title&#39;] &#62; 0) {&#10;    // Traverse through the &#39;where&#39; part of the query.&#10;    foreach ($query-&#62;where as &amp;$condition_group) {&#10;      foreach ($condition_group[&#39;conditions&#39;] as &amp;$condition) {&#10;        // If this is the part of the query filtering on title, chang the&#10;        // condition to filter on node ID.&#10;        if ($condition[&#39;field&#39;] == &#39;node.title&#39;) {&#10;          $condition = array(&#10;            &#39;field&#39; =&#62; &#39;node.nid&#39;,&#10;            &#39;value&#39; =&#62; $view-&#62;exposed_raw_input[&#39;title&#39;],&#10;            &#39;operator&#39; =&#62; &#39;=&#39;,&#10;          );&#10;        }&#10;      }&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_views_query_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_query_alter" value="/**&#10; * Implements hook_views_query_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {&#10;  // (Example assuming a view with an exposed filter on node title.)&#10;  // If the input for the title filter is a positive integer, filter against&#10;  // node ID instead of node title.&#10;  if ($view-&#62;id() == &#39;my_view&#39; &amp;&amp; is_numeric($view-&#62;exposed_raw_input[&#39;title&#39;]) &amp;&amp; $view-&#62;exposed_raw_input[&#39;title&#39;] &#62; 0) {&#10;    // Traverse through the &#39;where&#39; part of the query.&#10;    foreach ($query-&#62;where as &amp;$condition_group) {&#10;      foreach ($condition_group[&#39;conditions&#39;] as &amp;$condition) {&#10;        // If this is the part of the query filtering on title, chang the&#10;        // condition to filter on node ID.&#10;        if ($condition[&#39;field&#39;] == &#39;node.title&#39;) {&#10;          $condition = array(&#10;            &#39;field&#39; =&#62; &#39;node.nid&#39;,&#10;            &#39;value&#39; =&#62; $view-&#62;exposed_raw_input[&#39;title&#39;],&#10;            &#39;operator&#39; =&#62; &#39;=&#39;,&#10;          );&#10;        }&#10;      }&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_views_query_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_preview_info_alter" value="/**&#10; * Implements hook_views_preview_info_alter().&#10; *&#10; * Alter the view preview information.&#10; *&#10; * The view preview information is optionally displayed when a view is&#10; * previewed in the administrative UI. It includes query and performance&#10; * statistics.&#10; *&#10; * @param array $rows&#10; *   An associative array with two keys:&#10; *   - query: An array of rows suitable for &#39;#type&#39; =&#62; &#39;table&#39;, containing&#10; *     information about the query and the display title and path.&#10; *   - statistics: An array of rows suitable for &#39;#type&#39; =&#62; &#39;table&#39;,&#10; *     containing performance statistics.&#10; * @param \Drupal\views\ViewExecutable $view&#10; *   The view object.&#10; *&#10; * @see \Drupal\views_ui\ViewUI&#10; * @see table.html.twig&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_preview_info_alter(array &amp;$rows, ViewExecutable $view) {&#10;  // Adds information about the tables being queried by the view to the query&#10;  // part of the info box.&#10;  $rows[&#39;query&#39;][] = array(&#10;    t(&#39;&#60;strong&#62;Table queue&#60;/strong&#62;&#39;),&#10;    count($view-&#62;query-&#62;table_queue) . &#39;: (&#39; . implode(&#39;, &#39;, array_keys($view-&#62;query-&#62;table_queue)) . &#39;)&#39;,&#10;  );&#10;  $END$&#10;}" description="hook_views_preview_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_preview_info_alter" value="/**&#10; * Implements hook_views_preview_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_preview_info_alter(array &amp;$rows, ViewExecutable $view) {&#10;  // Adds information about the tables being queried by the view to the query&#10;  // part of the info box.&#10;  $rows[&#39;query&#39;][] = array(&#10;    t(&#39;&#60;strong&#62;Table queue&#60;/strong&#62;&#39;),&#10;    count($view-&#62;query-&#62;table_queue) . &#39;: (&#39; . implode(&#39;, &#39;, array_keys($view-&#62;query-&#62;table_queue)) . &#39;)&#39;,&#10;  );&#10;  $END$&#10;}" description="hook_views_preview_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_ui_display_top_links_alter" value="/**&#10; * Implements hook_views_ui_display_top_links_alter().&#10; *&#10; * Alter the links displayed at the top of the view edit form.&#10; *&#10; * @param array $links&#10; *   A renderable array of links which will be displayed at the top of the&#10; *   view edit form. Each entry will be in a form suitable for&#10; *   &#39;#theme&#39; =&#62; &#39;links&#39;.&#10; * @param \Drupal\views\ViewExecutable $view&#10; *   The view object being edited.&#10; * @param string $display_id&#10; *   The ID of the display being edited, e.g. &#39;default&#39; or &#39;page_1&#39;.&#10; *&#10; * @see \Drupal\views_ui\ViewUI::renderDisplayTop()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_ui_display_top_links_alter(array &amp;$links, ViewExecutable $view, $display_id) {&#10;  // Put the export link first in the list.&#10;  if (isset($links[&#39;export&#39;])) {&#10;    $links = array(&#39;export&#39; =&#62; $links[&#39;export&#39;]) + $links;&#10;  }&#10;  $END$&#10;}" description="hook_views_ui_display_top_links_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_ui_display_top_links_alter" value="/**&#10; * Implements hook_views_ui_display_top_links_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_ui_display_top_links_alter(array &amp;$links, ViewExecutable $view, $display_id) {&#10;  // Put the export link first in the list.&#10;  if (isset($links[&#39;export&#39;])) {&#10;    $links = array(&#39;export&#39; =&#62; $links[&#39;export&#39;]) + $links;&#10;  }&#10;  $END$&#10;}" description="hook_views_ui_display_top_links_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_invalidate_cache" value="/**&#10; * Implements hook_views_invalidate_cache().&#10; *&#10; * Allow modules to respond to the invalidation of the Views cache.&#10; *&#10; * This hook will fire whenever a view is enabled, disabled, created,&#10; * updated, or deleted.&#10; *&#10; * @see views_invalidate_cache()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_invalidate_cache() {&#10;  \Drupal\Core\Cache\Cache::invalidateTags(array(&#39;views&#39;));&#10;  $END$&#10;}" description="hook_views_invalidate_cache" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_invalidate_cache" value="/**&#10; * Implements hook_views_invalidate_cache().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_invalidate_cache() {&#10;  \Drupal\Core\Cache\Cache::invalidateTags(array(&#39;views&#39;));&#10;  $END$&#10;}" description="hook_views_invalidate_cache" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_plugins_access_alter" value="/**&#10; * Implements hook_views_plugins_access_alter().&#10; *&#10; * Modify the list of available views access plugins.&#10; *&#10; * This hook may be used to modify plugin properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing plugin definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\ViewsPluginManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_access_alter(array &amp;$plugins) {&#10;  // Remove the available plugin because the users should not have access to it.&#10;  unset($plugins[&#39;role&#39;]);&#10;  $END$&#10;}" description="hook_views_plugins_access_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_plugins_access_alter" value="/**&#10; * Implements hook_views_plugins_access_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_access_alter(array &amp;$plugins) {&#10;  // Remove the available plugin because the users should not have access to it.&#10;  unset($plugins[&#39;role&#39;]);&#10;  $END$&#10;}" description="hook_views_plugins_access_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_plugins_argument_default_alter" value="/**&#10; * Implements hook_views_plugins_argument_default_alter().&#10; *&#10; * Modify the list of available views default argument plugins.&#10; *&#10; * This hook may be used to modify plugin properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing plugin definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\ViewsPluginManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_argument_default_alter(array &amp;$plugins) {&#10;  // Remove the available plugin because the users should not have access to it.&#10;  unset($plugins[&#39;php&#39;]);&#10;  $END$&#10;}" description="hook_views_plugins_argument_default_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_plugins_argument_default_alter" value="/**&#10; * Implements hook_views_plugins_argument_default_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_argument_default_alter(array &amp;$plugins) {&#10;  // Remove the available plugin because the users should not have access to it.&#10;  unset($plugins[&#39;php&#39;]);&#10;  $END$&#10;}" description="hook_views_plugins_argument_default_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_plugins_argument_validator_alter" value="/**&#10; * Implements hook_views_plugins_argument_validator_alter().&#10; *&#10; * Modify the list of available views argument validation plugins.&#10; *&#10; * This hook may be used to modify plugin properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing plugin definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\ViewsPluginManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_argument_validator_alter(array &amp;$plugins) {&#10;  // Remove the available plugin because the users should not have access to it.&#10;  unset($plugins[&#39;php&#39;]);&#10;  $END$&#10;}" description="hook_views_plugins_argument_validator_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_plugins_argument_validator_alter" value="/**&#10; * Implements hook_views_plugins_argument_validator_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_argument_validator_alter(array &amp;$plugins) {&#10;  // Remove the available plugin because the users should not have access to it.&#10;  unset($plugins[&#39;php&#39;]);&#10;  $END$&#10;}" description="hook_views_plugins_argument_validator_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_plugins_cache_alter" value="/**&#10; * Implements hook_views_plugins_cache_alter().&#10; *&#10; * Modify the list of available views cache plugins.&#10; *&#10; * This hook may be used to modify plugin properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing plugin definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\ViewsPluginManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_cache_alter(array &amp;$plugins) {&#10;  // Change the title.&#10;  $plugins[&#39;time&#39;][&#39;title&#39;] = t(&#39;Custom title&#39;);&#10;  $END$&#10;}" description="hook_views_plugins_cache_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_plugins_cache_alter" value="/**&#10; * Implements hook_views_plugins_cache_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_cache_alter(array &amp;$plugins) {&#10;  // Change the title.&#10;  $plugins[&#39;time&#39;][&#39;title&#39;] = t(&#39;Custom title&#39;);&#10;  $END$&#10;}" description="hook_views_plugins_cache_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_plugins_display_extenders_alter" value="/**&#10; * Implements hook_views_plugins_display_extenders_alter().&#10; *&#10; * Modify the list of available views display extender plugins.&#10; *&#10; * This hook may be used to modify plugin properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing plugin definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\ViewsPluginManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_display_extenders_alter(array &amp;$plugins) {&#10;  // Alter the title of an existing plugin.&#10;  $plugins[&#39;time&#39;][&#39;title&#39;] = t(&#39;Custom title&#39;);&#10;  $END$&#10;}" description="hook_views_plugins_display_extenders_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_plugins_display_extenders_alter" value="/**&#10; * Implements hook_views_plugins_display_extenders_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_display_extenders_alter(array &amp;$plugins) {&#10;  // Alter the title of an existing plugin.&#10;  $plugins[&#39;time&#39;][&#39;title&#39;] = t(&#39;Custom title&#39;);&#10;  $END$&#10;}" description="hook_views_plugins_display_extenders_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_plugins_display_alter" value="/**&#10; * Implements hook_views_plugins_display_alter().&#10; *&#10; * Modify the list of available views display plugins.&#10; *&#10; * This hook may be used to modify plugin properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing plugin definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\ViewsPluginManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_display_alter(array &amp;$plugins) {&#10;  // Alter the title of an existing plugin.&#10;  $plugins[&#39;rest_export&#39;][&#39;title&#39;] = t(&#39;Export&#39;);&#10;  $END$&#10;}" description="hook_views_plugins_display_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_plugins_display_alter" value="/**&#10; * Implements hook_views_plugins_display_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_display_alter(array &amp;$plugins) {&#10;  // Alter the title of an existing plugin.&#10;  $plugins[&#39;rest_export&#39;][&#39;title&#39;] = t(&#39;Export&#39;);&#10;  $END$&#10;}" description="hook_views_plugins_display_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_plugins_exposed_form_alter" value="/**&#10; * Implements hook_views_plugins_exposed_form_alter().&#10; *&#10; * Modify the list of available views exposed form plugins.&#10; *&#10; * This hook may be used to modify plugin properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing plugin definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\ViewsPluginManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_exposed_form_alter(array &amp;$plugins) {&#10;  // Remove the available plugin because the users should not have access to it.&#10;  unset($plugins[&#39;input_required&#39;]);&#10;  $END$&#10;}" description="hook_views_plugins_exposed_form_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_plugins_exposed_form_alter" value="/**&#10; * Implements hook_views_plugins_exposed_form_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_exposed_form_alter(array &amp;$plugins) {&#10;  // Remove the available plugin because the users should not have access to it.&#10;  unset($plugins[&#39;input_required&#39;]);&#10;  $END$&#10;}" description="hook_views_plugins_exposed_form_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_plugins_join_alter" value="/**&#10; * Implements hook_views_plugins_join_alter().&#10; *&#10; * Modify the list of available views join plugins.&#10; *&#10; * This hook may be used to modify plugin properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing plugin definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\ViewsPluginManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_join_alter(array &amp;$plugins) {&#10;  // Print out all join plugin names for debugging purposes.&#10;  debug($plugins);&#10;  $END$&#10;}" description="hook_views_plugins_join_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_plugins_join_alter" value="/**&#10; * Implements hook_views_plugins_join_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_join_alter(array &amp;$plugins) {&#10;  // Print out all join plugin names for debugging purposes.&#10;  debug($plugins);&#10;  $END$&#10;}" description="hook_views_plugins_join_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_plugins_pager_alter" value="/**&#10; * Implements hook_views_plugins_pager_alter().&#10; *&#10; * Modify the list of available views join plugins.&#10; *&#10; * This hook may be used to modify plugin properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing plugin definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\ViewsPluginManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_pager_alter(array &amp;$plugins) {&#10;  // Remove the sql based plugin to force good performance.&#10;  unset($plugins[&#39;full&#39;]);&#10;  $END$&#10;}" description="hook_views_plugins_pager_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_plugins_pager_alter" value="/**&#10; * Implements hook_views_plugins_pager_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_pager_alter(array &amp;$plugins) {&#10;  // Remove the sql based plugin to force good performance.&#10;  unset($plugins[&#39;full&#39;]);&#10;  $END$&#10;}" description="hook_views_plugins_pager_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_plugins_query_alter" value="/**&#10; * Implements hook_views_plugins_query_alter().&#10; *&#10; * Modify the list of available views query plugins.&#10; *&#10; * This hook may be used to modify plugin properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing plugin definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\ViewsPluginManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_query_alter(array &amp;$plugins) {&#10;  // Print out all query plugin names for debugging purposes.&#10;  debug($plugins);&#10;  $END$&#10;}" description="hook_views_plugins_query_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_plugins_query_alter" value="/**&#10; * Implements hook_views_plugins_query_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_query_alter(array &amp;$plugins) {&#10;  // Print out all query plugin names for debugging purposes.&#10;  debug($plugins);&#10;  $END$&#10;}" description="hook_views_plugins_query_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_plugins_row_alter" value="/**&#10; * Implements hook_views_plugins_row_alter().&#10; *&#10; * Modify the list of available views row plugins.&#10; *&#10; * This hook may be used to modify plugin properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing plugin definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\ViewsPluginManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_row_alter(array &amp;$plugins) {&#10;  // Change the used class of a plugin.&#10;  $plugins[&#39;entity:node&#39;][&#39;class&#39;] = &#39;Drupal\node\Plugin\views\row\NodeRow&#39;;&#10;  $plugins[&#39;entity:node&#39;][&#39;module&#39;] = &#39;node&#39;;&#10;  $END$&#10;}" description="hook_views_plugins_row_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_plugins_row_alter" value="/**&#10; * Implements hook_views_plugins_row_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_row_alter(array &amp;$plugins) {&#10;  // Change the used class of a plugin.&#10;  $plugins[&#39;entity:node&#39;][&#39;class&#39;] = &#39;Drupal\node\Plugin\views\row\NodeRow&#39;;&#10;  $plugins[&#39;entity:node&#39;][&#39;module&#39;] = &#39;node&#39;;&#10;  $END$&#10;}" description="hook_views_plugins_row_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_plugins_style_alter" value="/**&#10; * Implements hook_views_plugins_style_alter().&#10; *&#10; * Modify the list of available views style plugins.&#10; *&#10; * This hook may be used to modify plugin properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing plugin definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\ViewsPluginManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_style_alter(array &amp;$plugins) {&#10;  // Change the theme hook of a plugin.&#10;  $plugins[&#39;html_list&#39;][&#39;theme&#39;] = &#39;custom_views_view_list&#39;;&#10;  $END$&#10;}" description="hook_views_plugins_style_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_plugins_style_alter" value="/**&#10; * Implements hook_views_plugins_style_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_style_alter(array &amp;$plugins) {&#10;  // Change the theme hook of a plugin.&#10;  $plugins[&#39;html_list&#39;][&#39;theme&#39;] = &#39;custom_views_view_list&#39;;&#10;  $END$&#10;}" description="hook_views_plugins_style_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_plugins_wizard_alter" value="/**&#10; * Implements hook_views_plugins_wizard_alter().&#10; *&#10; * Modify the list of available views wizard plugins.&#10; *&#10; * This hook may be used to modify plugin properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing plugin definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\ViewsPluginManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_wizard_alter(array &amp;$plugins) {&#10;  // Change the title of a plugin.&#10;  $plugins[&#39;node_revision&#39;][&#39;title&#39;] = t(&#39;Node revision wizard&#39;);&#10;  $END$&#10;}" description="hook_views_plugins_wizard_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_plugins_wizard_alter" value="/**&#10; * Implements hook_views_plugins_wizard_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_wizard_alter(array &amp;$plugins) {&#10;  // Change the title of a plugin.&#10;  $plugins[&#39;node_revision&#39;][&#39;title&#39;] = t(&#39;Node revision wizard&#39;);&#10;  $END$&#10;}" description="hook_views_plugins_wizard_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_plugins_area_alter" value="/**&#10; * Implements hook_views_plugins_area_alter().&#10; *&#10; * Modify the list of available views area handler plugins.&#10; *&#10; * This hook may be used to modify handler properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing handler definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\ViewsHandlerManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_area_alter(array &amp;$plugins) {&#10;  // Change the &#39;title&#39; handler class.&#10;  $plugins[&#39;title&#39;][&#39;class&#39;] = &#39;Drupal\\example\\ExampleClass&#39;;&#10;  $END$&#10;}" description="hook_views_plugins_area_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_plugins_area_alter" value="/**&#10; * Implements hook_views_plugins_area_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_area_alter(array &amp;$plugins) {&#10;  // Change the &#39;title&#39; handler class.&#10;  $plugins[&#39;title&#39;][&#39;class&#39;] = &#39;Drupal\\example\\ExampleClass&#39;;&#10;  $END$&#10;}" description="hook_views_plugins_area_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_plugins_argument_alter" value="/**&#10; * Implements hook_views_plugins_argument_alter().&#10; *&#10; * Modify the list of available views argument handler plugins.&#10; *&#10; * This hook may be used to modify handler properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing handler definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\ViewsHandlerManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_argument_alter(array &amp;$plugins) {&#10;  // Change the &#39;title&#39; handler class.&#10;  $plugins[&#39;title&#39;][&#39;class&#39;] = &#39;Drupal\\example\\ExampleClass&#39;;&#10;  $END$&#10;}" description="hook_views_plugins_argument_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_plugins_argument_alter" value="/**&#10; * Implements hook_views_plugins_argument_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_argument_alter(array &amp;$plugins) {&#10;  // Change the &#39;title&#39; handler class.&#10;  $plugins[&#39;title&#39;][&#39;class&#39;] = &#39;Drupal\\example\\ExampleClass&#39;;&#10;  $END$&#10;}" description="hook_views_plugins_argument_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_plugins_field_alter" value="/**&#10; * Implements hook_views_plugins_field_alter().&#10; *&#10; * Modify the list of available views field handler plugins.&#10; *&#10; * This hook may be used to modify handler properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing handler definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\ViewsHandlerManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_field_alter(array &amp;$plugins) {&#10;  // Change the &#39;title&#39; handler class.&#10;  $plugins[&#39;title&#39;][&#39;class&#39;] = &#39;Drupal\\example\\ExampleClass&#39;;&#10;  $END$&#10;}" description="hook_views_plugins_field_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_plugins_field_alter" value="/**&#10; * Implements hook_views_plugins_field_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_field_alter(array &amp;$plugins) {&#10;  // Change the &#39;title&#39; handler class.&#10;  $plugins[&#39;title&#39;][&#39;class&#39;] = &#39;Drupal\\example\\ExampleClass&#39;;&#10;  $END$&#10;}" description="hook_views_plugins_field_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_plugins_filter_alter" value="/**&#10; * Implements hook_views_plugins_filter_alter().&#10; *&#10; * Modify the list of available views filter handler plugins.&#10; *&#10; * This hook may be used to modify handler properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing handler definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\ViewsHandlerManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_filter_alter(array &amp;$plugins) {&#10;  // Change the &#39;title&#39; handler class.&#10;  $plugins[&#39;title&#39;][&#39;class&#39;] = &#39;Drupal\\example\\ExampleClass&#39;;&#10;  $END$&#10;}" description="hook_views_plugins_filter_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_plugins_filter_alter" value="/**&#10; * Implements hook_views_plugins_filter_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_filter_alter(array &amp;$plugins) {&#10;  // Change the &#39;title&#39; handler class.&#10;  $plugins[&#39;title&#39;][&#39;class&#39;] = &#39;Drupal\\example\\ExampleClass&#39;;&#10;  $END$&#10;}" description="hook_views_plugins_filter_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_plugins_relationship_alter" value="/**&#10; * Implements hook_views_plugins_relationship_alter().&#10; *&#10; * Modify the list of available views relationship handler plugins.&#10; *&#10; * This hook may be used to modify handler properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing handler definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\ViewsHandlerManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_relationship_alter(array &amp;$plugins) {&#10;  // Change the &#39;title&#39; handler class.&#10;  $plugins[&#39;title&#39;][&#39;class&#39;] = &#39;Drupal\\example\\ExampleClass&#39;;&#10;  $END$&#10;}" description="hook_views_plugins_relationship_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_plugins_relationship_alter" value="/**&#10; * Implements hook_views_plugins_relationship_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_relationship_alter(array &amp;$plugins) {&#10;  // Change the &#39;title&#39; handler class.&#10;  $plugins[&#39;title&#39;][&#39;class&#39;] = &#39;Drupal\\example\\ExampleClass&#39;;&#10;  $END$&#10;}" description="hook_views_plugins_relationship_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_views_plugins_sort_alter" value="/**&#10; * Implements hook_views_plugins_sort_alter().&#10; *&#10; * Modify the list of available views sort handler plugins.&#10; *&#10; * This hook may be used to modify handler properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param array $plugins&#10; *   An array of all the existing handler definitions, passed by reference.&#10; *&#10; * @see \Drupal\views\Plugin\ViewsHandlerManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_sort_alter(array &amp;$plugins) {&#10;  // Change the &#39;title&#39; handler class.&#10;  $plugins[&#39;title&#39;][&#39;class&#39;] = &#39;Drupal\\example\\ExampleClass&#39;;&#10;  $END$&#10;}" description="hook_views_plugins_sort_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_views_plugins_sort_alter" value="/**&#10; * Implements hook_views_plugins_sort_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_views_plugins_sort_alter(array &amp;$plugins) {&#10;  // Change the &#39;title&#39; handler class.&#10;  $plugins[&#39;title&#39;][&#39;class&#39;] = &#39;Drupal\\example\\ExampleClass&#39;;&#10;  $END$&#10;}" description="hook_views_plugins_sort_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_file_validate" value="/**&#10; * Implements hook_file_validate().&#10; *&#10; * Check that files meet a given criteria.&#10; *&#10; * This hook lets modules perform additional validation on files. They&#39;re able&#10; * to report a failure by returning one or more error messages.&#10; *&#10; * @param \Drupal\file\FileInterface $file&#10; *   The file entity being validated.&#10; * @return array&#10; *   An array of error messages. If there are no problems with the file return&#10; *   an empty array.&#10; *&#10; * @see file_validate()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_file_validate(Drupal\file\FileInterface $file) {&#10;  $errors = array();&#10;&#10;  if (!$file-&#62;getFilename()) {&#10;    $errors[] = t(&#34;The file&#39;s name is empty. Please give a name to the file.&#34;);&#10;  }&#10;  if (strlen($file-&#62;getFilename()) &#62; 255) {&#10;    $errors[] = t(&#34;The file&#39;s name exceeds the 255 characters limit. Please rename the file and try again.&#34;);&#10;  }&#10;&#10;  return $errors;&#10;  $END$&#10;}" description="hook_file_validate" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_file_validate" value="/**&#10; * Implements hook_file_validate().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_file_validate(Drupal\file\FileInterface $file) {&#10;  $errors = array();&#10;&#10;  if (!$file-&#62;getFilename()) {&#10;    $errors[] = t(&#34;The file&#39;s name is empty. Please give a name to the file.&#34;);&#10;  }&#10;  if (strlen($file-&#62;getFilename()) &#62; 255) {&#10;    $errors[] = t(&#34;The file&#39;s name exceeds the 255 characters limit. Please rename the file and try again.&#34;);&#10;  }&#10;&#10;  return $errors;&#10;  $END$&#10;}" description="hook_file_validate" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_file_copy" value="/**&#10; * Implements hook_file_copy().&#10; *&#10; * Respond to a file that has been copied.&#10; *&#10; * @param \Drupal\file\FileInterface $file&#10; *   The newly copied file entity.&#10; * @param \Drupal\file\FileInterface $source&#10; *   The original file before the copy.&#10; *&#10; * @see file_copy()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_file_copy(Drupal\file\FileInterface $file, Drupal\file\FileInterface $source) {&#10;  // Make sure that the file name starts with the owner&#39;s user name.&#10;  if (strpos($file-&#62;getFilename(), $file-&#62;getOwner()-&#62;name) !== 0) {&#10;    $file-&#62;setFilename($file-&#62;getOwner()-&#62;name . &#39;_&#39; . $file-&#62;getFilename());&#10;    $file-&#62;save();&#10;&#10;    \Drupal::logger(&#39;file&#39;)-&#62;notice(&#39;Copied file %source has been renamed to %destination&#39;, array(&#39;%source&#39; =&#62; $source-&#62;filename, &#39;%destination&#39; =&#62; $file-&#62;getFilename()));&#10;  }&#10;  $END$&#10;}" description="hook_file_copy" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_file_copy" value="/**&#10; * Implements hook_file_copy().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_file_copy(Drupal\file\FileInterface $file, Drupal\file\FileInterface $source) {&#10;  // Make sure that the file name starts with the owner&#39;s user name.&#10;  if (strpos($file-&#62;getFilename(), $file-&#62;getOwner()-&#62;name) !== 0) {&#10;    $file-&#62;setFilename($file-&#62;getOwner()-&#62;name . &#39;_&#39; . $file-&#62;getFilename());&#10;    $file-&#62;save();&#10;&#10;    \Drupal::logger(&#39;file&#39;)-&#62;notice(&#39;Copied file %source has been renamed to %destination&#39;, array(&#39;%source&#39; =&#62; $source-&#62;filename, &#39;%destination&#39; =&#62; $file-&#62;getFilename()));&#10;  }&#10;  $END$&#10;}" description="hook_file_copy" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_file_move" value="/**&#10; * Implements hook_file_move().&#10; *&#10; * Respond to a file that has been moved.&#10; *&#10; * @param \Drupal\file\FileInterface $file&#10; *   The updated file entity after the move.&#10; * @param \Drupal\file\FileInterface $source&#10; *   The original file entity before the move.&#10; *&#10; * @see file_move()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_file_move(Drupal\file\FileInterface $file, Drupal\file\FileInterface $source) {&#10;  // Make sure that the file name starts with the owner&#39;s user name.&#10;  if (strpos($file-&#62;getFilename(), $file-&#62;getOwner()-&#62;name) !== 0) {&#10;    $file-&#62;setFilename($file-&#62;getOwner()-&#62;name . &#39;_&#39; . $file-&#62;getFilename());&#10;    $file-&#62;save();&#10;&#10;    \Drupal::logger(&#39;file&#39;)-&#62;notice(&#39;Moved file %source has been renamed to %destination&#39;, array(&#39;%source&#39; =&#62; $source-&#62;filename, &#39;%destination&#39; =&#62; $file-&#62;getFilename()));&#10;  }&#10;  $END$&#10;}" description="hook_file_move" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_file_move" value="/**&#10; * Implements hook_file_move().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_file_move(Drupal\file\FileInterface $file, Drupal\file\FileInterface $source) {&#10;  // Make sure that the file name starts with the owner&#39;s user name.&#10;  if (strpos($file-&#62;getFilename(), $file-&#62;getOwner()-&#62;name) !== 0) {&#10;    $file-&#62;setFilename($file-&#62;getOwner()-&#62;name . &#39;_&#39; . $file-&#62;getFilename());&#10;    $file-&#62;save();&#10;&#10;    \Drupal::logger(&#39;file&#39;)-&#62;notice(&#39;Moved file %source has been renamed to %destination&#39;, array(&#39;%source&#39; =&#62; $source-&#62;filename, &#39;%destination&#39; =&#62; $file-&#62;getFilename()));&#10;  }&#10;  $END$&#10;}" description="hook_file_move" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_block_view_alter" value="/**&#10; * Implements hook_block_view_alter().&#10; *&#10; * Alter the result of \Drupal\Core\Block\BlockBase::build().&#10; *&#10; * This hook is called after the content has been assembled in a structured&#10; * array and may be used for doing processing which requires that the complete&#10; * block content structure has been built.&#10; *&#10; * If the module wishes to act on the rendered HTML of the block rather than&#10; * the structured content array, it may use this hook to add a #post_render&#10; * callback. Alternatively, it could also implement hook_preprocess_HOOK() for&#10; * block.html.twig. See drupal_render() documentation or the&#10; * @link themeable Default theme implementations topic @endlink for details.&#10; *&#10; * In addition to hook_block_view_alter(), which is called for all blocks, there&#10; * is hook_block_view_BASE_BLOCK_ID_alter(), which can be used to target a&#10; * specific block or set of similar blocks.&#10; *&#10; * @param array &amp;$build&#10; *   A renderable array of data, as returned from the build() implementation of&#10; *   the plugin that defined the block:&#10; *   - #title: The default localized title of the block.&#10; * @param \Drupal\Core\Block\BlockPluginInterface $block&#10; *   The block plugin instance.&#10; *&#10; * @see hook_block_view_BASE_BLOCK_ID_alter()&#10; * @see entity_crud&#10; *&#10; * @ingroup block_api&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_block_view_alter(array &amp;$build, \Drupal\Core\Block\BlockPluginInterface $block) {&#10;  // Remove the contextual links on all blocks that provide them.&#10;  if (isset($build[&#39;#contextual_links&#39;])) {&#10;    unset($build[&#39;#contextual_links&#39;]);&#10;  }&#10;  $END$&#10;}" description="hook_block_view_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_block_view_alter" value="/**&#10; * Implements hook_block_view_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_block_view_alter(array &amp;$build, \Drupal\Core\Block\BlockPluginInterface $block) {&#10;  // Remove the contextual links on all blocks that provide them.&#10;  if (isset($build[&#39;#contextual_links&#39;])) {&#10;    unset($build[&#39;#contextual_links&#39;]);&#10;  }&#10;  $END$&#10;}" description="hook_block_view_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_block_view_BASE_BLOCK_ID_alter" value="/**&#10; * Implements hook_block_view_BASE_BLOCK_ID_alter().&#10; *&#10; * Provide a block plugin specific block_view alteration.&#10; *&#10; * In this hook name, BASE_BLOCK_ID refers to the block implementation&#39;s plugin&#10; * id, regardless of whether the plugin supports derivatives. For example, for&#10; * the \Drupal\system\Plugin\Block\SystemPoweredByBlock block, this would be&#10; * &#39;system_powered_by_block&#39; as per that class&#39;s annotation. And for the&#10; * \Drupal\system\Plugin\Block\SystemMenuBlock block, it would be&#10; * &#39;system_menu_block&#39; as per that class&#39;s annotation, regardless of which menu&#10; * the derived block is for.&#10; *&#10; * @param array $build&#10; *   A renderable array of data, as returned from the build() implementation of&#10; *   the plugin that defined the block:&#10; *   - #title: The default localized title of the block.&#10; * @param \Drupal\Core\Block\BlockPluginInterface $block&#10; *   The block plugin instance.&#10; *&#10; * @see hook_block_view_alter()&#10; * @see entity_crud&#10; *&#10; * @ingroup block_api&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_block_view_BASE_BLOCK_ID_alter(array &amp;$build, \Drupal\Core\Block\BlockPluginInterface $block) {&#10;  // Change the title of the specific block.&#10;  $build[&#39;#title&#39;] = t(&#39;New title of the block&#39;);&#10;  $END$&#10;}" description="hook_block_view_BASE_BLOCK_ID_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_block_view_BASE_BLOCK_ID_alter" value="/**&#10; * Implements hook_block_view_BASE_BLOCK_ID_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_block_view_BASE_BLOCK_ID_alter(array &amp;$build, \Drupal\Core\Block\BlockPluginInterface $block) {&#10;  // Change the title of the specific block.&#10;  $build[&#39;#title&#39;] = t(&#39;New title of the block&#39;);&#10;  $END$&#10;}" description="hook_block_view_BASE_BLOCK_ID_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_block_build_alter" value="/**&#10; * Implements hook_block_build_alter().&#10; *&#10; * Alter the result of \Drupal\Core\Block\BlockBase::build().&#10; *&#10; * Unlike hook_block_view_alter(), this hook is called very early, before the&#10; * block is being assembled. Therefore, it is early enough to alter the&#10; * cacheability metadata (change #cache), or to explicitly placeholder the block&#10; * (set #create_placeholder).&#10; *&#10; * In addition to hook_block_build_alter(), which is called for all blocks,&#10; * there is hook_block_build_BASE_BLOCK_ID_alter(), which can be used to target&#10; * a specific block or set of similar blocks.&#10; *&#10; * @param array &amp;$build&#10; *   A renderable array of data, only containing #cache.&#10; * @param \Drupal\Core\Block\BlockPluginInterface $block&#10; *   The block plugin instance.&#10; *&#10; * @see hook_block_build_BASE_BLOCK_ID_alter()&#10; * @see entity_crud&#10; *&#10; * @ingroup block_api&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_block_build_alter(array &amp;$build, \Drupal\Core\Block\BlockPluginInterface $block) {&#10;  // Add the &#39;user&#39; cache context to some blocks.&#10;  if ($some_condition) {&#10;    $build[&#39;#cache&#39;][&#39;contexts&#39;][] = &#39;user&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_block_build_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_block_build_alter" value="/**&#10; * Implements hook_block_build_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_block_build_alter(array &amp;$build, \Drupal\Core\Block\BlockPluginInterface $block) {&#10;  // Add the &#39;user&#39; cache context to some blocks.&#10;  if ($some_condition) {&#10;    $build[&#39;#cache&#39;][&#39;contexts&#39;][] = &#39;user&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_block_build_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_block_build_BASE_BLOCK_ID_alter" value="/**&#10; * Implements hook_block_build_BASE_BLOCK_ID_alter().&#10; *&#10; * Provide a block plugin specific block_build alteration.&#10; *&#10; * In this hook name, BASE_BLOCK_ID refers to the block implementation&#39;s plugin&#10; * id, regardless of whether the plugin supports derivatives. For example, for&#10; * the \Drupal\system\Plugin\Block\SystemPoweredByBlock block, this would be&#10; * &#39;system_powered_by_block&#39; as per that class&#39;s annotation. And for the&#10; * \Drupal\system\Plugin\Block\SystemMenuBlock block, it would be&#10; * &#39;system_menu_block&#39; as per that class&#39;s annotation, regardless of which menu&#10; * the derived block is for.&#10; *&#10; * @param array $build&#10; *   A renderable array of data, only containing #cache.&#10; * @param \Drupal\Core\Block\BlockPluginInterface $block&#10; *   The block plugin instance.&#10; *&#10; * @see hook_block_build_alter()&#10; * @see entity_crud&#10; *&#10; * @ingroup block_api&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_block_build_BASE_BLOCK_ID_alter(array &amp;$build, \Drupal\Core\Block\BlockPluginInterface $block) {&#10;  // Explicitly enable placeholdering of the specific block.&#10;  $build[&#39;#create_placeholder&#39;] = TRUE;&#10;  $END$&#10;}" description="hook_block_build_BASE_BLOCK_ID_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_block_build_BASE_BLOCK_ID_alter" value="/**&#10; * Implements hook_block_build_BASE_BLOCK_ID_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_block_build_BASE_BLOCK_ID_alter(array &amp;$build, \Drupal\Core\Block\BlockPluginInterface $block) {&#10;  // Explicitly enable placeholdering of the specific block.&#10;  $build[&#39;#create_placeholder&#39;] = TRUE;&#10;  $END$&#10;}" description="hook_block_build_BASE_BLOCK_ID_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_block_access" value="/**&#10; * Implements hook_block_access().&#10; *&#10; * Control access to a block instance.&#10; *&#10; * Modules may implement this hook if they want to have a say in whether or not&#10; * a given user has access to perform a given operation on a block instance.&#10; *&#10; * @param \Drupal\block\Entity\Block $block&#10; *   The block instance.&#10; * @param string $operation&#10; *   The operation to be performed; for instance, &#39;view&#39;, &#39;create&#39;, &#39;delete&#39;, or&#10; *   &#39;update&#39;.&#10; * @param \Drupal\Core\Session\AccountInterface $account&#10; *   The user object to perform the access check operation on.&#10; *&#10; * @return \Drupal\Core\Access\AccessResultInterface&#10; *   The access result. If all implementations of this hook return&#10; *   AccessResultInterface objects whose value is !isAllowed() and&#10; *   !isForbidden(), then default access rules from&#10; *   \Drupal\block\BlockAccessControlHandler::checkAccess() are used.&#10; *&#10; * @see \Drupal\Core\Entity\EntityAccessControlHandler::access()&#10; * @see \Drupal\block\BlockAccessControlHandler::checkAccess()&#10; * @ingroup block_api&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_block_access(\Drupal\block\Entity\Block $block, $operation, \Drupal\Core\Session\AccountInterface $account) {&#10;  // Example code that would prevent displaying the &#39;Powered by Drupal&#39; block in&#10;  // a region different than the footer.&#10;  if ($operation == &#39;view&#39; &amp;&amp; $block-&#62;getPluginId() == &#39;system_powered_by_block&#39;) {&#10;    return AccessResult::forbiddenIf($block-&#62;getRegion() != &#39;footer&#39;)-&#62;addCacheableDependency($block);&#10;  }&#10;&#10;  // No opinion.&#10;  return AccessResult::neutral();&#10;  $END$&#10;}" description="hook_block_access" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_block_access" value="/**&#10; * Implements hook_block_access().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_block_access(\Drupal\block\Entity\Block $block, $operation, \Drupal\Core\Session\AccountInterface $account) {&#10;  // Example code that would prevent displaying the &#39;Powered by Drupal&#39; block in&#10;  // a region different than the footer.&#10;  if ($operation == &#39;view&#39; &amp;&amp; $block-&#62;getPluginId() == &#39;system_powered_by_block&#39;) {&#10;    return AccessResult::forbiddenIf($block-&#62;getRegion() != &#39;footer&#39;)-&#62;addCacheableDependency($block);&#10;  }&#10;&#10;  // No opinion.&#10;  return AccessResult::neutral();&#10;  $END$&#10;}" description="hook_block_access" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_simpletest_alter" value="/**&#10; * Implements hook_simpletest_alter().&#10; *&#10; * Alter the list of tests.&#10; *&#10; * @param $groups&#10; *   A two dimensional array, the first key is the test group, the second is the&#10; *   name of the test class, and the value is in associative array containing&#10; *   &#39;name&#39;, &#39;description&#39;, &#39;group&#39;, and &#39;requires&#39; keys.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_simpletest_alter(&amp;$groups) {&#10;  // An alternative session handler module would not want to run the original&#10;  // Session HTTPS handling test because it checks the sessions table in the&#10;  // database.&#10;  unset($groups[&#39;Session&#39;][&#39;testHttpsSession&#39;]);&#10;  $END$&#10;}" description="hook_simpletest_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_simpletest_alter" value="/**&#10; * Implements hook_simpletest_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_simpletest_alter(&amp;$groups) {&#10;  // An alternative session handler module would not want to run the original&#10;  // Session HTTPS handling test because it checks the sessions table in the&#10;  // database.&#10;  unset($groups[&#39;Session&#39;][&#39;testHttpsSession&#39;]);&#10;  $END$&#10;}" description="hook_simpletest_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_test_group_started" value="/**&#10; * Implements hook_test_group_started().&#10; *&#10; * A test group has started.&#10; *&#10; * This hook is called just once at the beginning of a test group.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_test_group_started() {&#10;  $END$&#10;}" description="hook_test_group_started" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_test_group_started" value="/**&#10; * Implements hook_test_group_started().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_test_group_started() {&#10;  $END$&#10;}" description="hook_test_group_started" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_test_group_finished" value="/**&#10; * Implements hook_test_group_finished().&#10; *&#10; * A test group has finished.&#10; *&#10; * This hook is called just once at the end of a test group.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_test_group_finished() {&#10;  $END$&#10;}" description="hook_test_group_finished" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_test_group_finished" value="/**&#10; * Implements hook_test_group_finished().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_test_group_finished() {&#10;  $END$&#10;}" description="hook_test_group_finished" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_test_finished" value="/**&#10; * Implements hook_test_finished().&#10; *&#10; * An individual test has finished.&#10; *&#10; * This hook is called when an individual test has finished.&#10; *&#10; * @param&#10; *   $results The results of the test as gathered by&#10; *   \Drupal\simpletest\WebTestBase.&#10; *&#10; * @see \Drupal\simpletest\WebTestBase::results()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_test_finished($results) {&#10;  $END$&#10;}" description="hook_test_finished" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_test_finished" value="/**&#10; * Implements hook_test_finished().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_test_finished($results) {&#10;  $END$&#10;}" description="hook_test_finished" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ckeditor_plugin_info_alter" value="/**&#10; * Implements hook_ckeditor_plugin_info_alter().&#10; *&#10; * Modify the list of available CKEditor plugins.&#10; *&#10; * This hook may be used to modify plugin properties after they have been&#10; * specified by other modules.&#10; *&#10; * @param $plugins&#10; *   An array of all the existing plugin definitions, passed by reference.&#10; *&#10; * @see CKEditorPluginManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ckeditor_plugin_info_alter(array &amp;$plugins) {&#10;  $plugins[&#39;someplugin&#39;][&#39;label&#39;] = t(&#39;Better name&#39;);&#10;  $END$&#10;}" description="hook_ckeditor_plugin_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ckeditor_plugin_info_alter" value="/**&#10; * Implements hook_ckeditor_plugin_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ckeditor_plugin_info_alter(array &amp;$plugins) {&#10;  $plugins[&#39;someplugin&#39;][&#39;label&#39;] = t(&#39;Better name&#39;);&#10;  $END$&#10;}" description="hook_ckeditor_plugin_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ckeditor_css_alter" value="/**&#10; * Implements hook_ckeditor_css_alter().&#10; *&#10; * Modify the list of CSS files that will be added to a CKEditor instance.&#10; *&#10; * Modules may use this hook to provide their own custom CSS file without&#10; * providing a CKEditor plugin. This list of CSS files is only used in the&#10; * iframe versions of CKEditor.&#10; *&#10; * Front-end themes (and base themes) can easily specify CSS files to be used in&#10; * iframe instances of CKEditor through an entry in their .info.yml file:&#10; *&#10; * @code&#10; * ckeditor_stylesheets:&#10; *   - css/ckeditor-iframe.css&#10; * @endcode&#10; *&#10; * @param array &amp;$css&#10; *   An array of CSS files, passed by reference. This is a flat list of file&#10; *   paths which can be either relative to the Drupal root or external URLs.&#10; * @param $editor&#10; *   The text editor object as returned by editor_load(), for which these files&#10; *   are being loaded. Based on this information, it is possible to load the&#10; *   corresponding text format object.&#10; *&#10; * @see _ckeditor_theme_css()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ckeditor_css_alter(array &amp;$css, Editor $editor) {&#10;  $css[] = drupal_get_path(&#39;module&#39;, &#39;mymodule&#39;) . &#39;/css/mymodule-ckeditor.css&#39;;&#10;  $END$&#10;}" description="hook_ckeditor_css_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ckeditor_css_alter" value="/**&#10; * Implements hook_ckeditor_css_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ckeditor_css_alter(array &amp;$css, Editor $editor) {&#10;  $css[] = drupal_get_path(&#39;module&#39;, &#39;mymodule&#39;) . &#39;/css/mymodule-ckeditor.css&#39;;&#10;  $END$&#10;}" description="hook_ckeditor_css_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_contextual_links_view_alter" value="/**&#10; * Implements hook_contextual_links_view_alter().&#10; *&#10; * Alter a contextual links element before it is rendered.&#10; *&#10; * This hook is invoked by contextual_pre_render_links(). The renderable array&#10; * of #type &#39;contextual_links&#39;, containing the entire contextual links data that&#10; * is passed in by reference. Further links may be added or existing links can&#10; * be altered.&#10; *&#10; * @param $element&#10; *   A renderable array representing the contextual links.&#10; * @param $items&#10; *   An associative array containing the original contextual link items, as&#10; *   generated by&#10; *   \Drupal\Core\Menu\ContextualLinkManagerInterface::getContextualLinksArrayByGroup(),&#10; *   which were used to build $element[&#39;#links&#39;].&#10; *&#10; * @see hook_contextual_links_alter()&#10; * @see hook_contextual_links_plugins_alter()&#10; * @see contextual_pre_render_links()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_contextual_links_view_alter(&amp;$element, $items) {&#10;  // Add another class to all contextual link lists to facilitate custom&#10;  // styling.&#10;  $element[&#39;#attributes&#39;][&#39;class&#39;][] = &#39;custom-class&#39;;&#10;  $END$&#10;}" description="hook_contextual_links_view_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_contextual_links_view_alter" value="/**&#10; * Implements hook_contextual_links_view_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_contextual_links_view_alter(&amp;$element, $items) {&#10;  // Add another class to all contextual link lists to facilitate custom&#10;  // styling.&#10;  $element[&#39;#attributes&#39;][&#39;class&#39;][] = &#39;custom-class&#39;;&#10;  $END$&#10;}" description="hook_contextual_links_view_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_field_info_alter" value="/**&#10; * Implements hook_field_info_alter().&#10; *&#10; * Perform alterations on Field API field types.&#10; *&#10; * @param $info&#10; *   Array of information on field types as collected by the &#34;field type&#34; plugin&#10; *   manager.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_info_alter(&amp;$info) {&#10;  // Change the default widget for fields of type &#39;foo&#39;.&#10;  if (isset($info[&#39;foo&#39;])) {&#10;    $info[&#39;foo&#39;][&#39;default widget&#39;] = &#39;mymodule_widget&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_field_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_field_info_alter" value="/**&#10; * Implements hook_field_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_info_alter(&amp;$info) {&#10;  // Change the default widget for fields of type &#39;foo&#39;.&#10;  if (isset($info[&#39;foo&#39;])) {&#10;    $info[&#39;foo&#39;][&#39;default widget&#39;] = &#39;mymodule_widget&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_field_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_field_storage_config_update_forbid" value="/**&#10; * Implements hook_field_storage_config_update_forbid().&#10; *&#10; * Forbid a field storage update from occurring.&#10; *&#10; * Any module may forbid any update for any reason. For example, the&#10; * field&#39;s storage module might forbid an update if it would change&#10; * the storage schema while data for the field exists. A field type&#10; * module might forbid an update if it would change existing data&#39;s&#10; * semantics, or if there are external dependencies on field settings&#10; * that cannot be updated.&#10; *&#10; * To forbid the update from occurring, throw a&#10; * \Drupal\Core\Entity\Exception\FieldStorageDefinitionUpdateForbiddenException.&#10; *&#10; * @param \Drupal\field\FieldStorageConfigInterface $field_storage&#10; *   The field storage as it will be post-update.&#10; * @param \Drupal\field\FieldStorageConfigInterface $prior_field_storage&#10; *   The field storage as it is pre-update.&#10; *&#10; * @see entity_crud&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_storage_config_update_forbid(\Drupal\field\FieldStorageConfigInterface $field_storage, \Drupal\field\FieldStorageConfigInterface $prior_field_storage) {&#10;  if ($field_storage-&#62;module == &#39;options&#39; &amp;&amp; $field_storage-&#62;hasData()) {&#10;    // Forbid any update that removes allowed values with actual data.&#10;    $allowed_values = $field_storage-&#62;getSetting(&#39;allowed_values&#39;);&#10;    $prior_allowed_values = $prior_field_storage-&#62;getSetting(&#39;allowed_values&#39;);&#10;    $lost_keys = array_keys(array_diff_key($prior_allowed_values, $allowed_values));&#10;    if (_options_values_in_use($field_storage-&#62;getTargetEntityTypeId(), $field_storage-&#62;getName(), $lost_keys)) {&#10;      throw new \Drupal\Core\Entity\Exception\FieldStorageDefinitionUpdateForbiddenException(t(&#39;A list field (@field_name) with existing data cannot have its keys changed.&#39;, array(&#39;@field_name&#39; =&#62; $field_storage-&#62;getName())));&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_field_storage_config_update_forbid" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_field_storage_config_update_forbid" value="/**&#10; * Implements hook_field_storage_config_update_forbid().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_storage_config_update_forbid(\Drupal\field\FieldStorageConfigInterface $field_storage, \Drupal\field\FieldStorageConfigInterface $prior_field_storage) {&#10;  if ($field_storage-&#62;module == &#39;options&#39; &amp;&amp; $field_storage-&#62;hasData()) {&#10;    // Forbid any update that removes allowed values with actual data.&#10;    $allowed_values = $field_storage-&#62;getSetting(&#39;allowed_values&#39;);&#10;    $prior_allowed_values = $prior_field_storage-&#62;getSetting(&#39;allowed_values&#39;);&#10;    $lost_keys = array_keys(array_diff_key($prior_allowed_values, $allowed_values));&#10;    if (_options_values_in_use($field_storage-&#62;getTargetEntityTypeId(), $field_storage-&#62;getName(), $lost_keys)) {&#10;      throw new \Drupal\Core\Entity\Exception\FieldStorageDefinitionUpdateForbiddenException(t(&#39;A list field (@field_name) with existing data cannot have its keys changed.&#39;, array(&#39;@field_name&#39; =&#62; $field_storage-&#62;getName())));&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_field_storage_config_update_forbid" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_field_widget_info_alter" value="/**&#10; * Implements hook_field_widget_info_alter().&#10; *&#10; * Perform alterations on Field API widget types.&#10; *&#10; * @param array $info&#10; *   An array of information on existing widget types, as collected by the&#10; *   annotation discovery mechanism.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_widget_info_alter(array &amp;$info) {&#10;  // Let a new field type re-use an existing widget.&#10;  $info[&#39;options_select&#39;][&#39;field_types&#39;][] = &#39;my_field_type&#39;;&#10;  $END$&#10;}" description="hook_field_widget_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_field_widget_info_alter" value="/**&#10; * Implements hook_field_widget_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_widget_info_alter(array &amp;$info) {&#10;  // Let a new field type re-use an existing widget.&#10;  $info[&#39;options_select&#39;][&#39;field_types&#39;][] = &#39;my_field_type&#39;;&#10;  $END$&#10;}" description="hook_field_widget_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_field_widget_form_alter" value="/**&#10; * Implements hook_field_widget_form_alter().&#10; *&#10; * Alter forms for field widgets provided by other modules.&#10; *&#10; * @param $element&#10; *   The field widget form element as constructed by hook_field_widget_form().&#10; * @param $form_state&#10; *   The current state of the form.&#10; * @param $context&#10; *   An associative array containing the following key-value pairs:&#10; *   - form: The form structure to which widgets are being attached. This may be&#10; *     a full form structure, or a sub-element of a larger form.&#10; *   - widget: The widget plugin instance.&#10; *   - items: The field values, as a&#10; *     \Drupal\Core\Field\FieldItemListInterface object.&#10; *   - delta: The order of this item in the array of subelements (0, 1, 2, etc).&#10; *   - default: A boolean indicating whether the form is being shown as a dummy&#10; *     form to set default values.&#10; *&#10; * @see \Drupal\Core\Field\WidgetBase::formSingleElement()&#10; * @see hook_field_widget_WIDGET_TYPE_form_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_widget_form_alter(&amp;$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {&#10;  // Add a css class to widget form elements for all fields of type mytype.&#10;  $field_definition = $context[&#39;items&#39;]-&#62;getFieldDefinition();&#10;  if ($field_definition-&#62;getType() == &#39;mytype&#39;) {&#10;    // Be sure not to overwrite existing attributes.&#10;    $element[&#39;#attributes&#39;][&#39;class&#39;][] = &#39;myclass&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_field_widget_form_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_field_widget_form_alter" value="/**&#10; * Implements hook_field_widget_form_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_widget_form_alter(&amp;$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {&#10;  // Add a css class to widget form elements for all fields of type mytype.&#10;  $field_definition = $context[&#39;items&#39;]-&#62;getFieldDefinition();&#10;  if ($field_definition-&#62;getType() == &#39;mytype&#39;) {&#10;    // Be sure not to overwrite existing attributes.&#10;    $element[&#39;#attributes&#39;][&#39;class&#39;][] = &#39;myclass&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_field_widget_form_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_field_widget_WIDGET_TYPE_form_alter" value="/**&#10; * Implements hook_field_widget_WIDGET_TYPE_form_alter().&#10; *&#10; * Alter widget forms for a specific widget provided by another module.&#10; *&#10; * Modules can implement hook_field_widget_WIDGET_TYPE_form_alter() to modify a&#10; * specific widget form, rather than using hook_field_widget_form_alter() and&#10; * checking the widget type.&#10; *&#10; * @param $element&#10; *   The field widget form element as constructed by hook_field_widget_form().&#10; * @param $form_state&#10; *   The current state of the form.&#10; * @param $context&#10; *   An associative array. See hook_field_widget_form_alter() for the structure&#10; *   and content of the array.&#10; *&#10; * @see \Drupal\Core\Field\WidgetBase::formSingleElement()&#10; * @see hook_field_widget_form_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_widget_WIDGET_TYPE_form_alter(&amp;$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {&#10;  // Code here will only act on widgets of type WIDGET_TYPE.  For example,&#10;  // hook_field_widget_mymodule_autocomplete_form_alter() will only act on&#10;  // widgets of type &#39;mymodule_autocomplete&#39;.&#10;  $element[&#39;#autocomplete_route_name&#39;] = &#39;mymodule.autocomplete_route&#39;;&#10;  $END$&#10;}" description="hook_field_widget_WIDGET_TYPE_form_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_field_widget_WIDGET_TYPE_form_alter" value="/**&#10; * Implements hook_field_widget_WIDGET_TYPE_form_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_widget_WIDGET_TYPE_form_alter(&amp;$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {&#10;  // Code here will only act on widgets of type WIDGET_TYPE.  For example,&#10;  // hook_field_widget_mymodule_autocomplete_form_alter() will only act on&#10;  // widgets of type &#39;mymodule_autocomplete&#39;.&#10;  $element[&#39;#autocomplete_route_name&#39;] = &#39;mymodule.autocomplete_route&#39;;&#10;  $END$&#10;}" description="hook_field_widget_WIDGET_TYPE_form_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_field_formatter_info_alter" value="/**&#10; * Implements hook_field_formatter_info_alter().&#10; *&#10; * Perform alterations on Field API formatter types.&#10; *&#10; * @param array $info&#10; *   An array of information on existing formatter types, as collected by the&#10; *   annotation discovery mechanism.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_formatter_info_alter(array &amp;$info) {&#10;  // Let a new field type re-use an existing formatter.&#10;  $info[&#39;text_default&#39;][&#39;field_types&#39;][] = &#39;my_field_type&#39;;&#10;  $END$&#10;}" description="hook_field_formatter_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_field_formatter_info_alter" value="/**&#10; * Implements hook_field_formatter_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_formatter_info_alter(array &amp;$info) {&#10;  // Let a new field type re-use an existing formatter.&#10;  $info[&#39;text_default&#39;][&#39;field_types&#39;][] = &#39;my_field_type&#39;;&#10;  $END$&#10;}" description="hook_field_formatter_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_field_info_max_weight" value="/**&#10; * Implements hook_field_info_max_weight().&#10; *&#10; * Returns the maximum weight for the entity components handled by the module.&#10; *&#10; * Field API takes care of fields and &#39;extra_fields&#39;. This hook is intended for&#10; * third-party modules adding other entity components (e.g. field_group).&#10; *&#10; * @param string $entity_type&#10; *   The type of entity; e.g. &#39;node&#39; or &#39;user&#39;.&#10; * @param string $bundle&#10; *   The bundle name.&#10; * @param string $context&#10; *   The context for which the maximum weight is requested. Either &#39;form&#39; or&#10; *   &#39;display&#39;.&#10; * @param string $context_mode&#10; *   The view or form mode name.&#10; *&#10; * @return int&#10; *   The maximum weight of the entity&#39;s components, or NULL if no components&#10; *   were found.&#10; *&#10; * @ingroup field_info&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_info_max_weight($entity_type, $bundle, $context, $context_mode) {&#10;  $weights = array();&#10;&#10;  foreach (my_module_entity_additions($entity_type, $bundle, $context, $context_mode) as $addition) {&#10;    $weights[] = $addition[&#39;weight&#39;];&#10;  }&#10;&#10;  return $weights ? max($weights) : NULL;&#10;  $END$&#10;}" description="hook_field_info_max_weight" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_field_info_max_weight" value="/**&#10; * Implements hook_field_info_max_weight().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_info_max_weight($entity_type, $bundle, $context, $context_mode) {&#10;  $weights = array();&#10;&#10;  foreach (my_module_entity_additions($entity_type, $bundle, $context, $context_mode) as $addition) {&#10;    $weights[] = $addition[&#39;weight&#39;];&#10;  }&#10;&#10;  return $weights ? max($weights) : NULL;&#10;  $END$&#10;}" description="hook_field_info_max_weight" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_field_purge_field_storage" value="/**&#10; * Implements hook_field_purge_field_storage().&#10; *&#10; * Acts when a field storage definition is being purged.&#10; *&#10; * In field_purge_field_storage(), after the storage definition has been removed&#10; * from the system, the entity storage has purged stored field data, and the&#10; * field definitions cache has been cleared, this hook is invoked on all modules&#10; * to allow them to respond to the field storage being purged.&#10; *&#10; * @param $field_storage \Drupal\field\Entity\FieldStorageConfig&#10; *   The field storage being purged.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_purge_field_storage(\Drupal\field\Entity\FieldStorageConfig $field_storage) {&#10;  db_delete(&#39;my_module_field_storage_info&#39;)&#10;    -&#62;condition(&#39;uuid&#39;, $field_storage-&#62;uuid())&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_field_purge_field_storage" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_field_purge_field_storage" value="/**&#10; * Implements hook_field_purge_field_storage().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_purge_field_storage(\Drupal\field\Entity\FieldStorageConfig $field_storage) {&#10;  db_delete(&#39;my_module_field_storage_info&#39;)&#10;    -&#62;condition(&#39;uuid&#39;, $field_storage-&#62;uuid())&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_field_purge_field_storage" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_field_purge_field" value="/**&#10; * Implements hook_field_purge_field().&#10; *&#10; * Acts when a field is being purged.&#10; *&#10; * In field_purge_field(), after the field definition has been removed&#10; * from the system, the entity storage has purged stored field data, and the&#10; * field info cache has been cleared, this hook is invoked on all modules to&#10; * allow them to respond to the field being purged.&#10; *&#10; * @param $field&#10; *   The field being purged.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_purge_field(\Drupal\field\Entity\FieldConfig $field) {&#10;  db_delete(&#39;my_module_field_info&#39;)&#10;    -&#62;condition(&#39;id&#39;, $field-&#62;id())&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_field_purge_field" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_field_purge_field" value="/**&#10; * Implements hook_field_purge_field().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_purge_field(\Drupal\field\Entity\FieldConfig $field) {&#10;  db_delete(&#39;my_module_field_info&#39;)&#10;    -&#62;condition(&#39;id&#39;, $field-&#62;id())&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_field_purge_field" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_editor_info_alter" value="/**&#10; * Implements hook_editor_info_alter().&#10; *&#10; * Performs alterations on text editor definitions.&#10; *&#10; * @param array $editors&#10; *   An array of metadata of text editors, as collected by the plugin annotation&#10; *   discovery mechanism.&#10; *&#10; * @see \Drupal\editor\Plugin\EditorBase&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_editor_info_alter(array &amp;$editors) {&#10;  $editors[&#39;some_other_editor&#39;][&#39;label&#39;] = t(&#39;A different name&#39;);&#10;  $editors[&#39;some_other_editor&#39;][&#39;library&#39;][&#39;module&#39;] = &#39;myeditoroverride&#39;;&#10;  $END$&#10;}" description="hook_editor_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_editor_info_alter" value="/**&#10; * Implements hook_editor_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_editor_info_alter(array &amp;$editors) {&#10;  $editors[&#39;some_other_editor&#39;][&#39;label&#39;] = t(&#39;A different name&#39;);&#10;  $editors[&#39;some_other_editor&#39;][&#39;library&#39;][&#39;module&#39;] = &#39;myeditoroverride&#39;;&#10;  $END$&#10;}" description="hook_editor_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_editor_js_settings_alter" value="/**&#10; * Implements hook_editor_js_settings_alter().&#10; *&#10; * Modifies JavaScript settings that are added for text editors.&#10; *&#10; * @param array $settings&#10; *   All the settings that will be added to the page for the text formats to&#10; *   which a user has access.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_editor_js_settings_alter(array &amp;$settings) {&#10;  if (isset($settings[&#39;editor&#39;][&#39;formats&#39;][&#39;basic_html&#39;])) {&#10;    $settings[&#39;editor&#39;][&#39;formats&#39;][&#39;basic_html&#39;][&#39;editor&#39;] = &#39;MyDifferentEditor&#39;;&#10;    $settings[&#39;editor&#39;][&#39;formats&#39;][&#39;basic_html&#39;][&#39;editorSettings&#39;][&#39;buttons&#39;] = array(&#39;strong&#39;, &#39;italic&#39;, &#39;underline&#39;);&#10;  }&#10;  $END$&#10;}" description="hook_editor_js_settings_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_editor_js_settings_alter" value="/**&#10; * Implements hook_editor_js_settings_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_editor_js_settings_alter(array &amp;$settings) {&#10;  if (isset($settings[&#39;editor&#39;][&#39;formats&#39;][&#39;basic_html&#39;])) {&#10;    $settings[&#39;editor&#39;][&#39;formats&#39;][&#39;basic_html&#39;][&#39;editor&#39;] = &#39;MyDifferentEditor&#39;;&#10;    $settings[&#39;editor&#39;][&#39;formats&#39;][&#39;basic_html&#39;][&#39;editorSettings&#39;][&#39;buttons&#39;] = array(&#39;strong&#39;, &#39;italic&#39;, &#39;underline&#39;);&#10;  }&#10;  $END$&#10;}" description="hook_editor_js_settings_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_editor_xss_filter_alter" value="/**&#10; * Implements hook_editor_xss_filter_alter().&#10; *&#10; * Modifies the text editor XSS filter that will used for the given text format.&#10; *&#10; * Is only called when an EditorXssFilter will effectively be used; this hook&#10; * does not allow one to alter that decision.&#10; *&#10; * @param string &amp;$editor_xss_filter_class&#10; *   The text editor XSS filter class that will be used.&#10; * @param \Drupal\filter\FilterFormatInterface $format&#10; *   The text format configuration entity. Provides context based upon which&#10; *   one may want to adjust the filtering.&#10; * @param \Drupal\filter\FilterFormatInterface $original_format|null&#10; *   (optional) The original text format configuration entity (when switching&#10; *   text formats/editors). Also provides context based upon which one may want&#10; *   to adjust the filtering.&#10; *&#10; * @see \Drupal\editor\EditorXssFilterInterface&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_editor_xss_filter_alter(&amp;$editor_xss_filter_class, FilterFormatInterface $format, FilterFormatInterface $original_format = NULL) {&#10;  $filters = $format-&#62;filters()-&#62;getAll();&#10;  if (isset($filters[&#39;filter_wysiwyg&#39;]) &amp;&amp; $filters[&#39;filter_wysiwyg&#39;]-&#62;status) {&#10;    $editor_xss_filter_class = &#39;\Drupal\filter_wysiwyg\EditorXssFilter\WysiwygFilter&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_editor_xss_filter_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_editor_xss_filter_alter" value="/**&#10; * Implements hook_editor_xss_filter_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_editor_xss_filter_alter(&amp;$editor_xss_filter_class, FilterFormatInterface $format, FilterFormatInterface $original_format = NULL) {&#10;  $filters = $format-&#62;filters()-&#62;getAll();&#10;  if (isset($filters[&#39;filter_wysiwyg&#39;]) &amp;&amp; $filters[&#39;filter_wysiwyg&#39;]-&#62;status) {&#10;    $editor_xss_filter_class = &#39;\Drupal\filter_wysiwyg\EditorXssFilter\WysiwygFilter&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_editor_xss_filter_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_comment_links_alter" value="/**&#10; * Implements hook_comment_links_alter().&#10; *&#10; * Alter the links of a comment.&#10; *&#10; * @param array &amp;$links&#10; *   A renderable array representing the comment links.&#10; * @param \Drupal\comment\CommentInterface $entity&#10; *   The comment being rendered.&#10; * @param array &amp;$context&#10; *   Various aspects of the context in which the comment links are going to be&#10; *   displayed, with the following keys:&#10; *   - &#39;view_mode&#39;: the view mode in which the comment is being viewed&#10; *   - &#39;langcode&#39;: the language in which the comment is being viewed&#10; *   - &#39;commented_entity&#39;: the entity to which the comment is attached&#10; *&#10; * @see \Drupal\comment\CommentViewBuilder::renderLinks()&#10; * @see \Drupal\comment\CommentViewBuilder::buildLinks()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_comment_links_alter(array &amp;$links, CommentInterface $entity, array &amp;$context) {&#10;  $links[&#39;mymodule&#39;] = array(&#10;    &#39;#theme&#39; =&#62; &#39;links__comment__mymodule&#39;,&#10;    &#39;#attributes&#39; =&#62; array(&#39;class&#39; =&#62; array(&#39;links&#39;, &#39;inline&#39;)),&#10;    &#39;#links&#39; =&#62; array(&#10;      &#39;comment-report&#39; =&#62; array(&#10;        &#39;title&#39; =&#62; t(&#39;Report&#39;),&#10;        &#39;url&#39; =&#62; Url::fromRoute(&#39;comment_test.report&#39;, [&#39;comment&#39; =&#62; $entity-&#62;id()], [&#39;query&#39; =&#62; [&#39;token&#39; =&#62; \Drupal::getContainer()-&#62;get(&#39;csrf_token&#39;)-&#62;get(&#34;comment/{$entity-&#62;id()}/report&#34;)]]),&#10;      ),&#10;    ),&#10;  );&#10;  $END$&#10;}" description="hook_comment_links_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_comment_links_alter" value="/**&#10; * Implements hook_comment_links_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_comment_links_alter(array &amp;$links, CommentInterface $entity, array &amp;$context) {&#10;  $links[&#39;mymodule&#39;] = array(&#10;    &#39;#theme&#39; =&#62; &#39;links__comment__mymodule&#39;,&#10;    &#39;#attributes&#39; =&#62; array(&#39;class&#39; =&#62; array(&#39;links&#39;, &#39;inline&#39;)),&#10;    &#39;#links&#39; =&#62; array(&#10;      &#39;comment-report&#39; =&#62; array(&#10;        &#39;title&#39; =&#62; t(&#39;Report&#39;),&#10;        &#39;url&#39; =&#62; Url::fromRoute(&#39;comment_test.report&#39;, [&#39;comment&#39; =&#62; $entity-&#62;id()], [&#39;query&#39; =&#62; [&#39;token&#39; =&#62; \Drupal::getContainer()-&#62;get(&#39;csrf_token&#39;)-&#62;get(&#34;comment/{$entity-&#62;id()}/report&#34;)]]),&#10;      ),&#10;    ),&#10;  );&#10;  $END$&#10;}" description="hook_comment_links_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_filter_info_alter" value="/**&#10; * Implements hook_filter_info_alter().&#10; *&#10; * Perform alterations on filter definitions.&#10; *&#10; * @param array $info&#10; *   Array of information on filters exposed by filter plugins.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_filter_info_alter(&amp;$info) {&#10;  // Alter the default settings of the URL filter provided by core.&#10;  $info[&#39;filter_url&#39;][&#39;default_settings&#39;] = array(&#10;    &#39;filter_url_length&#39; =&#62; 100,&#10;  );&#10;  $END$&#10;}" description="hook_filter_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_filter_info_alter" value="/**&#10; * Implements hook_filter_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_filter_info_alter(&amp;$info) {&#10;  // Alter the default settings of the URL filter provided by core.&#10;  $info[&#39;filter_url&#39;][&#39;default_settings&#39;] = array(&#10;    &#39;filter_url_length&#39; =&#62; 100,&#10;  );&#10;  $END$&#10;}" description="hook_filter_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_filter_secure_image_alter" value="/**&#10; * Implements hook_filter_secure_image_alter().&#10; *&#10; * Alters images with an invalid source.&#10; *&#10; * When the &#39;Restrict images to this site&#39; filter is enabled, any images that&#10; * are not hosted on the site will be passed through this hook, most commonly to&#10; * replace the invalid image with an error indicator.&#10; *&#10; * @param DOMElement $image&#10; *   An IMG node to format, parsed from the filtered text.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_filter_secure_image_alter(&amp;$image) {&#10;  // Turn an invalid image into an error indicator.&#10;  $image-&#62;setAttribute(&#39;src&#39;, base_path() . &#39;core/misc/icons/e32700/error.svg&#39;);&#10;  $image-&#62;setAttribute(&#39;alt&#39;, t(&#39;Image removed.&#39;));&#10;  $image-&#62;setAttribute(&#39;title&#39;, t(&#39;This image has been removed. For security reasons, only images from the local domain are allowed.&#39;));&#10;&#10;  // Add a CSS class to aid in styling.&#10;  $class = ($image-&#62;getAttribute(&#39;class&#39;) ? trim($image-&#62;getAttribute(&#39;class&#39;)) . &#39; &#39; : &#39;&#39;);&#10;  $class .= &#39;filter-image-invalid&#39;;&#10;  $image-&#62;setAttribute(&#39;class&#39;, $class);&#10;  $END$&#10;}" description="hook_filter_secure_image_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_filter_secure_image_alter" value="/**&#10; * Implements hook_filter_secure_image_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_filter_secure_image_alter(&amp;$image) {&#10;  // Turn an invalid image into an error indicator.&#10;  $image-&#62;setAttribute(&#39;src&#39;, base_path() . &#39;core/misc/icons/e32700/error.svg&#39;);&#10;  $image-&#62;setAttribute(&#39;alt&#39;, t(&#39;Image removed.&#39;));&#10;  $image-&#62;setAttribute(&#39;title&#39;, t(&#39;This image has been removed. For security reasons, only images from the local domain are allowed.&#39;));&#10;&#10;  // Add a CSS class to aid in styling.&#10;  $class = ($image-&#62;getAttribute(&#39;class&#39;) ? trim($image-&#62;getAttribute(&#39;class&#39;)) . &#39; &#39; : &#39;&#39;);&#10;  $class .= &#39;filter-image-invalid&#39;;&#10;  $image-&#62;setAttribute(&#39;class&#39;, $class);&#10;  $END$&#10;}" description="hook_filter_secure_image_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_filter_format_disable" value="/**&#10; * Implements hook_filter_format_disable().&#10; *&#10; * Perform actions when a text format has been disabled.&#10; *&#10; * @param \Drupal\filter\FilterFormatInterface $format&#10; *   The format object of the format being disabled.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_filter_format_disable($format) {&#10;  mymodule_cache_rebuild();&#10;  $END$&#10;}" description="hook_filter_format_disable" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_filter_format_disable" value="/**&#10; * Implements hook_filter_format_disable().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_filter_format_disable($format) {&#10;  mymodule_cache_rebuild();&#10;  $END$&#10;}" description="hook_filter_format_disable" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_search_preprocess" value="/**&#10; * Implements hook_search_preprocess().&#10; *&#10; * Preprocess text for search.&#10; *&#10; * This hook is called to preprocess both the text added to the search index&#10; * and the keywords users have submitted for searching. The same processing&#10; * needs to be applied to both so that searches will find matches.&#10; *&#10; * Possible uses:&#10; * - Adding spaces between words of Chinese or Japanese text.&#10; * - Stemming words down to their root words to allow matches between, for&#10; *   instance, walk, walked, walking, and walks in searching.&#10; * - Expanding abbreviations and acronyms that occur in text.&#10; *&#10; * @param string $text&#10; *   The text to preprocess. This is a single piece of plain text extracted&#10; *   from between two HTML tags or from the search query. It will not contain&#10; *   any HTML entities or HTML tags.&#10; * @param string|null $langcode&#10; *   The language code for the language the text is in, if known. When this hook&#10; *   is invoked during search indexing, the language will most likely be known&#10; *   and passed in. This is left up to the search plugin;&#10; *   \Drupal\node\Plugin\Search\NodeSearch does pass in the node&#10; *   language. However, when this hook is invoked during searching, in order to&#10; *   let a module apply the same preprocessing to the search keywords and&#10; *   indexed text so they will match, $langcode will be NULL. A hook&#10; *   implementation can call the getCurrentLanguage() method on the&#10; *   &#39;language_manager&#39; service to determine the current language and act&#10; *   accordingly.&#10; *&#10; * @return string&#10; *   The text after preprocessing. Note that if your module decides not to&#10; *   alter the text, it should return the original text. Also, after&#10; *   preprocessing, words in the text should be separated by a space.&#10; *&#10; * @ingroup search&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_search_preprocess($text, $langcode = NULL) {&#10;  // If the language is not set, get it from the language manager.&#10;  if (!isset($langcode)) {&#10;    $langcode = \Drupal::languageManager()-&#62;getCurrentLanguage()-&#62;getId();&#10;  }&#10;&#10;  // If the langcode is set to &#39;en&#39; then add variations of the word &#34;testing&#34;&#10;  // which can also be found during English language searches.&#10;  if ($langcode == &#39;en&#39;) {&#10;    // Add the alternate verb forms for the word &#34;testing&#34;.&#10;    if ($text == &#39;we are testing&#39;) {&#10;      $text .= &#39; test tested&#39;;&#10;    }&#10;  }&#10;&#10;  return $text;&#10;  $END$&#10;}" description="hook_search_preprocess" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_search_preprocess" value="/**&#10; * Implements hook_search_preprocess().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_search_preprocess($text, $langcode = NULL) {&#10;  // If the language is not set, get it from the language manager.&#10;  if (!isset($langcode)) {&#10;    $langcode = \Drupal::languageManager()-&#62;getCurrentLanguage()-&#62;getId();&#10;  }&#10;&#10;  // If the langcode is set to &#39;en&#39; then add variations of the word &#34;testing&#34;&#10;  // which can also be found during English language searches.&#10;  if ($langcode == &#39;en&#39;) {&#10;    // Add the alternate verb forms for the word &#34;testing&#34;.&#10;    if ($text == &#39;we are testing&#39;) {&#10;      $text .= &#39; test tested&#39;;&#10;    }&#10;  }&#10;&#10;  return $text;&#10;  $END$&#10;}" description="hook_search_preprocess" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_search_plugin_alter" value="/**&#10; * Implements hook_search_plugin_alter().&#10; *&#10; * Alter search plugin definitions.&#10; *&#10; * @param array $definitions&#10; *   The array of search plugin definitions, keyed by plugin ID.&#10; *&#10; * @see \Drupal\search\Annotation\SearchPlugin&#10; * @see \Drupal\search\SearchPluginManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_search_plugin_alter(array &amp;$definitions) {&#10;  if (isset($definitions[&#39;node_search&#39;])) {&#10;    $definitions[&#39;node_search&#39;][&#39;title&#39;] = t(&#39;Nodes&#39;);&#10;  }&#10;  $END$&#10;}" description="hook_search_plugin_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_search_plugin_alter" value="/**&#10; * Implements hook_search_plugin_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_search_plugin_alter(array &amp;$definitions) {&#10;  if (isset($definitions[&#39;node_search&#39;])) {&#10;    $definitions[&#39;node_search&#39;][&#39;title&#39;] = t(&#39;Nodes&#39;);&#10;  }&#10;  $END$&#10;}" description="hook_search_plugin_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_node_grants" value="/**&#10; * Implements hook_node_grants().&#10; *&#10; * Inform the node access system what permissions the user has.&#10; *&#10; * This hook is for implementation by node access modules. In this hook,&#10; * the module grants a user different &#34;grant IDs&#34; within one or more&#10; * &#34;realms&#34;. In hook_node_access_records(), the realms and grant IDs are&#10; * associated with permission to view, edit, and delete individual nodes.&#10; *&#10; * The realms and grant IDs can be arbitrarily defined by your node access&#10; * module; it is common to use role IDs as grant IDs, but that is not required.&#10; * Your module could instead maintain its own list of users, where each list has&#10; * an ID. In that case, the return value of this hook would be an array of the&#10; * list IDs that this user is a member of.&#10; *&#10; * A node access module may implement as many realms as necessary to properly&#10; * define the access privileges for the nodes. Note that the system makes no&#10; * distinction between published and unpublished nodes. It is the module&#39;s&#10; * responsibility to provide appropriate realms to limit access to unpublished&#10; * content.&#10; *&#10; * Node access records are stored in the {node_access} table and define which&#10; * grants are required to access a node. There is a special case for the view&#10; * operation -- a record with node ID 0 corresponds to a &#34;view all&#34; grant for&#10; * the realm and grant ID of that record. If there are no node access modules&#10; * enabled, the core node module adds a node ID 0 record for realm &#39;all&#39;. Node&#10; * access modules can also grant &#34;view all&#34; permission on their custom realms;&#10; * for example, a module could create a record in {node_access} with:&#10; * @code&#10; * $record = array(&#10; *   &#39;nid&#39; =&#62; 0,&#10; *   &#39;gid&#39; =&#62; 888,&#10; *   &#39;realm&#39; =&#62; &#39;example_realm&#39;,&#10; *   &#39;grant_view&#39; =&#62; 1,&#10; *   &#39;grant_update&#39; =&#62; 0,&#10; *   &#39;grant_delete&#39; =&#62; 0,&#10; * );&#10; * db_insert(&#39;node_access&#39;)-&#62;fields($record)-&#62;execute();&#10; * @endcode&#10; * And then in its hook_node_grants() implementation, it would need to return:&#10; * @code&#10; * if ($op == &#39;view&#39;) {&#10; *   $grants[&#39;example_realm&#39;] = array(888);&#10; * }&#10; * @endcode&#10; * If you decide to do this, be aware that the node_access_rebuild() function&#10; * will erase any node ID 0 entry when it is called, so you will need to make&#10; * sure to restore your {node_access} record after node_access_rebuild() is&#10; * called.&#10; *&#10; * For a detailed example, see node_access_example.module.&#10; *&#10; * @param \Drupal\Core\Session\AccountInterface $account&#10; *   The account object whose grants are requested.&#10; * @param string $op&#10; *   The node operation to be performed, such as &#39;view&#39;, &#39;update&#39;, or &#39;delete&#39;.&#10; *&#10; * @return array&#10; *   An array whose keys are &#34;realms&#34; of grants, and whose values are arrays of&#10; *   the grant IDs within this realm that this user is being granted.&#10; *&#10; * @see node_access_view_all_nodes()&#10; * @see node_access_rebuild()&#10; * @ingroup node_access&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_node_grants(\Drupal\Core\Session\AccountInterface $account, $op) {&#10;  if ($account-&#62;hasPermission(&#39;access private content&#39;)) {&#10;    $grants[&#39;example&#39;] = array(1);&#10;  }&#10;  if ($account-&#62;id()) {&#10;    $grants[&#39;example_author&#39;] = array($account-&#62;id());&#10;  }&#10;  return $grants;&#10;  $END$&#10;}" description="hook_node_grants" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_node_grants" value="/**&#10; * Implements hook_node_grants().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_node_grants(\Drupal\Core\Session\AccountInterface $account, $op) {&#10;  if ($account-&#62;hasPermission(&#39;access private content&#39;)) {&#10;    $grants[&#39;example&#39;] = array(1);&#10;  }&#10;  if ($account-&#62;id()) {&#10;    $grants[&#39;example_author&#39;] = array($account-&#62;id());&#10;  }&#10;  return $grants;&#10;  $END$&#10;}" description="hook_node_grants" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_node_access_records" value="/**&#10; * Implements hook_node_access_records().&#10; *&#10; * Set permissions for a node to be written to the database.&#10; *&#10; * When a node is saved, a module implementing hook_node_access_records() will&#10; * be asked if it is interested in the access permissions for a node. If it is&#10; * interested, it must respond with an array of permissions arrays for that&#10; * node.&#10; *&#10; * Node access grants apply regardless of the published or unpublished status&#10; * of the node. Implementations must make sure not to grant access to&#10; * unpublished nodes if they don&#39;t want to change the standard access control&#10; * behavior. Your module may need to create a separate access realm to handle&#10; * access to unpublished nodes.&#10; *&#10; * Note that the grant values in the return value from your hook must be&#10; * integers and not boolean TRUE and FALSE.&#10; *&#10; * Each permissions item in the array is an array with the following elements:&#10; * - &#39;realm&#39;: The name of a realm that the module has defined in&#10; *   hook_node_grants().&#10; * - &#39;gid&#39;: A &#39;grant ID&#39; from hook_node_grants().&#10; * - &#39;grant_view&#39;: If set to 1 a user that has been identified as a member&#10; *   of this gid within this realm can view this node. This should usually be&#10; *   set to $node-&#62;isPublished(). Failure to do so may expose unpublished content&#10; *   to some users.&#10; * - &#39;grant_update&#39;: If set to 1 a user that has been identified as a member&#10; *   of this gid within this realm can edit this node.&#10; * - &#39;grant_delete&#39;: If set to 1 a user that has been identified as a member&#10; *   of this gid within this realm can delete this node.&#10; * - langcode: (optional) The language code of a specific translation of the&#10; *   node, if any. Modules may add this key to grant different access to&#10; *   different translations of a node, such that (e.g.) a particular group is&#10; *   granted access to edit the Catalan version of the node, but not the&#10; *   Hungarian version. If no value is provided, the langcode is set&#10; *   automatically from the $node parameter and the node&#39;s original language (if&#10; *   specified) is used as a fallback. Only specify multiple grant records with&#10; *   different languages for a node if the site has those languages configured.&#10; *&#10; * A &#34;deny all&#34; grant may be used to deny all access to a particular node or&#10; * node translation:&#10; * @code&#10; * $grants[] = array(&#10; *   &#39;realm&#39; =&#62; &#39;all&#39;,&#10; *   &#39;gid&#39; =&#62; 0,&#10; *   &#39;grant_view&#39; =&#62; 0,&#10; *   &#39;grant_update&#39; =&#62; 0,&#10; *   &#39;grant_delete&#39; =&#62; 0,&#10; *   &#39;langcode&#39; =&#62; &#39;ca&#39;,&#10; * );&#10; * @endcode&#10; * Note that another module node access module could override this by granting&#10; * access to one or more nodes, since grants are additive. To enforce that&#10; * access is denied in a particular case, use hook_node_access_records_alter().&#10; * Also note that a deny all is not written to the database; denies are&#10; * implicit.&#10; *&#10; * @param \Drupal\node\NodeInterface $node&#10; *   The node that has just been saved.&#10; *&#10; * @return&#10; *   An array of grants as defined above.&#10; *&#10; * @see hook_node_access_records_alter()&#10; * @ingroup node_access&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_node_access_records(\Drupal\node\NodeInterface $node) {&#10;  // We only care about the node if it has been marked private. If not, it is&#10;  // treated just like any other node and we completely ignore it.&#10;  if ($node-&#62;private-&#62;value) {&#10;    $grants = array();&#10;    // Only published Catalan translations of private nodes should be viewable&#10;    // to all users. If we fail to check $node-&#62;isPublished(), all users would be able&#10;    // to view an unpublished node.&#10;    if ($node-&#62;isPublished()) {&#10;      $grants[] = array(&#10;        &#39;realm&#39; =&#62; &#39;example&#39;,&#10;        &#39;gid&#39; =&#62; 1,&#10;        &#39;grant_view&#39; =&#62; 1,&#10;        &#39;grant_update&#39; =&#62; 0,&#10;        &#39;grant_delete&#39; =&#62; 0,&#10;        &#39;langcode&#39; =&#62; &#39;ca&#39;&#10;      );&#10;    }&#10;    // For the example_author array, the GID is equivalent to a UID, which&#10;    // means there are many groups of just 1 user.&#10;    // Note that an author can always view his or her nodes, even if they&#10;    // have status unpublished.&#10;    if ($node-&#62;getOwnerId()) {&#10;      $grants[] = array(&#10;        &#39;realm&#39; =&#62; &#39;example_author&#39;,&#10;        &#39;gid&#39; =&#62; $node-&#62;getOwnerId(),&#10;        &#39;grant_view&#39; =&#62; 1,&#10;        &#39;grant_update&#39; =&#62; 1,&#10;        &#39;grant_delete&#39; =&#62; 1,&#10;        &#39;langcode&#39; =&#62; &#39;ca&#39;&#10;      );&#10;    }&#10;&#10;    return $grants;&#10;  }&#10;  $END$&#10;}" description="hook_node_access_records" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_node_access_records" value="/**&#10; * Implements hook_node_access_records().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_node_access_records(\Drupal\node\NodeInterface $node) {&#10;  // We only care about the node if it has been marked private. If not, it is&#10;  // treated just like any other node and we completely ignore it.&#10;  if ($node-&#62;private-&#62;value) {&#10;    $grants = array();&#10;    // Only published Catalan translations of private nodes should be viewable&#10;    // to all users. If we fail to check $node-&#62;isPublished(), all users would be able&#10;    // to view an unpublished node.&#10;    if ($node-&#62;isPublished()) {&#10;      $grants[] = array(&#10;        &#39;realm&#39; =&#62; &#39;example&#39;,&#10;        &#39;gid&#39; =&#62; 1,&#10;        &#39;grant_view&#39; =&#62; 1,&#10;        &#39;grant_update&#39; =&#62; 0,&#10;        &#39;grant_delete&#39; =&#62; 0,&#10;        &#39;langcode&#39; =&#62; &#39;ca&#39;&#10;      );&#10;    }&#10;    // For the example_author array, the GID is equivalent to a UID, which&#10;    // means there are many groups of just 1 user.&#10;    // Note that an author can always view his or her nodes, even if they&#10;    // have status unpublished.&#10;    if ($node-&#62;getOwnerId()) {&#10;      $grants[] = array(&#10;        &#39;realm&#39; =&#62; &#39;example_author&#39;,&#10;        &#39;gid&#39; =&#62; $node-&#62;getOwnerId(),&#10;        &#39;grant_view&#39; =&#62; 1,&#10;        &#39;grant_update&#39; =&#62; 1,&#10;        &#39;grant_delete&#39; =&#62; 1,&#10;        &#39;langcode&#39; =&#62; &#39;ca&#39;&#10;      );&#10;    }&#10;&#10;    return $grants;&#10;  }&#10;  $END$&#10;}" description="hook_node_access_records" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_node_access_records_alter" value="/**&#10; * Implements hook_node_access_records_alter().&#10; *&#10; * Alter permissions for a node before it is written to the database.&#10; *&#10; * Node access modules establish rules for user access to content. Node access&#10; * records are stored in the {node_access} table and define which permissions&#10; * are required to access a node. This hook is invoked after node access modules&#10; * returned their requirements via hook_node_access_records(); doing so allows&#10; * modules to modify the $grants array by reference before it is stored, so&#10; * custom or advanced business logic can be applied.&#10; *&#10; * Upon viewing, editing or deleting a node, hook_node_grants() builds a&#10; * permissions array that is compared against the stored access records. The&#10; * user must have one or more matching permissions in order to complete the&#10; * requested operation.&#10; *&#10; * A module may deny all access to a node by setting $grants to an empty array.&#10; *&#10; * The preferred use of this hook is in a module that bridges multiple node&#10; * access modules with a configurable behavior, as shown in the example with the&#10; * &#39;is_preview&#39; field.&#10; *&#10; * @param array $grants&#10; *   The $grants array returned by hook_node_access_records().&#10; * @param \Drupal\node\NodeInterface $node&#10; *   The node for which the grants were acquired.&#10; *&#10; * @see hook_node_access_records()&#10; * @see hook_node_grants()&#10; * @see hook_node_grants_alter()&#10; * @ingroup node_access&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_node_access_records_alter(&amp;$grants, Drupal\node\NodeInterface $node) {&#10;  // Our module allows editors to mark specific articles with the &#39;is_preview&#39;&#10;  // field. If the node being saved has a TRUE value for that field, then only&#10;  // our grants are retained, and other grants are removed. Doing so ensures&#10;  // that our rules are enforced no matter what priority other grants are given.&#10;  if ($node-&#62;is_preview) {&#10;    // Our module grants are set in $grants[&#39;example&#39;].&#10;    $temp = $grants[&#39;example&#39;];&#10;    // Now remove all module grants but our own.&#10;    $grants = array(&#39;example&#39; =&#62; $temp);&#10;  }&#10;  $END$&#10;}" description="hook_node_access_records_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_node_access_records_alter" value="/**&#10; * Implements hook_node_access_records_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_node_access_records_alter(&amp;$grants, Drupal\node\NodeInterface $node) {&#10;  // Our module allows editors to mark specific articles with the &#39;is_preview&#39;&#10;  // field. If the node being saved has a TRUE value for that field, then only&#10;  // our grants are retained, and other grants are removed. Doing so ensures&#10;  // that our rules are enforced no matter what priority other grants are given.&#10;  if ($node-&#62;is_preview) {&#10;    // Our module grants are set in $grants[&#39;example&#39;].&#10;    $temp = $grants[&#39;example&#39;];&#10;    // Now remove all module grants but our own.&#10;    $grants = array(&#39;example&#39; =&#62; $temp);&#10;  }&#10;  $END$&#10;}" description="hook_node_access_records_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_node_grants_alter" value="/**&#10; * Implements hook_node_grants_alter().&#10; *&#10; * Alter user access rules when trying to view, edit or delete a node.&#10; *&#10; * Node access modules establish rules for user access to content.&#10; * hook_node_grants() defines permissions for a user to view, edit or delete&#10; * nodes by building a $grants array that indicates the permissions assigned to&#10; * the user by each node access module. This hook is called to allow modules to&#10; * modify the $grants array by reference, so the interaction of multiple node&#10; * access modules can be altered or advanced business logic can be applied.&#10; *&#10; * The resulting grants are then checked against the records stored in the&#10; * {node_access} table to determine if the operation may be completed.&#10; *&#10; * A module may deny all access to a user by setting $grants to an empty array.&#10; *&#10; * Developers may use this hook to either add additional grants to a user or to&#10; * remove existing grants. These rules are typically based on either the&#10; * permissions assigned to a user role, or specific attributes of a user&#10; * account.&#10; *&#10; * @param array $grants&#10; *   The $grants array returned by hook_node_grants().&#10; * @param \Drupal\Core\Session\AccountInterface $account&#10; *   The account requesting access to content.&#10; * @param string $op&#10; *   The operation being performed, &#39;view&#39;, &#39;update&#39; or &#39;delete&#39;.&#10; *&#10; * @see hook_node_grants()&#10; * @see hook_node_access_records()&#10; * @see hook_node_access_records_alter()&#10; * @ingroup node_access&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_node_grants_alter(&amp;$grants, \Drupal\Core\Session\AccountInterface $account, $op) {&#10;  // Our sample module never allows certain roles to edit or delete&#10;  // content. Since some other node access modules might allow this&#10;  // permission, we expressly remove it by returning an empty $grants&#10;  // array for roles specified in our variable setting.&#10;&#10;  // Get our list of banned roles.&#10;  $restricted = \Drupal::config(&#39;example.settings&#39;)-&#62;get(&#39;restricted_roles&#39;);&#10;&#10;  if ($op != &#39;view&#39; &amp;&amp; !empty($restricted)) {&#10;    // Now check the roles for this account against the restrictions.&#10;    foreach ($account-&#62;getRoles() as $rid) {&#10;      if (in_array($rid, $restricted)) {&#10;        $grants = array();&#10;      }&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_node_grants_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_node_grants_alter" value="/**&#10; * Implements hook_node_grants_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_node_grants_alter(&amp;$grants, \Drupal\Core\Session\AccountInterface $account, $op) {&#10;  // Our sample module never allows certain roles to edit or delete&#10;  // content. Since some other node access modules might allow this&#10;  // permission, we expressly remove it by returning an empty $grants&#10;  // array for roles specified in our variable setting.&#10;&#10;  // Get our list of banned roles.&#10;  $restricted = \Drupal::config(&#39;example.settings&#39;)-&#62;get(&#39;restricted_roles&#39;);&#10;&#10;  if ($op != &#39;view&#39; &amp;&amp; !empty($restricted)) {&#10;    // Now check the roles for this account against the restrictions.&#10;    foreach ($account-&#62;getRoles() as $rid) {&#10;      if (in_array($rid, $restricted)) {&#10;        $grants = array();&#10;      }&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_node_grants_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_node_access" value="/**&#10; * Implements hook_node_access().&#10; *&#10; * Controls access to a node.&#10; *&#10; * Modules may implement this hook if they want to have a say in whether or not&#10; * a given user has access to perform a given operation on a node.&#10; *&#10; * The administrative account (user ID #1) always passes any access check, so&#10; * this hook is not called in that case. Users with the &#34;bypass node access&#34;&#10; * permission may always view and edit content through the administrative&#10; * interface.&#10; *&#10; * Note that not all modules will want to influence access on all node types. If&#10; * your module does not want to explicitly allow or forbid access, return an&#10; * AccessResultInterface object with neither isAllowed() nor isForbidden()&#10; * equaling TRUE. Blindly returning an object with isForbidden() equaling TRUE&#10; * will break other node access modules.&#10; *&#10; * Also note that this function isn&#39;t called for node listings (e.g., RSS feeds,&#10; * the default home page at path &#39;node&#39;, a recent content block, etc.) See&#10; * @link node_access Node access rights @endlink for a full explanation.&#10; *&#10; * @param \Drupal\node\NodeInterface|string $node&#10; *   Either a node entity or the machine name of the content type on which to&#10; *   perform the access check.&#10; * @param string $op&#10; *   The operation to be performed. Possible values:&#10; *   - &#34;create&#34;&#10; *   - &#34;delete&#34;&#10; *   - &#34;update&#34;&#10; *   - &#34;view&#34;&#10; * @param \Drupal\Core\Session\AccountInterface $account&#10; *   The user object to perform the access check operation on.&#10; *&#10; * @return \Drupal\Core\Access\AccessResultInterface&#10; *    The access result.&#10; *&#10; * @ingroup node_access&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_node_access(\Drupal\node\NodeInterface $node, $op, \Drupal\Core\Session\AccountInterface $account) {&#10;  $type = $node-&#62;bundle();&#10;&#10;  switch ($op) {&#10;    case &#39;create&#39;:&#10;      return AccessResult::allowedIfHasPermission($account, &#39;create &#39; . $type . &#39; content&#39;);&#10;&#10;    case &#39;update&#39;:&#10;      if ($account-&#62;hasPermission(&#39;edit any &#39; . $type . &#39; content&#39;, $account)) {&#10;        return AccessResult::allowed()-&#62;cachePerPermissions();&#10;      }&#10;      else {&#10;        return AccessResult::allowedIf($account-&#62;hasPermission(&#39;edit own &#39; . $type . &#39; content&#39;, $account) &amp;&amp; ($account-&#62;id() == $node-&#62;getOwnerId()))-&#62;cachePerPermissions()-&#62;cachePerUser()-&#62;addCacheableDependency($node);&#10;      }&#10;&#10;    case &#39;delete&#39;:&#10;      if ($account-&#62;hasPermission(&#39;delete any &#39; . $type . &#39; content&#39;, $account)) {&#10;        return AccessResult::allowed()-&#62;cachePerPermissions();&#10;      }&#10;      else {&#10;        return AccessResult::allowedIf($account-&#62;hasPermission(&#39;delete own &#39; . $type . &#39; content&#39;, $account) &amp;&amp; ($account-&#62;id() == $node-&#62;getOwnerId()))-&#62;cachePerPermissions()-&#62;cachePerUser()-&#62;addCacheableDependency($node);&#10;      }&#10;&#10;    default:&#10;      // No opinion.&#10;      return AccessResult::neutral();&#10;  }&#10;  $END$&#10;}" description="hook_node_access" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_node_access" value="/**&#10; * Implements hook_node_access().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_node_access(\Drupal\node\NodeInterface $node, $op, \Drupal\Core\Session\AccountInterface $account) {&#10;  $type = $node-&#62;bundle();&#10;&#10;  switch ($op) {&#10;    case &#39;create&#39;:&#10;      return AccessResult::allowedIfHasPermission($account, &#39;create &#39; . $type . &#39; content&#39;);&#10;&#10;    case &#39;update&#39;:&#10;      if ($account-&#62;hasPermission(&#39;edit any &#39; . $type . &#39; content&#39;, $account)) {&#10;        return AccessResult::allowed()-&#62;cachePerPermissions();&#10;      }&#10;      else {&#10;        return AccessResult::allowedIf($account-&#62;hasPermission(&#39;edit own &#39; . $type . &#39; content&#39;, $account) &amp;&amp; ($account-&#62;id() == $node-&#62;getOwnerId()))-&#62;cachePerPermissions()-&#62;cachePerUser()-&#62;addCacheableDependency($node);&#10;      }&#10;&#10;    case &#39;delete&#39;:&#10;      if ($account-&#62;hasPermission(&#39;delete any &#39; . $type . &#39; content&#39;, $account)) {&#10;        return AccessResult::allowed()-&#62;cachePerPermissions();&#10;      }&#10;      else {&#10;        return AccessResult::allowedIf($account-&#62;hasPermission(&#39;delete own &#39; . $type . &#39; content&#39;, $account) &amp;&amp; ($account-&#62;id() == $node-&#62;getOwnerId()))-&#62;cachePerPermissions()-&#62;cachePerUser()-&#62;addCacheableDependency($node);&#10;      }&#10;&#10;    default:&#10;      // No opinion.&#10;      return AccessResult::neutral();&#10;  }&#10;  $END$&#10;}" description="hook_node_access" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_node_search_result" value="/**&#10; * Implements hook_node_search_result().&#10; *&#10; * Act on a node being displayed as a search result.&#10; *&#10; * This hook is invoked from the node search plugin during search execution,&#10; * after loading and rendering the node.&#10; *&#10; * @param \Drupal\node\NodeInterface $node&#10; *   The node being displayed in a search result.&#10; *&#10; * @return array&#10; *   Extra information to be displayed with search result. This information&#10; *   should be presented as an associative array. It will be concatenated with&#10; *   the post information (last updated, author) in the default search result&#10; *   theming.&#10; *&#10; * @see template_preprocess_search_result()&#10; * @see search-result.html.twig&#10; *&#10; * @ingroup entity_crud&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_node_search_result(\Drupal\node\NodeInterface $node) {&#10;  $rating = db_query(&#39;SELECT SUM(points) FROM {my_rating} WHERE nid = :nid&#39;, array(&#39;nid&#39; =&#62; $node-&#62;id()))-&#62;fetchField();&#10;  return array(&#39;rating&#39; =&#62; \Drupal::translation()-&#62;formatPlural($rating, &#39;1 point&#39;, &#39;@count points&#39;));&#10;  $END$&#10;}" description="hook_node_search_result" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_node_search_result" value="/**&#10; * Implements hook_node_search_result().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_node_search_result(\Drupal\node\NodeInterface $node) {&#10;  $rating = db_query(&#39;SELECT SUM(points) FROM {my_rating} WHERE nid = :nid&#39;, array(&#39;nid&#39; =&#62; $node-&#62;id()))-&#62;fetchField();&#10;  return array(&#39;rating&#39; =&#62; \Drupal::translation()-&#62;formatPlural($rating, &#39;1 point&#39;, &#39;@count points&#39;));&#10;  $END$&#10;}" description="hook_node_search_result" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_node_update_index" value="/**&#10; * Implements hook_node_update_index().&#10; *&#10; * Act on a node being indexed for searching.&#10; *&#10; * This hook is invoked during search indexing, after loading, and after the&#10; * result of rendering is added as $node-&#62;rendered to the node object.&#10; *&#10; * @param \Drupal\node\NodeInterface $node&#10; *   The node being indexed.&#10; *&#10; * @return string&#10; *   Additional node information to be indexed.&#10; *&#10; * @ingroup entity_crud&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_node_update_index(\Drupal\node\NodeInterface $node) {&#10;  $text = &#39;&#39;;&#10;  $ratings = db_query(&#39;SELECT title, description FROM {my_ratings} WHERE nid = :nid&#39;, array(&#39;:nid&#39; =&#62; $node-&#62;id()));&#10;  foreach ($ratings as $rating) {&#10;    $text .= &#39;&#60;h2&#62;&#39; . Html::escape($rating-&#62;title) . &#39;&#60;/h2&#62;&#39; . Xss::filter($rating-&#62;description);&#10;  }&#10;  return $text;&#10;  $END$&#10;}" description="hook_node_update_index" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_node_update_index" value="/**&#10; * Implements hook_node_update_index().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_node_update_index(\Drupal\node\NodeInterface $node) {&#10;  $text = &#39;&#39;;&#10;  $ratings = db_query(&#39;SELECT title, description FROM {my_ratings} WHERE nid = :nid&#39;, array(&#39;:nid&#39; =&#62; $node-&#62;id()));&#10;  foreach ($ratings as $rating) {&#10;    $text .= &#39;&#60;h2&#62;&#39; . Html::escape($rating-&#62;title) . &#39;&#60;/h2&#62;&#39; . Xss::filter($rating-&#62;description);&#10;  }&#10;  return $text;&#10;  $END$&#10;}" description="hook_node_update_index" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ranking" value="/**&#10; * Implements hook_ranking().&#10; *&#10; * Provide additional methods of scoring for core search results for nodes.&#10; *&#10; * A node&#39;s search score is used to rank it among other nodes matched by the&#10; * search, with the highest-ranked nodes appearing first in the search listing.&#10; *&#10; * For example, a module allowing users to vote on content could expose an&#10; * option to allow search results&#39; rankings to be influenced by the average&#10; * voting score of a node.&#10; *&#10; * All scoring mechanisms are provided as options to site administrators, and&#10; * may be tweaked based on individual sites or disabled altogether if they do&#10; * not make sense. Individual scoring mechanisms, if enabled, are assigned a&#10; * weight from 1 to 10. The weight represents the factor of magnification of&#10; * the ranking mechanism, with higher-weighted ranking mechanisms having more&#10; * influence. In order for the weight system to work, each scoring mechanism&#10; * must return a value between 0 and 1 for every node. That value is then&#10; * multiplied by the administrator-assigned weight for the ranking mechanism,&#10; * and then the weighted scores from all ranking mechanisms are added, which&#10; * brings about the same result as a weighted average.&#10; *&#10; * @return array&#10; *   An associative array of ranking data. The keys should be strings,&#10; *   corresponding to the internal name of the ranking mechanism, such as&#10; *   &#39;recent&#39;, or &#39;comments&#39;. The values should be arrays themselves, with the&#10; *   following keys available:&#10; *   - title: (required) The human readable name of the ranking mechanism.&#10; *   - join: (optional) An array with information to join any additional&#10; *     necessary table. This is not necessary if the table required is already&#10; *     joined to by the base query, such as for the {node} table. Other tables&#10; *     should use the full table name as an alias to avoid naming collisions.&#10; *   - score: (required) The part of a query string to calculate the score for&#10; *     the ranking mechanism based on values in the database. This does not need&#10; *     to be wrapped in parentheses, as it will be done automatically; it also&#10; *     does not need to take the weighted system into account, as it will be&#10; *     done automatically. It does, however, need to calculate a decimal between&#10; *     0 and 1; be careful not to cast the entire score to an integer by&#10; *     inadvertently introducing a variable argument.&#10; *   - arguments: (optional) If any arguments are required for the score, they&#10; *     can be specified in an array here.&#10; *&#10; * @ingroup entity_crud&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ranking() {&#10;  // If voting is disabled, we can avoid returning the array, no hard feelings.&#10;  if (\Drupal::config(&#39;vote.settings&#39;)-&#62;get(&#39;node_enabled&#39;)) {&#10;    return array(&#10;      &#39;vote_average&#39; =&#62; array(&#10;        &#39;title&#39; =&#62; t(&#39;Average vote&#39;),&#10;        // Note that we use i.sid, the search index&#39;s search item id, rather than&#10;        // n.nid.&#10;        &#39;join&#39; =&#62; array(&#10;          &#39;type&#39; =&#62; &#39;LEFT&#39;,&#10;          &#39;table&#39; =&#62; &#39;vote_node_data&#39;,&#10;          &#39;alias&#39; =&#62; &#39;vote_node_data&#39;,&#10;          &#39;on&#39; =&#62; &#39;vote_node_data.nid = i.sid&#39;,&#10;        ),&#10;        // The highest possible score should be 1, and the lowest possible score,&#10;        // always 0, should be 0.&#10;        &#39;score&#39; =&#62; &#39;vote_node_data.average / CAST(%f AS DECIMAL)&#39;,&#10;        // Pass in the highest possible voting score as a decimal argument.&#10;        &#39;arguments&#39; =&#62; array(\Drupal::config(&#39;vote.settings&#39;)-&#62;get(&#39;score_max&#39;)),&#10;      ),&#10;    );&#10;  }&#10;  $END$&#10;}" description="hook_ranking" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ranking" value="/**&#10; * Implements hook_ranking().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ranking() {&#10;  // If voting is disabled, we can avoid returning the array, no hard feelings.&#10;  if (\Drupal::config(&#39;vote.settings&#39;)-&#62;get(&#39;node_enabled&#39;)) {&#10;    return array(&#10;      &#39;vote_average&#39; =&#62; array(&#10;        &#39;title&#39; =&#62; t(&#39;Average vote&#39;),&#10;        // Note that we use i.sid, the search index&#39;s search item id, rather than&#10;        // n.nid.&#10;        &#39;join&#39; =&#62; array(&#10;          &#39;type&#39; =&#62; &#39;LEFT&#39;,&#10;          &#39;table&#39; =&#62; &#39;vote_node_data&#39;,&#10;          &#39;alias&#39; =&#62; &#39;vote_node_data&#39;,&#10;          &#39;on&#39; =&#62; &#39;vote_node_data.nid = i.sid&#39;,&#10;        ),&#10;        // The highest possible score should be 1, and the lowest possible score,&#10;        // always 0, should be 0.&#10;        &#39;score&#39; =&#62; &#39;vote_node_data.average / CAST(%f AS DECIMAL)&#39;,&#10;        // Pass in the highest possible voting score as a decimal argument.&#10;        &#39;arguments&#39; =&#62; array(\Drupal::config(&#39;vote.settings&#39;)-&#62;get(&#39;score_max&#39;)),&#10;      ),&#10;    );&#10;  }&#10;  $END$&#10;}" description="hook_ranking" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_node_links_alter" value="/**&#10; * Implements hook_node_links_alter().&#10; *&#10; * Alter the links of a node.&#10; *&#10; * @param array &amp;$links&#10; *   A renderable array representing the node links.&#10; * @param \Drupal\node\NodeInterface $entity&#10; *   The node being rendered.&#10; * @param array &amp;$context&#10; *   Various aspects of the context in which the node links are going to be&#10; *   displayed, with the following keys:&#10; *   - &#39;view_mode&#39;: the view mode in which the node is being viewed&#10; *   - &#39;langcode&#39;: the language in which the node is being viewed&#10; *&#10; * @see \Drupal\node\NodeViewBuilder::renderLinks()&#10; * @see \Drupal\node\NodeViewBuilder::buildLinks()&#10; * @see entity_crud&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_node_links_alter(array &amp;$links, NodeInterface $entity, array &amp;$context) {&#10;  $links[&#39;mymodule&#39;] = array(&#10;    &#39;#theme&#39; =&#62; &#39;links__node__mymodule&#39;,&#10;    &#39;#attributes&#39; =&#62; array(&#39;class&#39; =&#62; array(&#39;links&#39;, &#39;inline&#39;)),&#10;    &#39;#links&#39; =&#62; array(&#10;      &#39;node-report&#39; =&#62; array(&#10;        &#39;title&#39; =&#62; t(&#39;Report&#39;),&#10;        &#39;url&#39; =&#62; Url::fromRoute(&#39;node_test.report&#39;, [&#39;node&#39; =&#62; $entity-&#62;id()], [&#39;query&#39; =&#62; [&#39;token&#39; =&#62; \Drupal::getContainer()-&#62;get(&#39;csrf_token&#39;)-&#62;get(&#34;node/{$entity-&#62;id()}/report&#34;)]]),&#10;      ),&#10;    ),&#10;  );&#10;  $END$&#10;}" description="hook_node_links_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_node_links_alter" value="/**&#10; * Implements hook_node_links_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_node_links_alter(array &amp;$links, NodeInterface $entity, array &amp;$context) {&#10;  $links[&#39;mymodule&#39;] = array(&#10;    &#39;#theme&#39; =&#62; &#39;links__node__mymodule&#39;,&#10;    &#39;#attributes&#39; =&#62; array(&#39;class&#39; =&#62; array(&#39;links&#39;, &#39;inline&#39;)),&#10;    &#39;#links&#39; =&#62; array(&#10;      &#39;node-report&#39; =&#62; array(&#10;        &#39;title&#39; =&#62; t(&#39;Report&#39;),&#10;        &#39;url&#39; =&#62; Url::fromRoute(&#39;node_test.report&#39;, [&#39;node&#39; =&#62; $entity-&#62;id()], [&#39;query&#39; =&#62; [&#39;token&#39; =&#62; \Drupal::getContainer()-&#62;get(&#39;csrf_token&#39;)-&#62;get(&#34;node/{$entity-&#62;id()}/report&#34;)]]),&#10;      ),&#10;    ),&#10;  );&#10;  $END$&#10;}" description="hook_node_links_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_tour_tips_alter" value="/**&#10; * Implements hook_tour_tips_alter().&#10; *&#10; * Allow modules to alter tour items before render.&#10; *&#10; * @param array $tour_tips&#10; *   Array of \Drupal\tour\TipPluginInterface items.&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The tour which contains the $tour_tips.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_tour_tips_alter(array &amp;$tour_tips, Drupal\Core\Entity\EntityInterface $entity) {&#10;  foreach ($tour_tips as $tour_tip) {&#10;    if ($tour_tip-&#62;get(&#39;id&#39;) == &#39;tour-code-test-1&#39;) {&#10;      $tour_tip-&#62;set(&#39;body&#39;, &#39;Altered by hook_tour_tips_alter&#39;);&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_tour_tips_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_tour_tips_alter" value="/**&#10; * Implements hook_tour_tips_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_tour_tips_alter(array &amp;$tour_tips, Drupal\Core\Entity\EntityInterface $entity) {&#10;  foreach ($tour_tips as $tour_tip) {&#10;    if ($tour_tip-&#62;get(&#39;id&#39;) == &#39;tour-code-test-1&#39;) {&#10;      $tour_tip-&#62;set(&#39;body&#39;, &#39;Altered by hook_tour_tips_alter&#39;);&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_tour_tips_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_tour_tips_info_alter" value="/**&#10; * Implements hook_tour_tips_info_alter().&#10; *&#10; * Allow modules to alter tip plugin definitions.&#10; *&#10; * @param array $info&#10; *   The array of tip plugin definitions, keyed by plugin ID.&#10; *&#10; * @see \Drupal\tour\Annotation\Tip&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_tour_tips_info_alter(&amp;$info) {&#10;  // Swap out the class used for this tip plugin.&#10;  if (isset($info[&#39;text&#39;])) {&#10;    $info[&#39;class&#39;] = &#39;Drupal\mymodule\Plugin\tour\tip\MyCustomTipPlugin&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_tour_tips_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_tour_tips_info_alter" value="/**&#10; * Implements hook_tour_tips_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_tour_tips_info_alter(&amp;$info) {&#10;  // Swap out the class used for this tip plugin.&#10;  if (isset($info[&#39;text&#39;])) {&#10;    $info[&#39;class&#39;] = &#39;Drupal\mymodule\Plugin\tour\tip\MyCustomTipPlugin&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_tour_tips_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_toolbar" value="/**&#10; * Implements hook_toolbar().&#10; *&#10; * Add items to the toolbar menu.&#10; *&#10; * The toolbar is a container for administrative and site-global interactive&#10; * components.&#10; *&#10; * The toolbar provides a common styling for items denoted by the&#10; * .toolbar-tab class.&#10; *&#10; * The toolbar provides a construct called a &#39;tray&#39;. The tray is a container&#10; * for content. The tray may be associated with a toggle in the administration&#10; * bar. The toggle shows or hides the tray and is optimized for small and&#10; * large screens. To create this association, hook_toolbar() returns one or&#10; * more render elements of type &#39;toolbar_item&#39;, containing the toggle and tray&#10; * elements in its &#39;tab&#39; and &#39;tray&#39; properties.&#10; *&#10; * The following properties are available:&#10; *   - &#39;tab&#39;: A renderable array.&#10; *   - &#39;tray&#39;: Optional. A renderable array.&#10; *   - &#39;#weight&#39;: Optional. Integer weight used for sorting toolbar items in&#10; *     administration bar area.&#10; *&#10; * This hook is invoked in toolbar_pre_render().&#10; *&#10; * @return&#10; *   An array of toolbar items, keyed by unique identifiers such as &#39;home&#39; or&#10; *   &#39;administration&#39;, or the short name of the module implementing the hook.&#10; *   The corresponding value is a render element of type &#39;toolbar_item&#39;.&#10; *&#10; * @see toolbar_pre_render()&#10; * @ingroup toolbar_tabs&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_toolbar() {&#10;  $items = array();&#10;&#10;  // Add a search field to the toolbar. The search field employs no toolbar&#10;  // module theming functions.&#10;  $items[&#39;global_search&#39;] = array(&#10;    &#39;#type&#39; =&#62; &#39;toolbar_item&#39;,&#10;    &#39;tab&#39; =&#62; array(&#10;      &#39;#type&#39; =&#62; &#39;search&#39;,&#10;      &#39;#attributes&#39; =&#62; array(&#10;        &#39;placeholder&#39; =&#62; t(&#39;Search the site&#39;),&#10;        &#39;class&#39; =&#62; array(&#39;search-global&#39;),&#10;      ),&#10;    ),&#10;    &#39;#weight&#39; =&#62; 200,&#10;    // Custom CSS, JS or a library can be associated with the toolbar item.&#10;    &#39;#attached&#39; =&#62; array(&#10;      &#39;library&#39; =&#62; array(&#10;        &#39;search/global&#39;,&#10;      ),&#10;    ),&#10;  );&#10;&#10;  // The &#39;Home&#39; tab is a simple link, which is wrapped in markup associated&#10;  // with a visual tab styling.&#10;  $items[&#39;home&#39;] = array(&#10;    &#39;#type&#39; =&#62; &#39;toolbar_item&#39;,&#10;    &#39;tab&#39; =&#62; array(&#10;      &#39;#type&#39; =&#62; &#39;link&#39;,&#10;      &#39;#title&#39; =&#62; t(&#39;Home&#39;),&#10;      &#39;#url&#39; =&#62; Url::fromRoute(&#39;&#60;front&#62;&#39;),&#10;      &#39;#options&#39; =&#62; array(&#10;        &#39;attributes&#39; =&#62; array(&#10;          &#39;title&#39; =&#62; t(&#39;Home page&#39;),&#10;          &#39;class&#39; =&#62; array(&#39;toolbar-icon&#39;, &#39;toolbar-icon-home&#39;),&#10;        ),&#10;      ),&#10;    ),&#10;    &#39;#weight&#39; =&#62; -20,&#10;  );&#10;&#10;  // A tray may be associated with a tab.&#10;  //&#10;  // When the tab is activated, the tray will become visible, either in a&#10;  // horizontal or vertical orientation on the screen.&#10;  //&#10;  // The tray should contain a renderable array. An optional #heading property&#10;  // can be passed. This text is written to a heading tag in the tray as a&#10;  // landmark for accessibility.&#10;  $items[&#39;commerce&#39;] = array(&#10;    &#39;#type&#39; =&#62; &#39;toolbar_item&#39;,&#10;    &#39;tab&#39; =&#62; array(&#10;      &#39;#type&#39; =&#62; &#39;link&#39;,&#10;      &#39;#title&#39; =&#62; t(&#39;Shopping cart&#39;),&#10;      &#39;#url&#39; =&#62; Url::fromRoute(&#39;cart&#39;),&#10;      &#39;#options&#39; =&#62; array(&#10;        &#39;attributes&#39; =&#62; array(&#10;          &#39;title&#39; =&#62; t(&#39;Shopping cart&#39;),&#10;        ),&#10;      ),&#10;    ),&#10;    &#39;tray&#39; =&#62; array(&#10;      &#39;#heading&#39; =&#62; t(&#39;Shopping cart actions&#39;),&#10;      &#39;shopping_cart&#39; =&#62; array(&#10;        &#39;#theme&#39; =&#62; &#39;item_list&#39;,&#10;        &#39;#items&#39; =&#62; array( /* An item list renderable array */ ),&#10;      ),&#10;    ),&#10;    &#39;#weight&#39; =&#62; 150,&#10;  );&#10;&#10;  // The tray can be used to render arbitrary content.&#10;  //&#10;  // A renderable array passed to the &#39;tray&#39; property will be rendered outside&#10;  // the administration bar but within the containing toolbar element.&#10;  //&#10;  // If the default behavior and styling of a toolbar tray is not desired, one&#10;  // can render content to the toolbar element and apply custom theming and&#10;  // behaviors.&#10;  $items[&#39;user_messages&#39;] = array(&#10;    // Include the toolbar_tab_wrapper to style the link like a toolbar tab.&#10;    // Exclude the theme wrapper if custom styling is desired.&#10;    &#39;#type&#39; =&#62; &#39;toolbar_item&#39;,&#10;    &#39;tab&#39; =&#62; array(&#10;      &#39;#type&#39; =&#62; &#39;link&#39;,&#10;      &#39;#theme&#39; =&#62; &#39;user_message_toolbar_tab&#39;,&#10;      &#39;#theme_wrappers&#39; =&#62; array(),&#10;      &#39;#title&#39; =&#62; t(&#39;Messages&#39;),&#10;      &#39;#url&#39; =&#62; Url::fromRoute(&#39;user.message&#39;),&#10;      &#39;#options&#39; =&#62; array(&#10;        &#39;attributes&#39; =&#62; array(&#10;          &#39;title&#39; =&#62; t(&#39;Messages&#39;),&#10;        ),&#10;      ),&#10;    ),&#10;    &#39;tray&#39; =&#62; array(&#10;      &#39;#heading&#39; =&#62; t(&#39;User messages&#39;),&#10;      &#39;messages&#39; =&#62; array(/* renderable content */),&#10;    ),&#10;    &#39;#weight&#39; =&#62; 125,&#10;  );&#10;&#10;  return $items;&#10;  $END$&#10;}" description="hook_toolbar" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_toolbar" value="/**&#10; * Implements hook_toolbar().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_toolbar() {&#10;  $items = array();&#10;&#10;  // Add a search field to the toolbar. The search field employs no toolbar&#10;  // module theming functions.&#10;  $items[&#39;global_search&#39;] = array(&#10;    &#39;#type&#39; =&#62; &#39;toolbar_item&#39;,&#10;    &#39;tab&#39; =&#62; array(&#10;      &#39;#type&#39; =&#62; &#39;search&#39;,&#10;      &#39;#attributes&#39; =&#62; array(&#10;        &#39;placeholder&#39; =&#62; t(&#39;Search the site&#39;),&#10;        &#39;class&#39; =&#62; array(&#39;search-global&#39;),&#10;      ),&#10;    ),&#10;    &#39;#weight&#39; =&#62; 200,&#10;    // Custom CSS, JS or a library can be associated with the toolbar item.&#10;    &#39;#attached&#39; =&#62; array(&#10;      &#39;library&#39; =&#62; array(&#10;        &#39;search/global&#39;,&#10;      ),&#10;    ),&#10;  );&#10;&#10;  // The &#39;Home&#39; tab is a simple link, which is wrapped in markup associated&#10;  // with a visual tab styling.&#10;  $items[&#39;home&#39;] = array(&#10;    &#39;#type&#39; =&#62; &#39;toolbar_item&#39;,&#10;    &#39;tab&#39; =&#62; array(&#10;      &#39;#type&#39; =&#62; &#39;link&#39;,&#10;      &#39;#title&#39; =&#62; t(&#39;Home&#39;),&#10;      &#39;#url&#39; =&#62; Url::fromRoute(&#39;&#60;front&#62;&#39;),&#10;      &#39;#options&#39; =&#62; array(&#10;        &#39;attributes&#39; =&#62; array(&#10;          &#39;title&#39; =&#62; t(&#39;Home page&#39;),&#10;          &#39;class&#39; =&#62; array(&#39;toolbar-icon&#39;, &#39;toolbar-icon-home&#39;),&#10;        ),&#10;      ),&#10;    ),&#10;    &#39;#weight&#39; =&#62; -20,&#10;  );&#10;&#10;  // A tray may be associated with a tab.&#10;  //&#10;  // When the tab is activated, the tray will become visible, either in a&#10;  // horizontal or vertical orientation on the screen.&#10;  //&#10;  // The tray should contain a renderable array. An optional #heading property&#10;  // can be passed. This text is written to a heading tag in the tray as a&#10;  // landmark for accessibility.&#10;  $items[&#39;commerce&#39;] = array(&#10;    &#39;#type&#39; =&#62; &#39;toolbar_item&#39;,&#10;    &#39;tab&#39; =&#62; array(&#10;      &#39;#type&#39; =&#62; &#39;link&#39;,&#10;      &#39;#title&#39; =&#62; t(&#39;Shopping cart&#39;),&#10;      &#39;#url&#39; =&#62; Url::fromRoute(&#39;cart&#39;),&#10;      &#39;#options&#39; =&#62; array(&#10;        &#39;attributes&#39; =&#62; array(&#10;          &#39;title&#39; =&#62; t(&#39;Shopping cart&#39;),&#10;        ),&#10;      ),&#10;    ),&#10;    &#39;tray&#39; =&#62; array(&#10;      &#39;#heading&#39; =&#62; t(&#39;Shopping cart actions&#39;),&#10;      &#39;shopping_cart&#39; =&#62; array(&#10;        &#39;#theme&#39; =&#62; &#39;item_list&#39;,&#10;        &#39;#items&#39; =&#62; array( /* An item list renderable array */ ),&#10;      ),&#10;    ),&#10;    &#39;#weight&#39; =&#62; 150,&#10;  );&#10;&#10;  // The tray can be used to render arbitrary content.&#10;  //&#10;  // A renderable array passed to the &#39;tray&#39; property will be rendered outside&#10;  // the administration bar but within the containing toolbar element.&#10;  //&#10;  // If the default behavior and styling of a toolbar tray is not desired, one&#10;  // can render content to the toolbar element and apply custom theming and&#10;  // behaviors.&#10;  $items[&#39;user_messages&#39;] = array(&#10;    // Include the toolbar_tab_wrapper to style the link like a toolbar tab.&#10;    // Exclude the theme wrapper if custom styling is desired.&#10;    &#39;#type&#39; =&#62; &#39;toolbar_item&#39;,&#10;    &#39;tab&#39; =&#62; array(&#10;      &#39;#type&#39; =&#62; &#39;link&#39;,&#10;      &#39;#theme&#39; =&#62; &#39;user_message_toolbar_tab&#39;,&#10;      &#39;#theme_wrappers&#39; =&#62; array(),&#10;      &#39;#title&#39; =&#62; t(&#39;Messages&#39;),&#10;      &#39;#url&#39; =&#62; Url::fromRoute(&#39;user.message&#39;),&#10;      &#39;#options&#39; =&#62; array(&#10;        &#39;attributes&#39; =&#62; array(&#10;          &#39;title&#39; =&#62; t(&#39;Messages&#39;),&#10;        ),&#10;      ),&#10;    ),&#10;    &#39;tray&#39; =&#62; array(&#10;      &#39;#heading&#39; =&#62; t(&#39;User messages&#39;),&#10;      &#39;messages&#39; =&#62; array(/* renderable content */),&#10;    ),&#10;    &#39;#weight&#39; =&#62; 125,&#10;  );&#10;&#10;  return $items;&#10;  $END$&#10;}" description="hook_toolbar" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_toolbar_alter" value="/**&#10; * Implements hook_toolbar_alter().&#10; *&#10; * Alter the toolbar menu after hook_toolbar() is invoked.&#10; *&#10; * This hook is invoked by toolbar_view() immediately after hook_toolbar(). The&#10; * toolbar definitions are passed in by reference. Each element of the $items&#10; * array is one item returned by a module from hook_toolbar(). Additional items&#10; * may be added, or existing items altered.&#10; *&#10; * @param $items&#10; *   Associative array of toolbar menu definitions returned from hook_toolbar().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_toolbar_alter(&amp;$items) {&#10;  // Move the User tab to the right.&#10;  $items[&#39;commerce&#39;][&#39;#weight&#39;] = 5;&#10;  $END$&#10;}" description="hook_toolbar_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_toolbar_alter" value="/**&#10; * Implements hook_toolbar_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_toolbar_alter(&amp;$items) {&#10;  // Move the User tab to the right.&#10;  $items[&#39;commerce&#39;][&#39;#weight&#39;] = 5;&#10;  $END$&#10;}" description="hook_toolbar_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_path_insert" value="/**&#10; * Implements hook_path_insert().&#10; *&#10; * Respond to a path being inserted.&#10; *&#10; * @param array $path&#10; *   The array structure is identical to that of the return value of&#10; *   \Drupal\Core\Path\PathInterface::save().&#10; *&#10; * @see \Drupal\Core\Path\PathInterface::save()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_path_insert($path) {&#10;  db_insert(&#39;mytable&#39;)&#10;    -&#62;fields(array(&#10;      &#39;alias&#39; =&#62; $path[&#39;alias&#39;],&#10;      &#39;pid&#39; =&#62; $path[&#39;pid&#39;],&#10;    ))&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_path_insert" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_path_insert" value="/**&#10; * Implements hook_path_insert().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_path_insert($path) {&#10;  db_insert(&#39;mytable&#39;)&#10;    -&#62;fields(array(&#10;      &#39;alias&#39; =&#62; $path[&#39;alias&#39;],&#10;      &#39;pid&#39; =&#62; $path[&#39;pid&#39;],&#10;    ))&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_path_insert" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_path_update" value="/**&#10; * Implements hook_path_update().&#10; *&#10; * Respond to a path being updated.&#10; *&#10; * @param array $path&#10; *   The array structure is identical to that of the return value of&#10; *   \Drupal\Core\Path\PathInterface::save().&#10; *&#10; * @see \Drupal\Core\Path\PathInterface::save()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_path_update($path) {&#10;  if ($path[&#39;alias&#39;] != $path[&#39;original&#39;][&#39;alias&#39;]) {&#10;    db_update(&#39;mytable&#39;)&#10;      -&#62;fields(array(&#39;alias&#39; =&#62; $path[&#39;alias&#39;]))&#10;      -&#62;condition(&#39;pid&#39;, $path[&#39;pid&#39;])&#10;      -&#62;execute();&#10;  }&#10;  $END$&#10;}" description="hook_path_update" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_path_update" value="/**&#10; * Implements hook_path_update().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_path_update($path) {&#10;  if ($path[&#39;alias&#39;] != $path[&#39;original&#39;][&#39;alias&#39;]) {&#10;    db_update(&#39;mytable&#39;)&#10;      -&#62;fields(array(&#39;alias&#39; =&#62; $path[&#39;alias&#39;]))&#10;      -&#62;condition(&#39;pid&#39;, $path[&#39;pid&#39;])&#10;      -&#62;execute();&#10;  }&#10;  $END$&#10;}" description="hook_path_update" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_path_delete" value="/**&#10; * Implements hook_path_delete().&#10; *&#10; * Respond to a path being deleted.&#10; *&#10; * @param array $path&#10; *   The array structure is identical to that of the return value of&#10; *   \Drupal\Core\Path\PathInterface::save().&#10; *&#10; * @see \Drupal\Core\Path\PathInterface::delete()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_path_delete($path) {&#10;  db_delete(&#39;mytable&#39;)&#10;    -&#62;condition(&#39;pid&#39;, $path[&#39;pid&#39;])&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_path_delete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_path_delete" value="/**&#10; * Implements hook_path_delete().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_path_delete($path) {&#10;  db_delete(&#39;mytable&#39;)&#10;    -&#62;condition(&#39;pid&#39;, $path[&#39;pid&#39;])&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_path_delete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_rdf_namespaces" value="/**&#10; * Implements hook_rdf_namespaces().&#10; *&#10; * Allow modules to define namespaces for RDF mappings.&#10; *&#10; * Many common namespace prefixes are defined in rdf_rdf_namespaces(). However,&#10; * if a module implements rdf mappings that use prefixes that are not&#10; * defined in rdf_rdf_namespaces(), this hook should be used to define the new&#10; * namespace prefixes.&#10; *&#10; * @return string[]&#10; *   An associative array of namespaces where the key is the namespace prefix&#10; *   and the value is the namespace URI.&#10; *&#10; * @ingroup rdf&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_rdf_namespaces() {&#10;  return array(&#10;    &#39;content&#39;  =&#62; &#39;http://purl.org/rss/1.0/modules/content/&#39;,&#10;    &#39;dc&#39;       =&#62; &#39;http://purl.org/dc/terms/&#39;,&#10;    &#39;foaf&#39;     =&#62; &#39;http://xmlns.com/foaf/0.1/&#39;,&#10;    &#39;og&#39;       =&#62; &#39;http://ogp.me/ns#&#39;,&#10;    &#39;rdfs&#39;     =&#62; &#39;http://www.w3.org/2000/01/rdf-schema#&#39;,&#10;    &#39;sioc&#39;     =&#62; &#39;http://rdfs.org/sioc/ns#&#39;,&#10;    &#39;sioct&#39;    =&#62; &#39;http://rdfs.org/sioc/types#&#39;,&#10;    &#39;skos&#39;     =&#62; &#39;http://www.w3.org/2004/02/skos/core#&#39;,&#10;    &#39;xsd&#39;      =&#62; &#39;http://www.w3.org/2001/XMLSchema#&#39;,&#10;  );&#10;  $END$&#10;}" description="hook_rdf_namespaces" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_rdf_namespaces" value="/**&#10; * Implements hook_rdf_namespaces().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_rdf_namespaces() {&#10;  return array(&#10;    &#39;content&#39;  =&#62; &#39;http://purl.org/rss/1.0/modules/content/&#39;,&#10;    &#39;dc&#39;       =&#62; &#39;http://purl.org/dc/terms/&#39;,&#10;    &#39;foaf&#39;     =&#62; &#39;http://xmlns.com/foaf/0.1/&#39;,&#10;    &#39;og&#39;       =&#62; &#39;http://ogp.me/ns#&#39;,&#10;    &#39;rdfs&#39;     =&#62; &#39;http://www.w3.org/2000/01/rdf-schema#&#39;,&#10;    &#39;sioc&#39;     =&#62; &#39;http://rdfs.org/sioc/ns#&#39;,&#10;    &#39;sioct&#39;    =&#62; &#39;http://rdfs.org/sioc/types#&#39;,&#10;    &#39;skos&#39;     =&#62; &#39;http://www.w3.org/2004/02/skos/core#&#39;,&#10;    &#39;xsd&#39;      =&#62; &#39;http://www.w3.org/2001/XMLSchema#&#39;,&#10;  );&#10;  $END$&#10;}" description="hook_rdf_namespaces" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_user_cancel" value="/**&#10; * Implements hook_user_cancel().&#10; *&#10; * Act on user account cancellations.&#10; *&#10; * This hook is invoked from user_cancel() before a user account is canceled.&#10; * Depending on the account cancellation method, the module should either do&#10; * nothing, unpublish content, or anonymize content. See user_cancel_methods()&#10; * for the list of default account cancellation methods provided by User module.&#10; * Modules may add further methods via hook_user_cancel_methods_alter().&#10; *&#10; * This hook is NOT invoked for the &#39;user_cancel_delete&#39; account cancellation&#10; * method. To react to that method, implement hook_ENTITY_TYPE_predelete() or&#10; * hook_ENTITY_TYPE_delete() for user entities instead.&#10; *&#10; * Expensive operations should be added to the global account cancellation batch&#10; * by using batch_set().&#10; *&#10; * @param array $edit&#10; *   The array of form values submitted by the user.&#10; * @param \Drupal\Core\Session\AccountInterface $account&#10; *   The user object on which the operation is being performed.&#10; * @param string $method&#10; *   The account cancellation method.&#10; *&#10; * @see user_cancel_methods()&#10; * @see hook_user_cancel_methods_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_user_cancel($edit, $account, $method) {&#10;  switch ($method) {&#10;    case &#39;user_cancel_block_unpublish&#39;:&#10;      // Unpublish nodes (current revisions).&#10;      module_load_include(&#39;inc&#39;, &#39;node&#39;, &#39;node.admin&#39;);&#10;      $nodes = \Drupal::entityQuery(&#39;node&#39;)&#10;        -&#62;condition(&#39;uid&#39;, $account-&#62;id())&#10;        -&#62;execute();&#10;      node_mass_update($nodes, array(&#39;status&#39; =&#62; 0), NULL, TRUE);&#10;      break;&#10;&#10;    case &#39;user_cancel_reassign&#39;:&#10;      // Anonymize nodes (current revisions).&#10;      module_load_include(&#39;inc&#39;, &#39;node&#39;, &#39;node.admin&#39;);&#10;      $nodes = \Drupal::entityQuery(&#39;node&#39;)&#10;        -&#62;condition(&#39;uid&#39;, $account-&#62;id())&#10;        -&#62;execute();&#10;      node_mass_update($nodes, array(&#39;uid&#39; =&#62; 0), NULL, TRUE);&#10;      // Anonymize old revisions.&#10;      db_update(&#39;node_field_revision&#39;)&#10;        -&#62;fields(array(&#39;uid&#39; =&#62; 0))&#10;        -&#62;condition(&#39;uid&#39;, $account-&#62;id())&#10;        -&#62;execute();&#10;      break;&#10;  }&#10;  $END$&#10;}" description="hook_user_cancel" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_user_cancel" value="/**&#10; * Implements hook_user_cancel().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_user_cancel($edit, $account, $method) {&#10;  switch ($method) {&#10;    case &#39;user_cancel_block_unpublish&#39;:&#10;      // Unpublish nodes (current revisions).&#10;      module_load_include(&#39;inc&#39;, &#39;node&#39;, &#39;node.admin&#39;);&#10;      $nodes = \Drupal::entityQuery(&#39;node&#39;)&#10;        -&#62;condition(&#39;uid&#39;, $account-&#62;id())&#10;        -&#62;execute();&#10;      node_mass_update($nodes, array(&#39;status&#39; =&#62; 0), NULL, TRUE);&#10;      break;&#10;&#10;    case &#39;user_cancel_reassign&#39;:&#10;      // Anonymize nodes (current revisions).&#10;      module_load_include(&#39;inc&#39;, &#39;node&#39;, &#39;node.admin&#39;);&#10;      $nodes = \Drupal::entityQuery(&#39;node&#39;)&#10;        -&#62;condition(&#39;uid&#39;, $account-&#62;id())&#10;        -&#62;execute();&#10;      node_mass_update($nodes, array(&#39;uid&#39; =&#62; 0), NULL, TRUE);&#10;      // Anonymize old revisions.&#10;      db_update(&#39;node_field_revision&#39;)&#10;        -&#62;fields(array(&#39;uid&#39; =&#62; 0))&#10;        -&#62;condition(&#39;uid&#39;, $account-&#62;id())&#10;        -&#62;execute();&#10;      break;&#10;  }&#10;  $END$&#10;}" description="hook_user_cancel" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_user_cancel_methods_alter" value="/**&#10; * Implements hook_user_cancel_methods_alter().&#10; *&#10; * Modify account cancellation methods.&#10; *&#10; * By implementing this hook, modules are able to add, customize, or remove&#10; * account cancellation methods. All defined methods are turned into radio&#10; * button form elements by user_cancel_methods() after this hook is invoked.&#10; * The following properties can be defined for each method:&#10; * - title: The radio button&#39;s title.&#10; * - description: (optional) A description to display on the confirmation form&#10; *   if the user is not allowed to select the account cancellation method. The&#10; *   description is NOT used for the radio button, but instead should provide&#10; *   additional explanation to the user seeking to cancel their account.&#10; * - access: (optional) A boolean value indicating whether the user can access&#10; *   a method. If &#39;access&#39; is defined, the method cannot be configured as&#10; *   default method.&#10; *&#10; * @param array $methods&#10; *   An array containing user account cancellation methods, keyed by method id.&#10; *&#10; * @see user_cancel_methods()&#10; * @see \Drupal\user\Form\UserCancelForm&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_user_cancel_methods_alter(&amp;$methods) {&#10;  $account = \Drupal::currentUser();&#10;  // Limit access to disable account and unpublish content method.&#10;  $methods[&#39;user_cancel_block_unpublish&#39;][&#39;access&#39;] = $account-&#62;hasPermission(&#39;administer site configuration&#39;);&#10;&#10;  // Remove the content re-assigning method.&#10;  unset($methods[&#39;user_cancel_reassign&#39;]);&#10;&#10;  // Add a custom zero-out method.&#10;  $methods[&#39;mymodule_zero_out&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;Delete the account and remove all content.&#39;),&#10;    &#39;description&#39; =&#62; t(&#39;All your content will be replaced by empty strings.&#39;),&#10;    // access should be used for administrative methods only.&#10;    &#39;access&#39; =&#62; $account-&#62;hasPermission(&#39;access zero-out account cancellation method&#39;),&#10;  );&#10;  $END$&#10;}" description="hook_user_cancel_methods_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_user_cancel_methods_alter" value="/**&#10; * Implements hook_user_cancel_methods_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_user_cancel_methods_alter(&amp;$methods) {&#10;  $account = \Drupal::currentUser();&#10;  // Limit access to disable account and unpublish content method.&#10;  $methods[&#39;user_cancel_block_unpublish&#39;][&#39;access&#39;] = $account-&#62;hasPermission(&#39;administer site configuration&#39;);&#10;&#10;  // Remove the content re-assigning method.&#10;  unset($methods[&#39;user_cancel_reassign&#39;]);&#10;&#10;  // Add a custom zero-out method.&#10;  $methods[&#39;mymodule_zero_out&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;Delete the account and remove all content.&#39;),&#10;    &#39;description&#39; =&#62; t(&#39;All your content will be replaced by empty strings.&#39;),&#10;    // access should be used for administrative methods only.&#10;    &#39;access&#39; =&#62; $account-&#62;hasPermission(&#39;access zero-out account cancellation method&#39;),&#10;  );&#10;  $END$&#10;}" description="hook_user_cancel_methods_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_user_format_name_alter" value="/**&#10; * Implements hook_user_format_name_alter().&#10; *&#10; * Alter the username that is displayed for a user.&#10; *&#10; * Called by $account-&#62;getDisplayName() to allow modules to alter the username&#10; * that is displayed. Can be used to ensure user privacy in situations where&#10; * $account-&#62;getDisplayName() is too revealing.&#10; *&#10; * @param string|Drupal\Component\Render\MarkupInterface $name&#10; *   The username that is displayed for a user. If a hook implementation changes&#10; *   this to an object implementing MarkupInterface it is the responsibility of&#10; *   the implementation to ensure the user&#39;s name is escaped properly. String&#10; *   values will be autoescaped.&#10; * @param \Drupal\Core\Session\AccountInterface $account&#10; *   The user object on which the operation is being performed.&#10; *&#10; * @see \Drupal\Core\Session\AccountInterface::getDisplayName()&#10; * @see sanitization&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_user_format_name_alter(&amp;$name, $account) {&#10;  // Display the user&#39;s uid instead of name.&#10;  if ($account-&#62;id()) {&#10;    $name = t(&#39;User @uid&#39;, array(&#39;@uid&#39; =&#62; $account-&#62;id()));&#10;  }&#10;  $END$&#10;}" description="hook_user_format_name_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_user_format_name_alter" value="/**&#10; * Implements hook_user_format_name_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_user_format_name_alter(&amp;$name, $account) {&#10;  // Display the user&#39;s uid instead of name.&#10;  if ($account-&#62;id()) {&#10;    $name = t(&#39;User @uid&#39;, array(&#39;@uid&#39; =&#62; $account-&#62;id()));&#10;  }&#10;  $END$&#10;}" description="hook_user_format_name_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_user_login" value="/**&#10; * Implements hook_user_login().&#10; *&#10; * The user just logged in.&#10; *&#10; * @param object $account&#10; *   The user object on which the operation was just performed.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_user_login($account) {&#10;  $config = \Drupal::config(&#39;system.date&#39;);&#10;  // If the user has a NULL time zone, notify them to set a time zone.&#10;  if (!$account-&#62;getTimezone() &amp;&amp; $config-&#62;get(&#39;timezone.user.configurable&#39;) &amp;&amp; $config-&#62;get(&#39;timezone.user.warn&#39;)) {&#10;    drupal_set_message(t(&#39;Configure your &#60;a href=&#34;:user-edit&#34;&#62;account time zone setting&#60;/a&#62;.&#39;, array(&#39;:user-edit&#39; =&#62; $account-&#62;url(&#39;edit-form&#39;, array(&#39;query&#39; =&#62; \Drupal::destination()-&#62;getAsArray(), &#39;fragment&#39; =&#62; &#39;edit-timezone&#39;)))));&#10;  }&#10;  $END$&#10;}" description="hook_user_login" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_user_login" value="/**&#10; * Implements hook_user_login().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_user_login($account) {&#10;  $config = \Drupal::config(&#39;system.date&#39;);&#10;  // If the user has a NULL time zone, notify them to set a time zone.&#10;  if (!$account-&#62;getTimezone() &amp;&amp; $config-&#62;get(&#39;timezone.user.configurable&#39;) &amp;&amp; $config-&#62;get(&#39;timezone.user.warn&#39;)) {&#10;    drupal_set_message(t(&#39;Configure your &#60;a href=&#34;:user-edit&#34;&#62;account time zone setting&#60;/a&#62;.&#39;, array(&#39;:user-edit&#39; =&#62; $account-&#62;url(&#39;edit-form&#39;, array(&#39;query&#39; =&#62; \Drupal::destination()-&#62;getAsArray(), &#39;fragment&#39; =&#62; &#39;edit-timezone&#39;)))));&#10;  }&#10;  $END$&#10;}" description="hook_user_login" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_user_logout" value="/**&#10; * Implements hook_user_logout().&#10; *&#10; * The user just logged out.&#10; *&#10; * @param $account&#10; *   The user object on which the operation was just performed.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_user_logout($account) {&#10;  db_insert(&#39;logouts&#39;)&#10;    -&#62;fields(array(&#10;      &#39;uid&#39; =&#62; $account-&#62;id(),&#10;      &#39;time&#39; =&#62; time(),&#10;    ))&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_user_logout" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_user_logout" value="/**&#10; * Implements hook_user_logout().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_user_logout($account) {&#10;  db_insert(&#39;logouts&#39;)&#10;    -&#62;fields(array(&#10;      &#39;uid&#39; =&#62; $account-&#62;id(),&#10;      &#39;time&#39; =&#62; time(),&#10;    ))&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_user_logout" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_shortcut_default_set" value="/**&#10; * Implements hook_shortcut_default_set().&#10; *&#10; * Return the name of a default shortcut set for the provided user account.&#10; *&#10; * This hook allows modules to define default shortcut sets for a particular&#10; * user that differ from the site-wide default (for example, a module may want&#10; * to define default shortcuts on a per-role basis).&#10; *&#10; * The default shortcut set is used only when the user does not have any other&#10; * shortcut set explicitly assigned to them.&#10; *&#10; * Note that only one default shortcut set can exist per user, so when multiple&#10; * modules implement this hook, the last (i.e., highest weighted) module which&#10; * returns a valid shortcut set name will prevail.&#10; *&#10; * @param $account&#10; *   The user account whose default shortcut set is being requested.&#10; * @return string&#10; *   The name of the shortcut set that this module recommends for that user, if&#10; *   there is one.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_shortcut_default_set($account) {&#10;  // Use a special set of default shortcuts for administrators only.&#10;  $roles = \Drupal::entityManager()-&#62;getStorage(&#39;user_role&#39;)-&#62;loadByProperties([&#39;is_admin&#39; =&#62; TRUE]);&#10;  $user_admin_roles = array_intersect(array_keys($roles), $account-&#62;getRoles());&#10;  if ($user_admin_roles) {&#10;    return &#39;admin-shortcuts&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_shortcut_default_set" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_shortcut_default_set" value="/**&#10; * Implements hook_shortcut_default_set().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_shortcut_default_set($account) {&#10;  // Use a special set of default shortcuts for administrators only.&#10;  $roles = \Drupal::entityManager()-&#62;getStorage(&#39;user_role&#39;)-&#62;loadByProperties([&#39;is_admin&#39; =&#62; TRUE]);&#10;  $user_admin_roles = array_intersect(array_keys($roles), $account-&#62;getRoles());&#10;  if ($user_admin_roles) {&#10;    return &#39;admin-shortcuts&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_shortcut_default_set" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_config_translation_info" value="/**&#10; * Implements hook_config_translation_info().&#10; *&#10; * Introduce dynamic translation tabs for translation of configuration.&#10; *&#10; * This hook augments MODULE.config_translation.yml as well as&#10; * THEME.config_translation.yml files to collect dynamic translation mapper&#10; * information. If your information is static, just provide such a YAML file&#10; * with your module containing the mapping.&#10; *&#10; * Note that while themes can provide THEME.config_translation.yml files this&#10; * hook is not invoked for themes.&#10; *&#10; * @param array $info&#10; *   An associative array of configuration mapper information. Use an entity&#10; *   name for the key (for entity mapping) or a unique string for configuration&#10; *   name list mapping. The values of the associative array are arrays&#10; *   themselves in the same structure as the *.config_translation.yml files.&#10; *&#10; * @see hook_config_translation_info_alter()&#10; * @see \Drupal\config_translation\ConfigMapperManagerInterface&#10; * @see \Drupal\config_translation\Routing\RouteSubscriber::routes()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_config_translation_info(&amp;$info) {&#10;  $entity_manager = \Drupal::entityManager();&#10;  $route_provider = \Drupal::service(&#39;router.route_provider&#39;);&#10;&#10;  // If field UI is not enabled, the base routes of the type&#10;  // &#34;entity.field_config.{$entity_type}_field_edit_form&#34; are not defined.&#10;  if (\Drupal::moduleHandler()-&#62;moduleExists(&#39;field_ui&#39;)) {&#10;    // Add fields entity mappers to all fieldable entity types defined.&#10;    foreach ($entity_manager-&#62;getDefinitions() as $entity_type_id =&#62; $entity_type) {&#10;      $base_route = NULL;&#10;      try {&#10;        $base_route = $route_provider-&#62;getRouteByName(&#39;entity.field_config.&#39; . $entity_type_id . &#39;_field_edit_form&#39;);&#10;      }&#10;      catch (RouteNotFoundException $e) {&#10;        // Ignore non-existent routes.&#10;      }&#10;&#10;      // Make sure entity type has field UI enabled and has a base route.&#10;      if ($entity_type-&#62;get(&#39;field_ui_base_route&#39;) &amp;&amp; !empty($base_route)) {&#10;        $info[$entity_type_id . &#39;_fields&#39;] = array(&#10;          &#39;base_route_name&#39; =&#62; &#39;entity.field_config.&#39; . $entity_type_id . &#39;_field_edit_form&#39;,&#10;          &#39;entity_type&#39; =&#62; &#39;field_config&#39;,&#10;          &#39;title&#39; =&#62; t(&#39;Title&#39;),&#10;          &#39;class&#39; =&#62; &#39;\Drupal\config_translation\ConfigFieldMapper&#39;,&#10;          &#39;base_entity_type&#39; =&#62; $entity_type_id,&#10;          &#39;weight&#39; =&#62; 10,&#10;        );&#10;      }&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_config_translation_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_config_translation_info" value="/**&#10; * Implements hook_config_translation_info().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_config_translation_info(&amp;$info) {&#10;  $entity_manager = \Drupal::entityManager();&#10;  $route_provider = \Drupal::service(&#39;router.route_provider&#39;);&#10;&#10;  // If field UI is not enabled, the base routes of the type&#10;  // &#34;entity.field_config.{$entity_type}_field_edit_form&#34; are not defined.&#10;  if (\Drupal::moduleHandler()-&#62;moduleExists(&#39;field_ui&#39;)) {&#10;    // Add fields entity mappers to all fieldable entity types defined.&#10;    foreach ($entity_manager-&#62;getDefinitions() as $entity_type_id =&#62; $entity_type) {&#10;      $base_route = NULL;&#10;      try {&#10;        $base_route = $route_provider-&#62;getRouteByName(&#39;entity.field_config.&#39; . $entity_type_id . &#39;_field_edit_form&#39;);&#10;      }&#10;      catch (RouteNotFoundException $e) {&#10;        // Ignore non-existent routes.&#10;      }&#10;&#10;      // Make sure entity type has field UI enabled and has a base route.&#10;      if ($entity_type-&#62;get(&#39;field_ui_base_route&#39;) &amp;&amp; !empty($base_route)) {&#10;        $info[$entity_type_id . &#39;_fields&#39;] = array(&#10;          &#39;base_route_name&#39; =&#62; &#39;entity.field_config.&#39; . $entity_type_id . &#39;_field_edit_form&#39;,&#10;          &#39;entity_type&#39; =&#62; &#39;field_config&#39;,&#10;          &#39;title&#39; =&#62; t(&#39;Title&#39;),&#10;          &#39;class&#39; =&#62; &#39;\Drupal\config_translation\ConfigFieldMapper&#39;,&#10;          &#39;base_entity_type&#39; =&#62; $entity_type_id,&#10;          &#39;weight&#39; =&#62; 10,&#10;        );&#10;      }&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_config_translation_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_config_translation_info_alter" value="/**&#10; * Implements hook_config_translation_info_alter().&#10; *&#10; * Alter existing translation tabs for translation of configuration.&#10; *&#10; * This hook is useful to extend existing configuration mappers with new&#10; * configuration names, for example when altering existing forms with new&#10; * settings stored elsewhere. This allows the translation experience to also&#10; * reflect the compound form element in one screen.&#10; *&#10; * @param array $info&#10; *   An associative array of discovered configuration mappers. Use an entity&#10; *   name for the key (for entity mapping) or a unique string for configuration&#10; *   name list mapping. The values of the associative array are arrays&#10; *   themselves in the same structure as the *.config_translation.yml files.&#10; *&#10; * @see hook_translation_info()&#10; * @see \Drupal\config_translation\ConfigMapperManagerInterface&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_config_translation_info_alter(&amp;$info) {&#10;  // Add additional site settings to the site information screen, so it shows&#10;  // up on the translation screen. (Form alter in the elements whose values are&#10;  // stored in this config file using regular form altering on the original&#10;  // configuration form.)&#10;  $info[&#39;system.site_information_settings&#39;][&#39;names&#39;][] = &#39;example.site.setting&#39;;&#10;  $END$&#10;}" description="hook_config_translation_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_config_translation_info_alter" value="/**&#10; * Implements hook_config_translation_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_config_translation_info_alter(&amp;$info) {&#10;  // Add additional site settings to the site information screen, so it shows&#10;  // up on the translation screen. (Form alter in the elements whose values are&#10;  // stored in this config file using regular form altering on the original&#10;  // configuration form.)&#10;  $info[&#39;system.site_information_settings&#39;][&#39;names&#39;][] = &#39;example.site.setting&#39;;&#10;  $END$&#10;}" description="hook_config_translation_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_language_types_info" value="/**&#10; * Implements hook_language_types_info().&#10; *&#10; * Define language types.&#10; *&#10; * @return array&#10; *   An associative array of language type definitions. The keys are the&#10; *   identifiers, which are also used as names for global variables representing&#10; *   the types in the bootstrap phase. The values are associative arrays that&#10; *   may contain the following elements:&#10; *   - name: The human-readable language type identifier.&#10; *   - description: A description of the language type.&#10; *   - locked: A boolean indicating if the user can choose whether to configure&#10; *     the language type or not using the UI.&#10; *   - fixed: A fixed array of language negotiation method identifiers to use to&#10; *     initialize this language. If locked is set to TRUE and fixed is set, it&#10; *     will always use the specified methods in the given priority order. If not&#10; *     present and locked is TRUE then language-interface will be&#10; *     used.&#10; *&#10; *  @todo Rename the &#39;fixed&#39; key to something more meaningful, for instance&#10; *     &#39;negotiation settings&#39;. See https://www.drupal.org/node/2166879.&#10; *&#10; * @see hook_language_types_info_alter()&#10; * @ingroup language_negotiation&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_language_types_info() {&#10;  return array(&#10;    &#39;custom_language_type&#39; =&#62; array(&#10;      &#39;name&#39; =&#62; t(&#39;Custom language&#39;),&#10;      &#39;description&#39; =&#62; t(&#39;A custom language type.&#39;),&#10;      &#39;locked&#39; =&#62; FALSE,&#10;    ),&#10;    &#39;fixed_custom_language_type&#39; =&#62; array(&#10;      &#39;locked&#39; =&#62; TRUE,&#10;      &#39;fixed&#39; =&#62; array(&#39;custom_language_negotiation_method&#39;),&#10;    ),&#10;  );&#10;  $END$&#10;}" description="hook_language_types_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_language_types_info" value="/**&#10; * Implements hook_language_types_info().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_language_types_info() {&#10;  return array(&#10;    &#39;custom_language_type&#39; =&#62; array(&#10;      &#39;name&#39; =&#62; t(&#39;Custom language&#39;),&#10;      &#39;description&#39; =&#62; t(&#39;A custom language type.&#39;),&#10;      &#39;locked&#39; =&#62; FALSE,&#10;    ),&#10;    &#39;fixed_custom_language_type&#39; =&#62; array(&#10;      &#39;locked&#39; =&#62; TRUE,&#10;      &#39;fixed&#39; =&#62; array(&#39;custom_language_negotiation_method&#39;),&#10;    ),&#10;  );&#10;  $END$&#10;}" description="hook_language_types_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_language_types_info_alter" value="/**&#10; * Implements hook_language_types_info_alter().&#10; *&#10; * Perform alterations on language types.&#10; *&#10; * @param array $language_types&#10; *   Array of language type definitions.&#10; *&#10; * @see hook_language_types_info()&#10; * @ingroup language_negotiation&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_language_types_info_alter(array &amp;$language_types) {&#10;  if (isset($language_types[&#39;custom_language_type&#39;])) {&#10;    $language_types[&#39;custom_language_type_custom&#39;][&#39;description&#39;] = t(&#39;A far better description.&#39;);&#10;  }&#10;  $END$&#10;}" description="hook_language_types_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_language_types_info_alter" value="/**&#10; * Implements hook_language_types_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_language_types_info_alter(array &amp;$language_types) {&#10;  if (isset($language_types[&#39;custom_language_type&#39;])) {&#10;    $language_types[&#39;custom_language_type_custom&#39;][&#39;description&#39;] = t(&#39;A far better description.&#39;);&#10;  }&#10;  $END$&#10;}" description="hook_language_types_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_language_negotiation_info_alter" value="/**&#10; * Implements hook_language_negotiation_info_alter().&#10; *&#10; * Perform alterations on language negotiation methods.&#10; *&#10; * @param array $negotiation_info&#10; *   Array of language negotiation method definitions.&#10; *&#10; * @ingroup language_negotiation&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_language_negotiation_info_alter(array &amp;$negotiation_info) {&#10;  if (isset($negotiation_info[&#39;custom_language_method&#39;])) {&#10;    $negotiation_info[&#39;custom_language_method&#39;][&#39;config&#39;] = &#39;admin/config/regional/language/detection/custom-language-method&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_language_negotiation_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_language_negotiation_info_alter" value="/**&#10; * Implements hook_language_negotiation_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_language_negotiation_info_alter(array &amp;$negotiation_info) {&#10;  if (isset($negotiation_info[&#39;custom_language_method&#39;])) {&#10;    $negotiation_info[&#39;custom_language_method&#39;][&#39;config&#39;] = &#39;admin/config/regional/language/detection/custom-language-method&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_language_negotiation_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_language_fallback_candidates_alter" value="/**&#10; * Implements hook_language_fallback_candidates_alter().&#10; *&#10; * Allow modules to alter the language fallback candidates.&#10; *&#10; * @param array $candidates&#10; *   An array of language codes whose order will determine the language fallback&#10; *   order.&#10; * @param array $context&#10; *   A language fallback context.&#10; *&#10; * @see \Drupal\Core\Language\LanguageManagerInterface::getFallbackCandidates()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_language_fallback_candidates_alter(array &amp;$candidates, array $context) {&#10;  $candidates = array_reverse($candidates);&#10;  $END$&#10;}" description="hook_language_fallback_candidates_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_language_fallback_candidates_alter" value="/**&#10; * Implements hook_language_fallback_candidates_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_language_fallback_candidates_alter(array &amp;$candidates, array $context) {&#10;  $candidates = array_reverse($candidates);&#10;  $END$&#10;}" description="hook_language_fallback_candidates_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_language_fallback_candidates_OPERATION_alter" value="/**&#10; * Implements hook_language_fallback_candidates_OPERATION_alter().&#10; *&#10; * Allow modules to alter the fallback candidates for specific operations.&#10; *&#10; * @param array $candidates&#10; *   An array of language codes whose order will determine the language fallback&#10; *   order.&#10; * @param array $context&#10; *   A language fallback context.&#10; *&#10; * @see \Drupal\Core\Language\LanguageManagerInterface::getFallbackCandidates()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_language_fallback_candidates_OPERATION_alter(array &amp;$candidates, array $context) {&#10;  // We know that the current OPERATION deals with entities so no need to check&#10;  // here.&#10;  if ($context[&#39;data&#39;]-&#62;getEntityTypeId() == &#39;node&#39;) {&#10;    $candidates = array_reverse($candidates);&#10;  }&#10;  $END$&#10;}" description="hook_language_fallback_candidates_OPERATION_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_language_fallback_candidates_OPERATION_alter" value="/**&#10; * Implements hook_language_fallback_candidates_OPERATION_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_language_fallback_candidates_OPERATION_alter(array &amp;$candidates, array $context) {&#10;  // We know that the current OPERATION deals with entities so no need to check&#10;  // here.&#10;  if ($context[&#39;data&#39;]-&#62;getEntityTypeId() == &#39;node&#39;) {&#10;    $candidates = array_reverse($candidates);&#10;  }&#10;  $END$&#10;}" description="hook_language_fallback_candidates_OPERATION_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_field_formatter_third_party_settings_form" value="/**&#10; * Implements hook_field_formatter_third_party_settings_form().&#10; *&#10; * Allow modules to add settings to field formatters provided by other modules.&#10; *&#10; * @param \Drupal\Core\Field\FormatterInterface $plugin&#10; *   The instantiated field formatter plugin.&#10; * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition&#10; *   The field definition.&#10; * @param $view_mode&#10; *   The entity view mode.&#10; * @param array $form&#10; *   The (entire) configuration form array.&#10; * @param \Drupal\Core\Form\FormStateInterface $form_state&#10; *   The form state.&#10; *&#10; * @return array&#10; *   Returns the form array to be built.&#10; *&#10; * @see \Drupal\field_ui\DisplayOverView&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_formatter_third_party_settings_form(\Drupal\Core\Field\FormatterInterface $plugin, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, $view_mode, $form, \Drupal\Core\Form\FormStateInterface $form_state) {&#10;  $element = array();&#10;  // Add a &#39;my_setting&#39; checkbox to the settings form for &#39;foo_formatter&#39; field&#10;  // formatters.&#10;  if ($plugin-&#62;getPluginId() == &#39;foo_formatter&#39;) {&#10;    $element[&#39;my_setting&#39;] = array(&#10;      &#39;#type&#39; =&#62; &#39;checkbox&#39;,&#10;      &#39;#title&#39; =&#62; t(&#39;My setting&#39;),&#10;      &#39;#default_value&#39; =&#62; $plugin-&#62;getThirdPartySetting(&#39;my_module&#39;, &#39;my_setting&#39;),&#10;    );&#10;  }&#10;  return $element;&#10;  $END$&#10;}" description="hook_field_formatter_third_party_settings_form" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_field_formatter_third_party_settings_form" value="/**&#10; * Implements hook_field_formatter_third_party_settings_form().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_formatter_third_party_settings_form(\Drupal\Core\Field\FormatterInterface $plugin, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, $view_mode, $form, \Drupal\Core\Form\FormStateInterface $form_state) {&#10;  $element = array();&#10;  // Add a &#39;my_setting&#39; checkbox to the settings form for &#39;foo_formatter&#39; field&#10;  // formatters.&#10;  if ($plugin-&#62;getPluginId() == &#39;foo_formatter&#39;) {&#10;    $element[&#39;my_setting&#39;] = array(&#10;      &#39;#type&#39; =&#62; &#39;checkbox&#39;,&#10;      &#39;#title&#39; =&#62; t(&#39;My setting&#39;),&#10;      &#39;#default_value&#39; =&#62; $plugin-&#62;getThirdPartySetting(&#39;my_module&#39;, &#39;my_setting&#39;),&#10;    );&#10;  }&#10;  return $element;&#10;  $END$&#10;}" description="hook_field_formatter_third_party_settings_form" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_field_widget_third_party_settings_form" value="/**&#10; * Implements hook_field_widget_third_party_settings_form().&#10; *&#10; * Allow modules to add settings to field widgets provided by other modules.&#10; *&#10; * @param \Drupal\Core\Field\WidgetInterface $plugin&#10; *   The instantiated field widget plugin.&#10; * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition&#10; *   The field definition.&#10; * @param $form_mode&#10; *   The entity form mode.&#10; * @param array $form&#10; *   The (entire) configuration form array.&#10; * @param \Drupal\Core\Form\FormStateInterface $form_state&#10; *   The form state.&#10; *&#10; * @return array&#10; *   Returns the form array to be built.&#10; *&#10; * @see \Drupal\field_ui\FormDisplayOverView&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_widget_third_party_settings_form(\Drupal\Core\Field\WidgetInterface $plugin, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, $form_mode, $form, \Drupal\Core\Form\FormStateInterface $form_state) {&#10;  $element = array();&#10;  // Add a &#39;my_setting&#39; checkbox to the settings form for &#39;foo_widget&#39; field&#10;  // widgets.&#10;  if ($plugin-&#62;getPluginId() == &#39;foo_widget&#39;) {&#10;    $element[&#39;my_setting&#39;] = array(&#10;      &#39;#type&#39; =&#62; &#39;checkbox&#39;,&#10;      &#39;#title&#39; =&#62; t(&#39;My setting&#39;),&#10;      &#39;#default_value&#39; =&#62; $plugin-&#62;getThirdPartySetting(&#39;my_module&#39;, &#39;my_setting&#39;),&#10;    );&#10;  }&#10;  return $element;&#10;  $END$&#10;}" description="hook_field_widget_third_party_settings_form" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_field_widget_third_party_settings_form" value="/**&#10; * Implements hook_field_widget_third_party_settings_form().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_widget_third_party_settings_form(\Drupal\Core\Field\WidgetInterface $plugin, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, $form_mode, $form, \Drupal\Core\Form\FormStateInterface $form_state) {&#10;  $element = array();&#10;  // Add a &#39;my_setting&#39; checkbox to the settings form for &#39;foo_widget&#39; field&#10;  // widgets.&#10;  if ($plugin-&#62;getPluginId() == &#39;foo_widget&#39;) {&#10;    $element[&#39;my_setting&#39;] = array(&#10;      &#39;#type&#39; =&#62; &#39;checkbox&#39;,&#10;      &#39;#title&#39; =&#62; t(&#39;My setting&#39;),&#10;      &#39;#default_value&#39; =&#62; $plugin-&#62;getThirdPartySetting(&#39;my_module&#39;, &#39;my_setting&#39;),&#10;    );&#10;  }&#10;  return $element;&#10;  $END$&#10;}" description="hook_field_widget_third_party_settings_form" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_field_formatter_settings_summary_alter" value="/**&#10; * Implements hook_field_formatter_settings_summary_alter().&#10; *&#10; * Alters the field formatter settings summary.&#10; *&#10; * @param array $summary&#10; *   An array of summary messages.&#10; * @param $context&#10; *   An associative array with the following elements:&#10; *   - formatter: The formatter object.&#10; *   - field_definition: The field definition.&#10; *   - view_mode: The view mode being configured.&#10; *&#10; * @see \Drupal\field_ui\DisplayOverView&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_formatter_settings_summary_alter(&amp;$summary, $context) {&#10;  // Append a message to the summary when an instance of foo_formatter has&#10;  // mysetting set to TRUE for the current view mode.&#10;  if ($context[&#39;formatter&#39;]-&#62;getPluginId() == &#39;foo_formatter&#39;) {&#10;    if ($context[&#39;formatter&#39;]-&#62;getThirdPartySetting(&#39;my_module&#39;, &#39;my_setting&#39;)) {&#10;      $summary[] = t(&#39;My setting enabled.&#39;);&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_field_formatter_settings_summary_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_field_formatter_settings_summary_alter" value="/**&#10; * Implements hook_field_formatter_settings_summary_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_formatter_settings_summary_alter(&amp;$summary, $context) {&#10;  // Append a message to the summary when an instance of foo_formatter has&#10;  // mysetting set to TRUE for the current view mode.&#10;  if ($context[&#39;formatter&#39;]-&#62;getPluginId() == &#39;foo_formatter&#39;) {&#10;    if ($context[&#39;formatter&#39;]-&#62;getThirdPartySetting(&#39;my_module&#39;, &#39;my_setting&#39;)) {&#10;      $summary[] = t(&#39;My setting enabled.&#39;);&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_field_formatter_settings_summary_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_field_widget_settings_summary_alter" value="/**&#10; * Implements hook_field_widget_settings_summary_alter().&#10; *&#10; * Alters the field widget settings summary.&#10; *&#10; * @param array $summary&#10; *   An array of summary messages.&#10; * @param array $context&#10; *   An associative array with the following elements:&#10; *   - widget: The widget object.&#10; *   - field_definition: The field definition.&#10; *   - form_mode: The form mode being configured.&#10; *&#10; * @see \Drupal\field_ui\FormDisplayOverView&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_widget_settings_summary_alter(&amp;$summary, $context) {&#10;  // Append a message to the summary when an instance of foo_widget has&#10;  // mysetting set to TRUE for the current view mode.&#10;  if ($context[&#39;widget&#39;]-&#62;getPluginId() == &#39;foo_widget&#39;) {&#10;    if ($context[&#39;widget&#39;]-&#62;getThirdPartySetting(&#39;my_module&#39;, &#39;my_setting&#39;)) {&#10;      $summary[] = t(&#39;My setting enabled.&#39;);&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_field_widget_settings_summary_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_field_widget_settings_summary_alter" value="/**&#10; * Implements hook_field_widget_settings_summary_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_field_widget_settings_summary_alter(&amp;$summary, $context) {&#10;  // Append a message to the summary when an instance of foo_widget has&#10;  // mysetting set to TRUE for the current view mode.&#10;  if ($context[&#39;widget&#39;]-&#62;getPluginId() == &#39;foo_widget&#39;) {&#10;    if ($context[&#39;widget&#39;]-&#62;getThirdPartySetting(&#39;my_module&#39;, &#39;my_setting&#39;)) {&#10;      $summary[] = t(&#39;My setting enabled.&#39;);&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_field_widget_settings_summary_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_options_list_alter" value="/**&#10; * Implements hook_options_list_alter().&#10; *&#10; * Alters the list of options to be displayed for a field.&#10; *&#10; * This hook can notably be used to change the label of the empty option.&#10; *&#10; * @param array $options&#10; *   The array of options for the field, as returned by&#10; *   \Drupal\Core\TypedData\OptionsProviderInterface::getSettableOptions(). An&#10; *   empty option (_none) might have been added, depending on the field&#10; *   properties.&#10; * @param array $context&#10; *   An associative array containing:&#10; *   - fieldDefinition: The field definition&#10; *     (\Drupal\Core\Field\FieldDefinitionInterface).&#10; *   - entity: The entity object the field is attached to&#10; *     (\Drupal\Core\Entity\EntityInterface).&#10; *&#10; * @ingroup hooks&#10; * @see hook_options_list()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_options_list_alter(array &amp;$options, array $context) {&#10;  // Check if this is the field we want to change.&#10;  if ($context[&#39;fieldDefinition&#39;]-&#62;id() == &#39;field_option&#39;) {&#10;    // Change the label of the empty option.&#10;    $options[&#39;_none&#39;] = t(&#39;== Empty ==&#39;);&#10;  }&#10;  $END$&#10;}" description="hook_options_list_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_options_list_alter" value="/**&#10; * Implements hook_options_list_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_options_list_alter(array &amp;$options, array $context) {&#10;  // Check if this is the field we want to change.&#10;  if ($context[&#39;fieldDefinition&#39;]-&#62;id() == &#39;field_option&#39;) {&#10;    // Change the label of the empty option.&#10;    $options[&#39;_none&#39;] = t(&#39;== Empty ==&#39;);&#10;  }&#10;  $END$&#10;}" description="hook_options_list_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_image_effect_info_alter" value="/**&#10; * Implements hook_image_effect_info_alter().&#10; *&#10; * Alter the information provided in \Drupal\image\Annotation\ImageEffect.&#10; *&#10; * @param $effects&#10; *   The array of image effects, keyed on the machine-readable effect name.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_image_effect_info_alter(&amp;$effects) {&#10;  // Override the Image module&#39;s &#39;Scale and Crop&#39; effect label.&#10;  $effects[&#39;image_scale_and_crop&#39;][&#39;label&#39;] = t(&#39;Bangers and Mash&#39;);&#10;  $END$&#10;}" description="hook_image_effect_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_image_effect_info_alter" value="/**&#10; * Implements hook_image_effect_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_image_effect_info_alter(&amp;$effects) {&#10;  // Override the Image module&#39;s &#39;Scale and Crop&#39; effect label.&#10;  $effects[&#39;image_scale_and_crop&#39;][&#39;label&#39;] = t(&#39;Bangers and Mash&#39;);&#10;  $END$&#10;}" description="hook_image_effect_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_image_style_flush" value="/**&#10; * Implements hook_image_style_flush().&#10; *&#10; * Respond to image style flushing.&#10; *&#10; * This hook enables modules to take effect when a style is being flushed (all&#10; * images are being deleted from the server and regenerated). Any&#10; * module-specific caches that contain information related to the style should&#10; * be cleared using this hook. This hook is called whenever a style is updated,&#10; * deleted, or any effect associated with the style is update or deleted.&#10; *&#10; * @param \Drupal\image\ImageStyleInterface $style&#10; *   The image style object that is being flushed.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_image_style_flush($style) {&#10;  // Empty cached data that contains information about the style.&#10;  \Drupal::cache(&#39;mymodule&#39;)-&#62;deleteAll();&#10;  $END$&#10;}" description="hook_image_style_flush" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_image_style_flush" value="/**&#10; * Implements hook_image_style_flush().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_image_style_flush($style) {&#10;  // Empty cached data that contains information about the style.&#10;  \Drupal::cache(&#39;mymodule&#39;)-&#62;deleteAll();&#10;  $END$&#10;}" description="hook_image_style_flush" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_update_projects_alter" value="/**&#10; * Implements hook_update_projects_alter().&#10; *&#10; * Alter the list of projects before fetching data and comparing versions.&#10; *&#10; * Most modules will never need to implement this hook. It is for advanced&#10; * interaction with the Update Manager module. The primary use-case for this&#10; * hook is to add projects to the list; for example, to provide update status&#10; * data on disabled modules and themes. A contributed module might want to hide&#10; * projects from the list; for example, if there is a site-specific module that&#10; * doesn&#39;t have any official releases, that module could remove itself from this&#10; * list to avoid &#34;No available releases found&#34; warnings on the available updates&#10; * report. In rare cases, a module might want to alter the data associated with&#10; * a project already in the list.&#10; *&#10; * @param $projects&#10; *   Reference to an array of the projects installed on the system. This&#10; *   includes all the metadata documented in the comments below for each project&#10; *   (either module or theme) that is currently enabled. The array is initially&#10; *   populated inside \Drupal\Update\UpdateManager::getProjects() with the help&#10; *   of \Drupal\Core\Utility\ProjectInfo-&#62;processInfoList(), so look there for&#10; *   examples of how to populate the array with real values.&#10; *&#10; * @see \Drupal\Update\UpdateManager::getProjects()&#10; * @see \Drupal\Core\Utility\ProjectInfo::processInfoList()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_update_projects_alter(&amp;$projects) {&#10;  // Hide a site-specific module from the list.&#10;  unset($projects[&#39;site_specific_module&#39;]);&#10;&#10;  // Add a disabled module to the list.&#10;  // The key for the array should be the machine-readable project &#34;short name&#34;.&#10;  $projects[&#39;disabled_project_name&#39;] = array(&#10;    // Machine-readable project short name (same as the array key above).&#10;    &#39;name&#39; =&#62; &#39;disabled_project_name&#39;,&#10;    // Array of values from the main .info.yml file for this project.&#10;    &#39;info&#39; =&#62; array(&#10;      &#39;name&#39; =&#62; &#39;Some disabled module&#39;,&#10;      &#39;description&#39; =&#62; &#39;A module not enabled on the site that you want to see in the available updates report.&#39;,&#10;      &#39;version&#39; =&#62; &#39;8.x-1.0&#39;,&#10;      &#39;core&#39; =&#62; &#39;8.x&#39;,&#10;      // The maximum file change time (the &#34;ctime&#34; returned by the filectime()&#10;      // PHP method) for all of the .info.yml files included in this project.&#10;      &#39;_info_file_ctime&#39; =&#62; 1243888165,&#10;    ),&#10;    // The date stamp when the project was released, if known. If the disabled&#10;    // project was an officially packaged release from drupal.org, this will&#10;    // be included in the .info.yml file as the &#39;datestamp&#39; field. This only&#10;    // really matters for development snapshot releases that are regenerated,&#10;    // so it can be left undefined or set to 0 in most cases.&#10;    &#39;datestamp&#39; =&#62; 1243888185,&#10;    // Any modules (or themes) included in this project. Keyed by machine-&#10;    // readable &#34;short name&#34;, value is the human-readable project name printed&#10;    // in the UI.&#10;    &#39;includes&#39; =&#62; array(&#10;      &#39;disabled_project&#39; =&#62; &#39;Disabled module&#39;,&#10;      &#39;disabled_project_helper&#39; =&#62; &#39;Disabled module helper module&#39;,&#10;      &#39;disabled_project_foo&#39; =&#62; &#39;Disabled module foo add-on module&#39;,&#10;    ),&#10;    // Does this project contain a &#39;module&#39;, &#39;theme&#39;, &#39;disabled-module&#39;, or&#10;    // &#39;disabled-theme&#39;?&#10;    &#39;project_type&#39; =&#62; &#39;disabled-module&#39;,&#10;  );&#10;  $END$&#10;}" description="hook_update_projects_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_update_projects_alter" value="/**&#10; * Implements hook_update_projects_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_update_projects_alter(&amp;$projects) {&#10;  // Hide a site-specific module from the list.&#10;  unset($projects[&#39;site_specific_module&#39;]);&#10;&#10;  // Add a disabled module to the list.&#10;  // The key for the array should be the machine-readable project &#34;short name&#34;.&#10;  $projects[&#39;disabled_project_name&#39;] = array(&#10;    // Machine-readable project short name (same as the array key above).&#10;    &#39;name&#39; =&#62; &#39;disabled_project_name&#39;,&#10;    // Array of values from the main .info.yml file for this project.&#10;    &#39;info&#39; =&#62; array(&#10;      &#39;name&#39; =&#62; &#39;Some disabled module&#39;,&#10;      &#39;description&#39; =&#62; &#39;A module not enabled on the site that you want to see in the available updates report.&#39;,&#10;      &#39;version&#39; =&#62; &#39;8.x-1.0&#39;,&#10;      &#39;core&#39; =&#62; &#39;8.x&#39;,&#10;      // The maximum file change time (the &#34;ctime&#34; returned by the filectime()&#10;      // PHP method) for all of the .info.yml files included in this project.&#10;      &#39;_info_file_ctime&#39; =&#62; 1243888165,&#10;    ),&#10;    // The date stamp when the project was released, if known. If the disabled&#10;    // project was an officially packaged release from drupal.org, this will&#10;    // be included in the .info.yml file as the &#39;datestamp&#39; field. This only&#10;    // really matters for development snapshot releases that are regenerated,&#10;    // so it can be left undefined or set to 0 in most cases.&#10;    &#39;datestamp&#39; =&#62; 1243888185,&#10;    // Any modules (or themes) included in this project. Keyed by machine-&#10;    // readable &#34;short name&#34;, value is the human-readable project name printed&#10;    // in the UI.&#10;    &#39;includes&#39; =&#62; array(&#10;      &#39;disabled_project&#39; =&#62; &#39;Disabled module&#39;,&#10;      &#39;disabled_project_helper&#39; =&#62; &#39;Disabled module helper module&#39;,&#10;      &#39;disabled_project_foo&#39; =&#62; &#39;Disabled module foo add-on module&#39;,&#10;    ),&#10;    // Does this project contain a &#39;module&#39;, &#39;theme&#39;, &#39;disabled-module&#39;, or&#10;    // &#39;disabled-theme&#39;?&#10;    &#39;project_type&#39; =&#62; &#39;disabled-module&#39;,&#10;  );&#10;  $END$&#10;}" description="hook_update_projects_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_update_status_alter" value="/**&#10; * Implements hook_update_status_alter().&#10; *&#10; * Alter the information about available updates for projects.&#10; *&#10; * @param $projects&#10; *   Reference to an array of information about available updates to each&#10; *   project installed on the system.&#10; *&#10; * @see update_calculate_project_data()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_update_status_alter(&amp;$projects) {&#10;  $settings = \Drupal::config(&#39;update_advanced.settings&#39;)-&#62;get(&#39;projects&#39;);&#10;  foreach ($projects as $project =&#62; $project_info) {&#10;    if (isset($settings[$project]) &amp;&amp; isset($settings[$project][&#39;check&#39;]) &amp;&amp;&#10;        ($settings[$project][&#39;check&#39;] == &#39;never&#39; ||&#10;          (isset($project_info[&#39;recommended&#39;]) &amp;&amp;&#10;            $settings[$project][&#39;check&#39;] === $project_info[&#39;recommended&#39;]))) {&#10;      $projects[$project][&#39;status&#39;] = UPDATE_NOT_CHECKED;&#10;      $projects[$project][&#39;reason&#39;] = t(&#39;Ignored from settings&#39;);&#10;      if (!empty($settings[$project][&#39;notes&#39;])) {&#10;        $projects[$project][&#39;extra&#39;][] = array(&#10;          &#39;class&#39; =&#62; array(&#39;admin-note&#39;),&#10;          &#39;label&#39; =&#62; t(&#39;Administrator note&#39;),&#10;          &#39;data&#39; =&#62; $settings[$project][&#39;notes&#39;],&#10;        );&#10;      }&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_update_status_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_update_status_alter" value="/**&#10; * Implements hook_update_status_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_update_status_alter(&amp;$projects) {&#10;  $settings = \Drupal::config(&#39;update_advanced.settings&#39;)-&#62;get(&#39;projects&#39;);&#10;  foreach ($projects as $project =&#62; $project_info) {&#10;    if (isset($settings[$project]) &amp;&amp; isset($settings[$project][&#39;check&#39;]) &amp;&amp;&#10;        ($settings[$project][&#39;check&#39;] == &#39;never&#39; ||&#10;          (isset($project_info[&#39;recommended&#39;]) &amp;&amp;&#10;            $settings[$project][&#39;check&#39;] === $project_info[&#39;recommended&#39;]))) {&#10;      $projects[$project][&#39;status&#39;] = UPDATE_NOT_CHECKED;&#10;      $projects[$project][&#39;reason&#39;] = t(&#39;Ignored from settings&#39;);&#10;      if (!empty($settings[$project][&#39;notes&#39;])) {&#10;        $projects[$project][&#39;extra&#39;][] = array(&#10;          &#39;class&#39; =&#62; array(&#39;admin-note&#39;),&#10;          &#39;label&#39; =&#62; t(&#39;Administrator note&#39;),&#10;          &#39;data&#39; =&#62; $settings[$project][&#39;notes&#39;],&#10;        );&#10;      }&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_update_status_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_verify_update_archive" value="/**&#10; * Implements hook_verify_update_archive().&#10; *&#10; * Verify an archive after it has been downloaded and extracted.&#10; *&#10; * @param string $project&#10; *   The short name of the project that has been downloaded.&#10; * @param string $archive_file&#10; *   The filename of the unextracted archive.&#10; * @param string $directory&#10; *   The directory that the archive was extracted into.&#10; *&#10; * @return&#10; *   If there are any problems, return an array of error messages. If there are&#10; *   no problems, return an empty array.&#10; *&#10; * @see update_manager_archive_verify()&#10; * @ingroup update_manager_file&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_verify_update_archive($project, $archive_file, $directory) {&#10;  $errors = array();&#10;  if (!file_exists($directory)) {&#10;    $errors[] = t(&#39;The %directory does not exist.&#39;, array(&#39;%directory&#39; =&#62; $directory));&#10;  }&#10;  // Add other checks on the archive integrity here.&#10;  return $errors;&#10;  $END$&#10;}" description="hook_verify_update_archive" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_verify_update_archive" value="/**&#10; * Implements hook_verify_update_archive().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_verify_update_archive($project, $archive_file, $directory) {&#10;  $errors = array();&#10;  if (!file_exists($directory)) {&#10;    $errors[] = t(&#39;The %directory does not exist.&#39;, array(&#39;%directory&#39; =&#62; $directory));&#10;  }&#10;  // Add other checks on the archive integrity here.&#10;  return $errors;&#10;  $END$&#10;}" description="hook_verify_update_archive" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_locale_translation_projects_alter" value="/**&#10; * Implements hook_locale_translation_projects_alter().&#10; *&#10; * Alter the list of projects to be updated by locale&#39;s interface translation.&#10; *&#10; * Locale module attempts to update the translation of those modules returned&#10; * by \Drupal\Update\UpdateManager::getProjects(). Using this hook, the data&#10; * returned by \Drupal\Update\UpdateManager::getProjects() can be altered or&#10; * extended.&#10; *&#10; * Modules or distributions that use a dedicated translation server should use&#10; * this hook to specify the interface translation server pattern, or to add&#10; * additional custom/non-Drupal.org modules to the list of modules known to&#10; * locale.&#10; * - &#34;interface translation server pattern&#34;: URL of the .po translation files&#10; *   used to download the files from. The URL contains tokens which will be&#10; *   replaced by appropriate values.&#10; * The following tokens are available for the server pattern:&#10; * - &#34;%core&#34;: Core version. Value example: &#34;8.x&#34;.&#10; * - &#34;%project&#34;: Project name. Value examples: &#34;drupal&#34;, &#34;media_gallery&#34;.&#10; * - &#34;%version&#34;: Project version release. Value examples: &#34;8.1&#34;, &#34;8.x-1.0&#34;.&#10; * - &#34;%language&#34;: Language code. Value examples: &#34;fr&#34;, &#34;pt-pt&#34;.&#10; *&#10; * @param array $projects&#10; *   Project data as returned by \Drupal\Update\UpdateManager::getProjects().&#10; *&#10; * @see locale_translation_project_list()&#10; * @ingroup interface_translation_properties&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_locale_translation_projects_alter(&amp;$projects) {&#10;  // The translations are located at a custom translation sever.&#10;  $projects[&#39;existing_project&#39;] = array(&#10;    &#39;info&#39; =&#62; array(&#10;      &#39;interface translation server pattern&#39; =&#62; &#39;http://example.com/files/translations/%core/%project/%project-%version.%language.po&#39;,&#10;    ),&#10;  );&#10;  $END$&#10;}" description="hook_locale_translation_projects_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_locale_translation_projects_alter" value="/**&#10; * Implements hook_locale_translation_projects_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_locale_translation_projects_alter(&amp;$projects) {&#10;  // The translations are located at a custom translation sever.&#10;  $projects[&#39;existing_project&#39;] = array(&#10;    &#39;info&#39; =&#62; array(&#10;      &#39;interface translation server pattern&#39; =&#62; &#39;http://example.com/files/translations/%core/%project/%project-%version.%language.po&#39;,&#10;    ),&#10;  );&#10;  $END$&#10;}" description="hook_locale_translation_projects_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_cron" value="/**&#10; * Implements hook_cron().&#10; *&#10; * Perform periodic actions.&#10; *&#10; * Modules that require some commands to be executed periodically can&#10; * implement hook_cron(). The engine will then call the hook whenever a cron&#10; * run happens, as defined by the administrator. Typical tasks managed by&#10; * hook_cron() are database maintenance, backups, recalculation of settings&#10; * or parameters, automated mailing, and retrieving remote data.&#10; *&#10; * Short-running or non-resource-intensive tasks can be executed directly in&#10; * the hook_cron() implementation.&#10; *&#10; * Long-running tasks and tasks that could time out, such as retrieving remote&#10; * data, sending email, and intensive file tasks, should use the queue API&#10; * instead of executing the tasks directly. To do this, first define one or&#10; * more queues via a \Drupal\Core\Annotation\QueueWorker plugin. Then, add items&#10; * that need to be processed to the defined queues.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_cron() {&#10;  // Short-running operation example, not using a queue:&#10;  // Delete all expired records since the last cron run.&#10;  $expires = \Drupal::state()-&#62;get(&#39;mymodule.last_check&#39;, 0);&#10;  \Drupal::database()-&#62;delete(&#39;mymodule_table&#39;)&#10;    -&#62;condition(&#39;expires&#39;, $expires, &#39;&#62;=&#39;)&#10;    -&#62;execute();&#10;  \Drupal::state()-&#62;set(&#39;mymodule.last_check&#39;, REQUEST_TIME);&#10;&#10;  // Long-running operation example, leveraging a queue:&#10;  // Queue news feeds for updates once their refresh interval has elapsed.&#10;  $queue = \Drupal::queue(&#39;aggregator_feeds&#39;);&#10;  $ids = \Drupal::entityManager()-&#62;getStorage(&#39;aggregator_feed&#39;)-&#62;getFeedIdsToRefresh();&#10;  foreach (Feed::loadMultiple($ids) as $feed) {&#10;    if ($queue-&#62;createItem($feed)) {&#10;      // Add timestamp to avoid queueing item more than once.&#10;      $feed-&#62;setQueuedTime(REQUEST_TIME);&#10;      $feed-&#62;save();&#10;    }&#10;  }&#10;  $ids = \Drupal::entityQuery(&#39;aggregator_feed&#39;)&#10;    -&#62;condition(&#39;queued&#39;, REQUEST_TIME - (3600 * 6), &#39;&#60;&#39;)&#10;    -&#62;execute();&#10;  if ($ids) {&#10;    $feeds = Feed::loadMultiple($ids);&#10;    foreach ($feeds as $feed) {&#10;      $feed-&#62;setQueuedTime(0);&#10;      $feed-&#62;save();&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_cron" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_cron" value="/**&#10; * Implements hook_cron().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_cron() {&#10;  // Short-running operation example, not using a queue:&#10;  // Delete all expired records since the last cron run.&#10;  $expires = \Drupal::state()-&#62;get(&#39;mymodule.last_check&#39;, 0);&#10;  \Drupal::database()-&#62;delete(&#39;mymodule_table&#39;)&#10;    -&#62;condition(&#39;expires&#39;, $expires, &#39;&#62;=&#39;)&#10;    -&#62;execute();&#10;  \Drupal::state()-&#62;set(&#39;mymodule.last_check&#39;, REQUEST_TIME);&#10;&#10;  // Long-running operation example, leveraging a queue:&#10;  // Queue news feeds for updates once their refresh interval has elapsed.&#10;  $queue = \Drupal::queue(&#39;aggregator_feeds&#39;);&#10;  $ids = \Drupal::entityManager()-&#62;getStorage(&#39;aggregator_feed&#39;)-&#62;getFeedIdsToRefresh();&#10;  foreach (Feed::loadMultiple($ids) as $feed) {&#10;    if ($queue-&#62;createItem($feed)) {&#10;      // Add timestamp to avoid queueing item more than once.&#10;      $feed-&#62;setQueuedTime(REQUEST_TIME);&#10;      $feed-&#62;save();&#10;    }&#10;  }&#10;  $ids = \Drupal::entityQuery(&#39;aggregator_feed&#39;)&#10;    -&#62;condition(&#39;queued&#39;, REQUEST_TIME - (3600 * 6), &#39;&#60;&#39;)&#10;    -&#62;execute();&#10;  if ($ids) {&#10;    $feeds = Feed::loadMultiple($ids);&#10;    foreach ($feeds as $feed) {&#10;      $feed-&#62;setQueuedTime(0);&#10;      $feed-&#62;save();&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_cron" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_data_type_info_alter" value="/**&#10; * Implements hook_data_type_info_alter().&#10; *&#10; * Alter available data types for typed data wrappers.&#10; *&#10; * @param array $data_types&#10; *   An array of data type information.&#10; *&#10; * @see hook_data_type_info()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_data_type_info_alter(&amp;$data_types) {&#10;  $data_types[&#39;email&#39;][&#39;class&#39;] = &#39;\Drupal\mymodule\Type\Email&#39;;&#10;  $END$&#10;}" description="hook_data_type_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_data_type_info_alter" value="/**&#10; * Implements hook_data_type_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_data_type_info_alter(&amp;$data_types) {&#10;  $data_types[&#39;email&#39;][&#39;class&#39;] = &#39;\Drupal\mymodule\Type\Email&#39;;&#10;  $END$&#10;}" description="hook_data_type_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_queue_info_alter" value="/**&#10; * Implements hook_queue_info_alter().&#10; *&#10; * Alter cron queue information before cron runs.&#10; *&#10; * Called by \Drupal\Core\Cron to allow modules to alter cron queue settings&#10; * before any jobs are processesed.&#10; *&#10; * @param array $queues&#10; *   An array of cron queue information.&#10; *&#10; * @see \Drupal\Core\QueueWorker\QueueWorkerInterface&#10; * @see \Drupal\Core\Annotation\QueueWorker&#10; * @see \Drupal\Core\Cron&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_queue_info_alter(&amp;$queues) {&#10;  // This site has many feeds so let&#39;s spend 90 seconds on each cron run&#10;  // updating feeds instead of the default 60.&#10;  $queues[&#39;aggregator_feeds&#39;][&#39;cron&#39;][&#39;time&#39;] = 90;&#10;  $END$&#10;}" description="hook_queue_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_queue_info_alter" value="/**&#10; * Implements hook_queue_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_queue_info_alter(&amp;$queues) {&#10;  // This site has many feeds so let&#39;s spend 90 seconds on each cron run&#10;  // updating feeds instead of the default 60.&#10;  $queues[&#39;aggregator_feeds&#39;][&#39;cron&#39;][&#39;time&#39;] = 90;&#10;  $END$&#10;}" description="hook_queue_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_mail_alter" value="/**&#10; * Implements hook_mail_alter().&#10; *&#10; * Alter an email message created with MailManagerInterface-&#62;mail().&#10; *&#10; * hook_mail_alter() allows modification of email messages created and sent&#10; * with MailManagerInterface-&#62;mail(). Usage examples include adding and/or&#10; * changing message text, message fields, and message headers.&#10; *&#10; * Email messages sent using functions other than MailManagerInterface-&#62;mail()&#10; * will not invoke hook_mail_alter(). For example, a contributed module directly&#10; * calling the MailInterface-&#62;mail() or PHP mail() function will not invoke&#10; * this hook. All core modules use MailManagerInterface-&#62;mail() for messaging,&#10; * it is best practice but not mandatory in contributed modules.&#10; *&#10; * @param $message&#10; *   An array containing the message data. Keys in this array include:&#10; *   - &#39;id&#39;:&#10; *     The MailManagerInterface-&#62;mail() id of the message. Look at module source&#10; *     code or MailManagerInterface-&#62;mail() for possible id values.&#10; *   - &#39;to&#39;:&#10; *     The address or addresses the message will be sent to. The&#10; *     formatting of this string must comply with RFC 2822.&#10; *   - &#39;from&#39;:&#10; *     The address the message will be marked as being from, which is&#10; *     either a custom address or the site-wide default email address.&#10; *   - &#39;subject&#39;:&#10; *     Subject of the email to be sent. This must not contain any newline&#10; *     characters, or the email may not be sent properly.&#10; *   - &#39;body&#39;:&#10; *     An array of strings or objects that implement&#10; *     \Drupal\Component\Render\MarkupInterface containing the message text. The&#10; *     message body is created by concatenating the individual array strings&#10; *     into a single text string using &#34;\n\n&#34; as a separator.&#10; *   - &#39;headers&#39;:&#10; *     Associative array containing mail headers, such as From, Sender,&#10; *     MIME-Version, Content-Type, etc.&#10; *   - &#39;params&#39;:&#10; *     An array of optional parameters supplied by the caller of&#10; *     MailManagerInterface-&#62;mail() that is used to build the message before&#10; *     hook_mail_alter() is invoked.&#10; *   - &#39;language&#39;:&#10; *     The language object used to build the message before hook_mail_alter()&#10; *     is invoked.&#10; *   - &#39;send&#39;:&#10; *     Set to FALSE to abort sending this email message.&#10; *&#10; * @see \Drupal\Core\Mail\MailManagerInterface::mail()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_mail_alter(&amp;$message) {&#10;  if ($message[&#39;id&#39;] == &#39;modulename_messagekey&#39;) {&#10;    if (!example_notifications_optin($message[&#39;to&#39;], $message[&#39;id&#39;])) {&#10;      // If the recipient has opted to not receive such messages, cancel&#10;      // sending.&#10;      $message[&#39;send&#39;] = FALSE;&#10;      return;&#10;    }&#10;    $message[&#39;body&#39;][] = &#34;--\nMail sent out from &#34; . \Drupal::config(&#39;system.site&#39;)-&#62;get(&#39;name&#39;);&#10;  }&#10;  $END$&#10;}" description="hook_mail_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_mail_alter" value="/**&#10; * Implements hook_mail_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_mail_alter(&amp;$message) {&#10;  if ($message[&#39;id&#39;] == &#39;modulename_messagekey&#39;) {&#10;    if (!example_notifications_optin($message[&#39;to&#39;], $message[&#39;id&#39;])) {&#10;      // If the recipient has opted to not receive such messages, cancel&#10;      // sending.&#10;      $message[&#39;send&#39;] = FALSE;&#10;      return;&#10;    }&#10;    $message[&#39;body&#39;][] = &#34;--\nMail sent out from &#34; . \Drupal::config(&#39;system.site&#39;)-&#62;get(&#39;name&#39;);&#10;  }&#10;  $END$&#10;}" description="hook_mail_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_mail" value="/**&#10; * Implements hook_mail().&#10; *&#10; * Prepares a message based on parameters;&#10; *&#10; * This hook is called from MailManagerInterface-&#62;mail(). Note that hook_mail(),&#10; * unlike hook_mail_alter(), is only called on the $module argument to&#10; * MailManagerInterface-&#62;mail(), not all modules.&#10; *&#10; * @param $key&#10; *   An identifier of the mail.&#10; * @param $message&#10; *   An array to be filled in. Elements in this array include:&#10; *   - id: An ID to identify the mail sent. Look at module source code or&#10; *     MailManagerInterface-&#62;mail() for possible id values.&#10; *   - to: The address or addresses the message will be sent to. The&#10; *     formatting of this string must comply with RFC 2822.&#10; *   - subject: Subject of the email to be sent. This must not contain any&#10; *     newline characters, or the mail may not be sent properly.&#10; *     MailManagerInterface-&#62;mail() sets this to an empty&#10; *     string when the hook is invoked.&#10; *   - body: An array of lines containing the message to be sent. Drupal will&#10; *     format the correct line endings for you. MailManagerInterface-&#62;mail()&#10; *     sets this to an empty array when the hook is invoked. The array may&#10; *     contain either strings or objects implementing&#10; *     \Drupal\Component\Render\MarkupInterface.&#10; *   - from: The address the message will be marked as being from, which is&#10; *     set by MailManagerInterface-&#62;mail() to either a custom address or the&#10; *     site-wide default email address when the hook is invoked.&#10; *   - headers: Associative array containing mail headers, such as From,&#10; *     Sender, MIME-Version, Content-Type, etc.&#10; *     MailManagerInterface-&#62;mail() pre-fills several headers in this array.&#10; * @param $params&#10; *   An array of parameters supplied by the caller of&#10; *   MailManagerInterface-&#62;mail().&#10; *&#10; * @see \Drupal\Core\Mail\MailManagerInterface::mail()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_mail($key, &amp;$message, $params) {&#10;  $account = $params[&#39;account&#39;];&#10;  $context = $params[&#39;context&#39;];&#10;  $variables = array(&#10;    &#39;%site_name&#39; =&#62; \Drupal::config(&#39;system.site&#39;)-&#62;get(&#39;name&#39;),&#10;    &#39;%username&#39; =&#62; $account-&#62;getDisplayName(),&#10;  );&#10;  if ($context[&#39;hook&#39;] == &#39;taxonomy&#39;) {&#10;    $entity = $params[&#39;entity&#39;];&#10;    $vocabulary = Vocabulary::load($entity-&#62;id());&#10;    $variables += array(&#10;      &#39;%term_name&#39; =&#62; $entity-&#62;name,&#10;      &#39;%term_description&#39; =&#62; $entity-&#62;description,&#10;      &#39;%term_id&#39; =&#62; $entity-&#62;id(),&#10;      &#39;%vocabulary_name&#39; =&#62; $vocabulary-&#62;label(),&#10;      &#39;%vocabulary_description&#39; =&#62; $vocabulary-&#62;getDescription(),&#10;      &#39;%vocabulary_id&#39; =&#62; $vocabulary-&#62;id(),&#10;    );&#10;  }&#10;&#10;  // Node-based variable translation is only available if we have a node.&#10;  if (isset($params[&#39;node&#39;])) {&#10;    /** @var \Drupal\node\NodeInterface $node */&#10;    $node = $params[&#39;node&#39;];&#10;    $variables += array(&#10;      &#39;%uid&#39; =&#62; $node-&#62;getOwnerId(),&#10;      &#39;%url&#39; =&#62; $node-&#62;url(&#39;canonical&#39;, array(&#39;absolute&#39; =&#62; TRUE)),&#10;      &#39;%node_type&#39; =&#62; node_get_type_label($node),&#10;      &#39;%title&#39; =&#62; $node-&#62;getTitle(),&#10;      &#39;%teaser&#39; =&#62; $node-&#62;teaser,&#10;      &#39;%body&#39; =&#62; $node-&#62;body,&#10;    );&#10;  }&#10;  $subject = strtr($context[&#39;subject&#39;], $variables);&#10;  $body = strtr($context[&#39;message&#39;], $variables);&#10;  $message[&#39;subject&#39;] .= str_replace(array(&#34;\r&#34;, &#34;\n&#34;), &#39;&#39;, $subject);&#10;  $message[&#39;body&#39;][] = MailFormatHelper::htmlToText($body);&#10;  $END$&#10;}" description="hook_mail" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_mail" value="/**&#10; * Implements hook_mail().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_mail($key, &amp;$message, $params) {&#10;  $account = $params[&#39;account&#39;];&#10;  $context = $params[&#39;context&#39;];&#10;  $variables = array(&#10;    &#39;%site_name&#39; =&#62; \Drupal::config(&#39;system.site&#39;)-&#62;get(&#39;name&#39;),&#10;    &#39;%username&#39; =&#62; $account-&#62;getDisplayName(),&#10;  );&#10;  if ($context[&#39;hook&#39;] == &#39;taxonomy&#39;) {&#10;    $entity = $params[&#39;entity&#39;];&#10;    $vocabulary = Vocabulary::load($entity-&#62;id());&#10;    $variables += array(&#10;      &#39;%term_name&#39; =&#62; $entity-&#62;name,&#10;      &#39;%term_description&#39; =&#62; $entity-&#62;description,&#10;      &#39;%term_id&#39; =&#62; $entity-&#62;id(),&#10;      &#39;%vocabulary_name&#39; =&#62; $vocabulary-&#62;label(),&#10;      &#39;%vocabulary_description&#39; =&#62; $vocabulary-&#62;getDescription(),&#10;      &#39;%vocabulary_id&#39; =&#62; $vocabulary-&#62;id(),&#10;    );&#10;  }&#10;&#10;  // Node-based variable translation is only available if we have a node.&#10;  if (isset($params[&#39;node&#39;])) {&#10;    /** @var \Drupal\node\NodeInterface $node */&#10;    $node = $params[&#39;node&#39;];&#10;    $variables += array(&#10;      &#39;%uid&#39; =&#62; $node-&#62;getOwnerId(),&#10;      &#39;%url&#39; =&#62; $node-&#62;url(&#39;canonical&#39;, array(&#39;absolute&#39; =&#62; TRUE)),&#10;      &#39;%node_type&#39; =&#62; node_get_type_label($node),&#10;      &#39;%title&#39; =&#62; $node-&#62;getTitle(),&#10;      &#39;%teaser&#39; =&#62; $node-&#62;teaser,&#10;      &#39;%body&#39; =&#62; $node-&#62;body,&#10;    );&#10;  }&#10;  $subject = strtr($context[&#39;subject&#39;], $variables);&#10;  $body = strtr($context[&#39;message&#39;], $variables);&#10;  $message[&#39;subject&#39;] .= str_replace(array(&#34;\r&#34;, &#34;\n&#34;), &#39;&#39;, $subject);&#10;  $message[&#39;body&#39;][] = MailFormatHelper::htmlToText($body);&#10;  $END$&#10;}" description="hook_mail" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_mail_backend_info_alter" value="/**&#10; * Implements hook_mail_backend_info_alter().&#10; *&#10; * Alter the list of mail backend plugin definitions.&#10; *&#10; * @param array $info&#10; *   The mail backend plugin definitions to be altered.&#10; *&#10; * @see \Drupal\Core\Annotation\Mail&#10; * @see \Drupal\Core\Mail\MailManager&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_mail_backend_info_alter(&amp;$info) {&#10;  unset($info[&#39;test_mail_collector&#39;]);&#10;  $END$&#10;}" description="hook_mail_backend_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_mail_backend_info_alter" value="/**&#10; * Implements hook_mail_backend_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_mail_backend_info_alter(&amp;$info) {&#10;  unset($info[&#39;test_mail_collector&#39;]);&#10;  $END$&#10;}" description="hook_mail_backend_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_countries_alter" value="/**&#10; * Implements hook_countries_alter().&#10; *&#10; * Alter the default country list.&#10; *&#10; * @param $countries&#10; *   The associative array of countries keyed by two-letter country code.&#10; *&#10; * @see \Drupal\Core\Locale\CountryManager::getList()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_countries_alter(&amp;$countries) {&#10;  // Elbonia is now independent, so add it to the country list.&#10;  $countries[&#39;EB&#39;] = &#39;Elbonia&#39;;&#10;  $END$&#10;}" description="hook_countries_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_countries_alter" value="/**&#10; * Implements hook_countries_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_countries_alter(&amp;$countries) {&#10;  // Elbonia is now independent, so add it to the country list.&#10;  $countries[&#39;EB&#39;] = &#39;Elbonia&#39;;&#10;  $END$&#10;}" description="hook_countries_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_display_variant_plugin_alter" value="/**&#10; * Implements hook_display_variant_plugin_alter().&#10; *&#10; * Alter display variant plugin definitions.&#10; *&#10; * @param array $definitions&#10; *   The array of display variant definitions, keyed by plugin ID.&#10; *&#10; * @see \Drupal\Core\Display\VariantManager&#10; * @see \Drupal\Core\Display\Annotation\DisplayVariant&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_display_variant_plugin_alter(array &amp;$definitions) {&#10;  $definitions[&#39;full_page&#39;][&#39;admin_label&#39;] = t(&#39;Block layout&#39;);&#10;  $END$&#10;}" description="hook_display_variant_plugin_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_display_variant_plugin_alter" value="/**&#10; * Implements hook_display_variant_plugin_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_display_variant_plugin_alter(array &amp;$definitions) {&#10;  $definitions[&#39;full_page&#39;][&#39;admin_label&#39;] = t(&#39;Block layout&#39;);&#10;  $END$&#10;}" description="hook_display_variant_plugin_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_cache_flush" value="/**&#10; * Implements hook_cache_flush().&#10; *&#10; * Flush all persistent and static caches.&#10; *&#10; * This hook asks your module to clear all of its static caches,&#10; * in order to ensure a clean environment for subsequently&#10; * invoked data rebuilds.&#10; *&#10; * Do NOT use this hook for rebuilding information. Only use it to flush custom&#10; * caches.&#10; *&#10; * Static caches using drupal_static() do not need to be reset manually.&#10; * However, all other static variables that do not use drupal_static() must be&#10; * manually reset.&#10; *&#10; * This hook is invoked by drupal_flush_all_caches(). It runs before module data&#10; * is updated and before hook_rebuild().&#10; *&#10; * @see drupal_flush_all_caches()&#10; * @see hook_rebuild()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_cache_flush() {&#10;  if (defined(&#39;MAINTENANCE_MODE&#39;) &amp;&amp; MAINTENANCE_MODE == &#39;update&#39;) {&#10;    _update_cache_clear();&#10;  }&#10;  $END$&#10;}" description="hook_cache_flush" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_cache_flush" value="/**&#10; * Implements hook_cache_flush().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_cache_flush() {&#10;  if (defined(&#39;MAINTENANCE_MODE&#39;) &amp;&amp; MAINTENANCE_MODE == &#39;update&#39;) {&#10;    _update_cache_clear();&#10;  }&#10;  $END$&#10;}" description="hook_cache_flush" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_rebuild" value="/**&#10; * Implements hook_rebuild().&#10; *&#10; * Rebuild data based upon refreshed caches.&#10; *&#10; * This hook allows your module to rebuild its data based on the latest/current&#10; * module data. It runs after hook_cache_flush() and after all module data has&#10; * been updated.&#10; *&#10; * This hook is only invoked after the system has been completely cleared;&#10; * i.e., all previously cached data is known to be gone and every API in the&#10; * system is known to return current information, so your module can safely rely&#10; * on all available data to rebuild its own.&#10; *&#10; * @see hook_cache_flush()&#10; * @see drupal_flush_all_caches()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_rebuild() {&#10;  $themes = \Drupal::service(&#39;theme_handler&#39;)-&#62;listInfo();&#10;  foreach ($themes as $theme) {&#10;    _block_rehash($theme-&#62;getName());&#10;  }&#10;  $END$&#10;}" description="hook_rebuild" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_rebuild" value="/**&#10; * Implements hook_rebuild().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_rebuild() {&#10;  $themes = \Drupal::service(&#39;theme_handler&#39;)-&#62;listInfo();&#10;  foreach ($themes as $theme) {&#10;    _block_rehash($theme-&#62;getName());&#10;  }&#10;  $END$&#10;}" description="hook_rebuild" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_config_import_steps_alter" value="/**&#10; * Implements hook_config_import_steps_alter().&#10; *&#10; * Alter the configuration synchronization steps.&#10; *&#10; * @param array $sync_steps&#10; *   A one-dimensional array of \Drupal\Core\Config\ConfigImporter method names&#10; *   or callables that are invoked to complete the import, in the order that&#10; *   they will be processed. Each callable item defined in $sync_steps should&#10; *   either be a global function or a public static method. The callable should&#10; *   accept a $context array by reference. For example:&#10; *   &#60;code&#62;&#10; *     function _additional_configuration_step(&amp;$context) {&#10; *       // Do stuff.&#10; *       // If finished set $context[&#39;finished&#39;] = 1.&#10; *     }&#10; *   &#60;/code&#62;&#10; *   For more information on creating batches, see the&#10; *   @link batch Batch operations @endlink documentation.&#10; *&#10; * @see callback_batch_operation()&#10; * @see \Drupal\Core\Config\ConfigImporter::initialize()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_config_import_steps_alter(&amp;$sync_steps, \Drupal\Core\Config\ConfigImporter $config_importer) {&#10;  $deletes = $config_importer-&#62;getUnprocessedConfiguration(&#39;delete&#39;);&#10;  if (isset($deletes[&#39;field.storage.node.body&#39;])) {&#10;    $sync_steps[] = &#39;_additional_configuration_step&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_config_import_steps_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_config_import_steps_alter" value="/**&#10; * Implements hook_config_import_steps_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_config_import_steps_alter(&amp;$sync_steps, \Drupal\Core\Config\ConfigImporter $config_importer) {&#10;  $deletes = $config_importer-&#62;getUnprocessedConfiguration(&#39;delete&#39;);&#10;  if (isset($deletes[&#39;field.storage.node.body&#39;])) {&#10;    $sync_steps[] = &#39;_additional_configuration_step&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_config_import_steps_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_config_schema_info_alter" value="/**&#10; * Implements hook_config_schema_info_alter().&#10; *&#10; * Alter config typed data definitions.&#10; *&#10; * For example you can alter the typed data types representing each&#10; * configuration schema type to change default labels or form element renderers&#10; * used for configuration translation.&#10; *&#10; * If implementations of this hook add or remove configuration schema a&#10; * ConfigSchemaAlterException will be thrown. Keep in mind that there are tools&#10; * that may use the configuration schema for static analysis of configuration&#10; * files, like the string extractor for the localization system. Such systems&#10; * won&#39;t work with dynamically defined configuration schemas.&#10; *&#10; * For adding new data types use configuration schema YAML files instead.&#10; *&#10; * @param $definitions&#10; *   Associative array of configuration type definitions keyed by schema type&#10; *   names. The elements are themselves array with information about the type.&#10; *&#10; * @see \Drupal\Core\Config\TypedConfigManager&#10; * @see \Drupal\Core\Config\Schema\ConfigSchemaAlterException&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_config_schema_info_alter(&amp;$definitions) {&#10;  // Enhance the text and date type definitions with classes to generate proper&#10;  // form elements in ConfigTranslationFormBase. Other translatable types will&#10;  // appear as a one line textfield.&#10;  $definitions[&#39;text&#39;][&#39;form_element_class&#39;] = &#39;\Drupal\config_translation\FormElement\Textarea&#39;;&#10;  $definitions[&#39;date_format&#39;][&#39;form_element_class&#39;] = &#39;\Drupal\config_translation\FormElement\DateFormat&#39;;&#10;  $END$&#10;}" description="hook_config_schema_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_config_schema_info_alter" value="/**&#10; * Implements hook_config_schema_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_config_schema_info_alter(&amp;$definitions) {&#10;  // Enhance the text and date type definitions with classes to generate proper&#10;  // form elements in ConfigTranslationFormBase. Other translatable types will&#10;  // appear as a one line textfield.&#10;  $definitions[&#39;text&#39;][&#39;form_element_class&#39;] = &#39;\Drupal\config_translation\FormElement\Textarea&#39;;&#10;  $definitions[&#39;date_format&#39;][&#39;form_element_class&#39;] = &#39;\Drupal\config_translation\FormElement\DateFormat&#39;;&#10;  $END$&#10;}" description="hook_config_schema_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_validation_constraint_alter" value="/**&#10; * Implements hook_validation_constraint_alter().&#10; *&#10; * Alter validation constraint plugin definitions.&#10; *&#10; * @param array[] $definitions&#10; *   The array of validation constraint definitions, keyed by plugin ID.&#10; *&#10; * @see \Drupal\Core\Validation\ConstraintManager&#10; * @see \Drupal\Core\Validation\Annotation\Constraint&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_validation_constraint_alter(array &amp;$definitions) {&#10;  $definitions[&#39;Null&#39;][&#39;class&#39;] = &#39;\Drupal\mymodule\Validator\Constraints\MyClass&#39;;&#10;  $END$&#10;}" description="hook_validation_constraint_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_validation_constraint_alter" value="/**&#10; * Implements hook_validation_constraint_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_validation_constraint_alter(array &amp;$definitions) {&#10;  $definitions[&#39;Null&#39;][&#39;class&#39;] = &#39;\Drupal\mymodule\Validator\Constraints\MyClass&#39;;&#10;  $END$&#10;}" description="hook_validation_constraint_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_access" value="/**&#10; * Implements hook_entity_access().&#10; *&#10; * Control entity operation access.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity to check access to.&#10; * @param string $operation&#10; *   The operation that is to be performed on $entity.&#10; * @param \Drupal\Core\Session\AccountInterface $account&#10; *   The account trying to access the entity.&#10; *&#10; * @return \Drupal\Core\Access\AccessResultInterface&#10; *   The access result. The final result is calculated by using&#10; *   \Drupal\Core\Access\AccessResultInterface::orIf() on the result of every&#10; *   hook_entity_access() and hook_ENTITY_TYPE_access() implementation, and the&#10; *   result of the entity-specific checkAccess() method in the entity access&#10; *   control handler. Be careful when writing generalized access checks shared&#10; *   between routing and entity checks: routing uses the andIf() operator. So&#10; *   returning an isNeutral() does not determine entity access at all but it&#10; *   always ends up denying access while routing.&#10; *&#10; * @see \Drupal\Core\Entity\EntityAccessControlHandler&#10; * @see hook_entity_create_access()&#10; * @see hook_ENTITY_TYPE_access()&#10; *&#10; * @ingroup entity_api&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {&#10;  // No opinion.&#10;  return AccessResult::neutral();&#10;  $END$&#10;}" description="hook_entity_access" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_access" value="/**&#10; * Implements hook_entity_access().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {&#10;  // No opinion.&#10;  return AccessResult::neutral();&#10;  $END$&#10;}" description="hook_entity_access" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_access" value="/**&#10; * Implements hook_ENTITY_TYPE_access().&#10; *&#10; * Control entity operation access for a specific entity type.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity to check access to.&#10; * @param string $operation&#10; *   The operation that is to be performed on $entity.&#10; * @param \Drupal\Core\Session\AccountInterface $account&#10; *   The account trying to access the entity.&#10; *&#10; * @return \Drupal\Core\Access\AccessResultInterface&#10; *   The access result. hook_entity_access() has detailed documentation.&#10; *&#10; * @see \Drupal\Core\Entity\EntityAccessControlHandler&#10; * @see hook_ENTITY_TYPE_create_access()&#10; * @see hook_entity_access()&#10; *&#10; * @ingroup entity_api&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {&#10;  // No opinion.&#10;  return AccessResult::neutral();&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_access" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_access" value="/**&#10; * Implements hook_ENTITY_TYPE_access().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {&#10;  // No opinion.&#10;  return AccessResult::neutral();&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_access" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_create_access" value="/**&#10; * Implements hook_entity_create_access().&#10; *&#10; * Control entity create access.&#10; *&#10; * @param \Drupal\Core\Session\AccountInterface $account&#10; *   The account trying to access the entity.&#10; * @param array $context&#10; *   An associative array of additional context values. By default it contains&#10; *   language and the entity type ID:&#10; *   - entity_type_id - the entity type ID.&#10; *   - langcode - the current language code.&#10; * @param string $entity_bundle&#10; *   The entity bundle name.&#10; *&#10; * @return \Drupal\Core\Access\AccessResultInterface&#10; *   The access result.&#10; *&#10; * @see \Drupal\Core\Entity\EntityAccessControlHandler&#10; * @see hook_entity_access()&#10; * @see hook_ENTITY_TYPE_create_access()&#10; *&#10; * @ingroup entity_api&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_create_access(\Drupal\Core\Session\AccountInterface $account, array $context, $entity_bundle) {&#10;  // No opinion.&#10;  return AccessResult::neutral();&#10;  $END$&#10;}" description="hook_entity_create_access" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_create_access" value="/**&#10; * Implements hook_entity_create_access().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_create_access(\Drupal\Core\Session\AccountInterface $account, array $context, $entity_bundle) {&#10;  // No opinion.&#10;  return AccessResult::neutral();&#10;  $END$&#10;}" description="hook_entity_create_access" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_create_access" value="/**&#10; * Implements hook_ENTITY_TYPE_create_access().&#10; *&#10; * Control entity create access for a specific entity type.&#10; *&#10; * @param \Drupal\Core\Session\AccountInterface $account&#10; *   The account trying to access the entity.&#10; * @param array $context&#10; *   An associative array of additional context values. By default it contains&#10; *   language:&#10; *   - langcode - the current language code.&#10; * @param string $entity_bundle&#10; *   The entity bundle name.&#10; *&#10; * @return \Drupal\Core\Access\AccessResultInterface&#10; *   The access result.&#10; *&#10; * @see \Drupal\Core\Entity\EntityAccessControlHandler&#10; * @see hook_ENTITY_TYPE_access()&#10; * @see hook_entity_create_access()&#10; *&#10; * @ingroup entity_api&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_create_access(\Drupal\Core\Session\AccountInterface $account, array $context, $entity_bundle) {&#10;  // No opinion.&#10;  return AccessResult::neutral();&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_create_access" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_create_access" value="/**&#10; * Implements hook_ENTITY_TYPE_create_access().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_create_access(\Drupal\Core\Session\AccountInterface $account, array $context, $entity_bundle) {&#10;  // No opinion.&#10;  return AccessResult::neutral();&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_create_access" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_type_build" value="/**&#10; * Implements hook_entity_type_build().&#10; *&#10; * Add to entity type definitions.&#10; *&#10; * Modules may implement this hook to add information to defined entity types,&#10; * as defined in \Drupal\Core\Entity\EntityTypeInterface.&#10; *&#10; * To alter existing information or to add information dynamically, use&#10; * hook_entity_type_alter().&#10; *&#10; * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types&#10; *   An associative array of all entity type definitions, keyed by the entity&#10; *   type name. Passed by reference.&#10; *&#10; * @see \Drupal\Core\Entity\Entity&#10; * @see \Drupal\Core\Entity\EntityTypeInterface&#10; * @see hook_entity_type_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_type_build(array &amp;$entity_types) {&#10;  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */&#10;  // Add a form for a custom node form without overriding the default&#10;  // node form. To override the default node form, use hook_entity_type_alter().&#10;  $entity_types[&#39;node&#39;]-&#62;setFormClass(&#39;mymodule_foo&#39;, &#39;Drupal\mymodule\NodeFooForm&#39;);&#10;  $END$&#10;}" description="hook_entity_type_build" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_type_build" value="/**&#10; * Implements hook_entity_type_build().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_type_build(array &amp;$entity_types) {&#10;  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */&#10;  // Add a form for a custom node form without overriding the default&#10;  // node form. To override the default node form, use hook_entity_type_alter().&#10;  $entity_types[&#39;node&#39;]-&#62;setFormClass(&#39;mymodule_foo&#39;, &#39;Drupal\mymodule\NodeFooForm&#39;);&#10;  $END$&#10;}" description="hook_entity_type_build" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_type_alter" value="/**&#10; * Implements hook_entity_type_alter().&#10; *&#10; * Alter the entity type definitions.&#10; *&#10; * Modules may implement this hook to alter the information that defines an&#10; * entity type. All properties that are available in&#10; * \Drupal\Core\Entity\Annotation\EntityType and all the ones additionally&#10; * provided by modules can be altered here.&#10; *&#10; * Do not use this hook to add information to entity types, unless one of the&#10; * following is true:&#10; * - You are filling in default values.&#10; * - You need to dynamically add information only in certain circumstances.&#10; * - Your hook needs to run after hook_entity_type_build() implementations.&#10; * Use hook_entity_type_build() instead in all other cases.&#10; *&#10; * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types&#10; *   An associative array of all entity type definitions, keyed by the entity&#10; *   type name. Passed by reference.&#10; *&#10; * @see \Drupal\Core\Entity\Entity&#10; * @see \Drupal\Core\Entity\EntityTypeInterface&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_type_alter(array &amp;$entity_types) {&#10;  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */&#10;  // Set the controller class for nodes to an alternate implementation of the&#10;  // Drupal\Core\Entity\EntityStorageInterface interface.&#10;  $entity_types[&#39;node&#39;]-&#62;setStorageClass(&#39;Drupal\mymodule\MyCustomNodeStorage&#39;);&#10;  $END$&#10;}" description="hook_entity_type_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_type_alter" value="/**&#10; * Implements hook_entity_type_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_type_alter(array &amp;$entity_types) {&#10;  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */&#10;  // Set the controller class for nodes to an alternate implementation of the&#10;  // Drupal\Core\Entity\EntityStorageInterface interface.&#10;  $entity_types[&#39;node&#39;]-&#62;setStorageClass(&#39;Drupal\mymodule\MyCustomNodeStorage&#39;);&#10;  $END$&#10;}" description="hook_entity_type_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_view_mode_info_alter" value="/**&#10; * Implements hook_entity_view_mode_info_alter().&#10; *&#10; * Alter the view modes for entity types.&#10; *&#10; * @param array $view_modes&#10; *   An array of view modes, keyed first by entity type, then by view mode name.&#10; *&#10; * @see \Drupal\Core\Entity\EntityManagerInterface::getAllViewModes()&#10; * @see \Drupal\Core\Entity\EntityManagerInterface::getViewModes()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_view_mode_info_alter(&amp;$view_modes) {&#10;  $view_modes[&#39;user&#39;][&#39;full&#39;][&#39;status&#39;] = TRUE;&#10;  $END$&#10;}" description="hook_entity_view_mode_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_view_mode_info_alter" value="/**&#10; * Implements hook_entity_view_mode_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_view_mode_info_alter(&amp;$view_modes) {&#10;  $view_modes[&#39;user&#39;][&#39;full&#39;][&#39;status&#39;] = TRUE;&#10;  $END$&#10;}" description="hook_entity_view_mode_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_bundle_info" value="/**&#10; * Implements hook_entity_bundle_info().&#10; *&#10; * Describe the bundles for entity types.&#10; *&#10; * @return array&#10; *   An associative array of all entity bundles, keyed by the entity&#10; *   type name, and then the bundle name, with the following keys:&#10; *   - label: The human-readable name of the bundle.&#10; *   - uri_callback: The same as the &#39;uri_callback&#39; key defined for the entity&#10; *     type in the EntityManager, but for the bundle only. When determining&#10; *     the URI of an entity, if a &#39;uri_callback&#39; is defined for both the&#10; *     entity type and the bundle, the one for the bundle is used.&#10; *   - translatable: (optional) A boolean value specifying whether this bundle&#10; *     has translation support enabled. Defaults to FALSE.&#10; *&#10; * @see \Drupal\Core\Entity\EntityTypeBundleInfo::getBundleInfo()&#10; * @see hook_entity_bundle_info_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_bundle_info() {&#10;  $bundles[&#39;user&#39;][&#39;user&#39;][&#39;label&#39;] = t(&#39;User&#39;);&#10;  return $bundles;&#10;  $END$&#10;}" description="hook_entity_bundle_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_bundle_info" value="/**&#10; * Implements hook_entity_bundle_info().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_bundle_info() {&#10;  $bundles[&#39;user&#39;][&#39;user&#39;][&#39;label&#39;] = t(&#39;User&#39;);&#10;  return $bundles;&#10;  $END$&#10;}" description="hook_entity_bundle_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_bundle_info_alter" value="/**&#10; * Implements hook_entity_bundle_info_alter().&#10; *&#10; * Alter the bundles for entity types.&#10; *&#10; * @param array $bundles&#10; *   An array of bundles, keyed first by entity type, then by bundle name.&#10; *&#10; * @see Drupal\Core\Entity\EntityTypeBundleInfo::getBundleInfo()&#10; * @see hook_entity_bundle_info()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_bundle_info_alter(&amp;$bundles) {&#10;  $bundles[&#39;user&#39;][&#39;user&#39;][&#39;label&#39;] = t(&#39;Full account&#39;);&#10;  $END$&#10;}" description="hook_entity_bundle_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_bundle_info_alter" value="/**&#10; * Implements hook_entity_bundle_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_bundle_info_alter(&amp;$bundles) {&#10;  $bundles[&#39;user&#39;][&#39;user&#39;][&#39;label&#39;] = t(&#39;Full account&#39;);&#10;  $END$&#10;}" description="hook_entity_bundle_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_bundle_create" value="/**&#10; * Implements hook_entity_bundle_create().&#10; *&#10; * Act on entity_bundle_create().&#10; *&#10; * This hook is invoked after the operation has been performed.&#10; *&#10; * @param string $entity_type_id&#10; *   The type of $entity; e.g. &#39;node&#39; or &#39;user&#39;.&#10; * @param string $bundle&#10; *   The name of the bundle.&#10; *&#10; * @see entity_crud&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_bundle_create($entity_type_id, $bundle) {&#10;  // When a new bundle is created, the menu needs to be rebuilt to add the&#10;  // Field UI menu item tabs.&#10;  \Drupal::service(&#39;router.builder&#39;)-&#62;setRebuildNeeded();&#10;  $END$&#10;}" description="hook_entity_bundle_create" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_bundle_create" value="/**&#10; * Implements hook_entity_bundle_create().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_bundle_create($entity_type_id, $bundle) {&#10;  // When a new bundle is created, the menu needs to be rebuilt to add the&#10;  // Field UI menu item tabs.&#10;  \Drupal::service(&#39;router.builder&#39;)-&#62;setRebuildNeeded();&#10;  $END$&#10;}" description="hook_entity_bundle_create" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_bundle_delete" value="/**&#10; * Implements hook_entity_bundle_delete().&#10; *&#10; * Act on entity_bundle_delete().&#10; *&#10; * This hook is invoked after the operation has been performed.&#10; *&#10; * @param string $entity_type_id&#10; *   The type of entity; for example, &#39;node&#39; or &#39;user&#39;.&#10; * @param string $bundle&#10; *   The bundle that was just deleted.&#10; *&#10; * @ingroup entity_crud&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_bundle_delete($entity_type_id, $bundle) {&#10;  // Remove the settings associated with the bundle in my_module.settings.&#10;  $config = \Drupal::config(&#39;my_module.settings&#39;);&#10;  $bundle_settings = $config-&#62;get(&#39;bundle_settings&#39;);&#10;  if (isset($bundle_settings[$entity_type_id][$bundle])) {&#10;    unset($bundle_settings[$entity_type_id][$bundle]);&#10;    $config-&#62;set(&#39;bundle_settings&#39;, $bundle_settings);&#10;  }&#10;  $END$&#10;}" description="hook_entity_bundle_delete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_bundle_delete" value="/**&#10; * Implements hook_entity_bundle_delete().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_bundle_delete($entity_type_id, $bundle) {&#10;  // Remove the settings associated with the bundle in my_module.settings.&#10;  $config = \Drupal::config(&#39;my_module.settings&#39;);&#10;  $bundle_settings = $config-&#62;get(&#39;bundle_settings&#39;);&#10;  if (isset($bundle_settings[$entity_type_id][$bundle])) {&#10;    unset($bundle_settings[$entity_type_id][$bundle]);&#10;    $config-&#62;set(&#39;bundle_settings&#39;, $bundle_settings);&#10;  }&#10;  $END$&#10;}" description="hook_entity_bundle_delete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_create" value="/**&#10; * Implements hook_entity_create().&#10; *&#10; * Acts when creating a new entity.&#10; *&#10; * This hook runs after a new entity object has just been instantiated.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity object.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_ENTITY_TYPE_create()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_create(\Drupal\Core\Entity\EntityInterface $entity) {&#10;  \Drupal::logger(&#39;example&#39;)-&#62;info(&#39;Entity created: @label&#39;, [&#39;@label&#39; =&#62; $entity-&#62;label()]);&#10;  $END$&#10;}" description="hook_entity_create" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_create" value="/**&#10; * Implements hook_entity_create().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_create(\Drupal\Core\Entity\EntityInterface $entity) {&#10;  \Drupal::logger(&#39;example&#39;)-&#62;info(&#39;Entity created: @label&#39;, [&#39;@label&#39; =&#62; $entity-&#62;label()]);&#10;  $END$&#10;}" description="hook_entity_create" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_create" value="/**&#10; * Implements hook_ENTITY_TYPE_create().&#10; *&#10; * Acts when creating a new entity of a specific type.&#10; *&#10; * This hook runs after a new entity object has just been instantiated.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity object.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_entity_create()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_create(\Drupal\Core\Entity\EntityInterface $entity) {&#10;  \Drupal::logger(&#39;example&#39;)-&#62;info(&#39;ENTITY_TYPE created: @label&#39;, [&#39;@label&#39; =&#62; $entity-&#62;label()]);&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_create" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_create" value="/**&#10; * Implements hook_ENTITY_TYPE_create().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_create(\Drupal\Core\Entity\EntityInterface $entity) {&#10;  \Drupal::logger(&#39;example&#39;)-&#62;info(&#39;ENTITY_TYPE created: @label&#39;, [&#39;@label&#39; =&#62; $entity-&#62;label()]);&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_create" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_load" value="/**&#10; * Implements hook_entity_load().&#10; *&#10; * Act on entities when loaded.&#10; *&#10; * This is a generic load hook called for all entity types loaded via the&#10; * entity API.&#10; *&#10; * hook_entity_storage_load() should be used to load additional data for&#10; * content entities.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface[] $entities&#10; *   The entities keyed by entity ID.&#10; * @param string $entity_type_id&#10; *   The type of entities being loaded (i.e. node, user, comment).&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_ENTITY_TYPE_load()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_load(array $entities, $entity_type_id) {&#10;  foreach ($entities as $entity) {&#10;    $entity-&#62;foo = mymodule_add_something($entity);&#10;  }&#10;  $END$&#10;}" description="hook_entity_load" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_load" value="/**&#10; * Implements hook_entity_load().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_load(array $entities, $entity_type_id) {&#10;  foreach ($entities as $entity) {&#10;    $entity-&#62;foo = mymodule_add_something($entity);&#10;  }&#10;  $END$&#10;}" description="hook_entity_load" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_load" value="/**&#10; * Implements hook_ENTITY_TYPE_load().&#10; *&#10; * Act on entities of a specific type when loaded.&#10; *&#10; * @param array $entities&#10; *   The entities keyed by entity ID.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_entity_load()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_load($entities) {&#10;  foreach ($entities as $entity) {&#10;    $entity-&#62;foo = mymodule_add_something($entity);&#10;  }&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_load" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_load" value="/**&#10; * Implements hook_ENTITY_TYPE_load().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_load($entities) {&#10;  foreach ($entities as $entity) {&#10;    $entity-&#62;foo = mymodule_add_something($entity);&#10;  }&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_load" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_storage_load" value="/**&#10; * Implements hook_entity_storage_load().&#10; *&#10; * Act on content entities when loaded from the storage.&#10; *&#10; * The results of this hook will be cached.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface[] $entities&#10; *   The entities keyed by entity ID.&#10; * @param string $entity_type&#10; *   The type of entities being loaded (i.e. node, user, comment).&#10; *&#10; * @see hook_entity_load()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_storage_load(array $entities, $entity_type) {&#10;  foreach ($entities as $entity) {&#10;    $entity-&#62;foo = mymodule_add_something_uncached($entity);&#10;  }&#10;  $END$&#10;}" description="hook_entity_storage_load" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_storage_load" value="/**&#10; * Implements hook_entity_storage_load().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_storage_load(array $entities, $entity_type) {&#10;  foreach ($entities as $entity) {&#10;    $entity-&#62;foo = mymodule_add_something_uncached($entity);&#10;  }&#10;  $END$&#10;}" description="hook_entity_storage_load" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_storage_load" value="/**&#10; * Implements hook_ENTITY_TYPE_storage_load().&#10; *&#10; * Act on content entities of a given type when loaded from the storage.&#10; *&#10; * The results of this hook will be cached if the entity type supports it.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface[] $entities&#10; *   The entities keyed by entity ID.&#10; *&#10; * @see hook_entity_storage_load()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_storage_load(array $entities) {&#10;  foreach ($entities as $entity) {&#10;    $entity-&#62;foo = mymodule_add_something_uncached($entity);&#10;  }&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_storage_load" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_storage_load" value="/**&#10; * Implements hook_ENTITY_TYPE_storage_load().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_storage_load(array $entities) {&#10;  foreach ($entities as $entity) {&#10;    $entity-&#62;foo = mymodule_add_something_uncached($entity);&#10;  }&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_storage_load" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_presave" value="/**&#10; * Implements hook_entity_presave().&#10; *&#10; * Act on an entity before it is created or updated.&#10; *&#10; * You can get the original entity object from $entity-&#62;original when it is an&#10; * update of the entity.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity object.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_ENTITY_TYPE_presave()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {&#10;  if ($entity instanceof ContentEntityInterface &amp;&amp; $entity-&#62;isTranslatable()) {&#10;    $route_match = \Drupal::routeMatch();&#10;    \Drupal::service(&#39;content_translation.synchronizer&#39;)-&#62;synchronizeFields($entity, $entity-&#62;language()-&#62;getId(), $route_match-&#62;getParameter(&#39;source_langcode&#39;));&#10;  }&#10;  $END$&#10;}" description="hook_entity_presave" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_presave" value="/**&#10; * Implements hook_entity_presave().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {&#10;  if ($entity instanceof ContentEntityInterface &amp;&amp; $entity-&#62;isTranslatable()) {&#10;    $route_match = \Drupal::routeMatch();&#10;    \Drupal::service(&#39;content_translation.synchronizer&#39;)-&#62;synchronizeFields($entity, $entity-&#62;language()-&#62;getId(), $route_match-&#62;getParameter(&#39;source_langcode&#39;));&#10;  }&#10;  $END$&#10;}" description="hook_entity_presave" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_presave" value="/**&#10; * Implements hook_ENTITY_TYPE_presave().&#10; *&#10; * Act on a specific type of entity before it is created or updated.&#10; *&#10; * You can get the original entity object from $entity-&#62;original when it is an&#10; * update of the entity.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity object.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_entity_presave()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_presave(Drupal\Core\Entity\EntityInterface $entity) {&#10;  if ($entity-&#62;isTranslatable()) {&#10;    $route_match = \Drupal::routeMatch();&#10;    \Drupal::service(&#39;content_translation.synchronizer&#39;)-&#62;synchronizeFields($entity, $entity-&#62;language()-&#62;getId(), $route_match-&#62;getParameter(&#39;source_langcode&#39;));&#10;  }&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_presave" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_presave" value="/**&#10; * Implements hook_ENTITY_TYPE_presave().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_presave(Drupal\Core\Entity\EntityInterface $entity) {&#10;  if ($entity-&#62;isTranslatable()) {&#10;    $route_match = \Drupal::routeMatch();&#10;    \Drupal::service(&#39;content_translation.synchronizer&#39;)-&#62;synchronizeFields($entity, $entity-&#62;language()-&#62;getId(), $route_match-&#62;getParameter(&#39;source_langcode&#39;));&#10;  }&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_presave" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_insert" value="/**&#10; * Implements hook_entity_insert().&#10; *&#10; * Respond to creation of a new entity.&#10; *&#10; * This hook runs once the entity has been stored. Note that hook&#10; * implementations may not alter the stored entity data.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity object.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_ENTITY_TYPE_insert()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {&#10;  // Insert the new entity into a fictional table of all entities.&#10;  db_insert(&#39;example_entity&#39;)&#10;    -&#62;fields(array(&#10;      &#39;type&#39; =&#62; $entity-&#62;getEntityTypeId(),&#10;      &#39;id&#39; =&#62; $entity-&#62;id(),&#10;      &#39;created&#39; =&#62; REQUEST_TIME,&#10;      &#39;updated&#39; =&#62; REQUEST_TIME,&#10;    ))&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_entity_insert" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_insert" value="/**&#10; * Implements hook_entity_insert().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {&#10;  // Insert the new entity into a fictional table of all entities.&#10;  db_insert(&#39;example_entity&#39;)&#10;    -&#62;fields(array(&#10;      &#39;type&#39; =&#62; $entity-&#62;getEntityTypeId(),&#10;      &#39;id&#39; =&#62; $entity-&#62;id(),&#10;      &#39;created&#39; =&#62; REQUEST_TIME,&#10;      &#39;updated&#39; =&#62; REQUEST_TIME,&#10;    ))&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_entity_insert" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_insert" value="/**&#10; * Implements hook_ENTITY_TYPE_insert().&#10; *&#10; * Respond to creation of a new entity of a particular type.&#10; *&#10; * This hook runs once the entity has been stored. Note that hook&#10; * implementations may not alter the stored entity data.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity object.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_entity_insert()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_insert(Drupal\Core\Entity\EntityInterface $entity) {&#10;  // Insert the new entity into a fictional table of this type of entity.&#10;  db_insert(&#39;example_entity&#39;)&#10;    -&#62;fields(array(&#10;      &#39;id&#39; =&#62; $entity-&#62;id(),&#10;      &#39;created&#39; =&#62; REQUEST_TIME,&#10;      &#39;updated&#39; =&#62; REQUEST_TIME,&#10;    ))&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_insert" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_insert" value="/**&#10; * Implements hook_ENTITY_TYPE_insert().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_insert(Drupal\Core\Entity\EntityInterface $entity) {&#10;  // Insert the new entity into a fictional table of this type of entity.&#10;  db_insert(&#39;example_entity&#39;)&#10;    -&#62;fields(array(&#10;      &#39;id&#39; =&#62; $entity-&#62;id(),&#10;      &#39;created&#39; =&#62; REQUEST_TIME,&#10;      &#39;updated&#39; =&#62; REQUEST_TIME,&#10;    ))&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_insert" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_update" value="/**&#10; * Implements hook_entity_update().&#10; *&#10; * Respond to updates to an entity.&#10; *&#10; * This hook runs once the entity storage has been updated. Note that hook&#10; * implementations may not alter the stored entity data. Get the original entity&#10; * object from $entity-&#62;original.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity object.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_ENTITY_TYPE_update()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_update(Drupal\Core\Entity\EntityInterface $entity) {&#10;  // Update the entity&#39;s entry in a fictional table of all entities.&#10;  db_update(&#39;example_entity&#39;)&#10;    -&#62;fields(array(&#10;      &#39;updated&#39; =&#62; REQUEST_TIME,&#10;    ))&#10;    -&#62;condition(&#39;type&#39;, $entity-&#62;getEntityTypeId())&#10;    -&#62;condition(&#39;id&#39;, $entity-&#62;id())&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_entity_update" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_update" value="/**&#10; * Implements hook_entity_update().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_update(Drupal\Core\Entity\EntityInterface $entity) {&#10;  // Update the entity&#39;s entry in a fictional table of all entities.&#10;  db_update(&#39;example_entity&#39;)&#10;    -&#62;fields(array(&#10;      &#39;updated&#39; =&#62; REQUEST_TIME,&#10;    ))&#10;    -&#62;condition(&#39;type&#39;, $entity-&#62;getEntityTypeId())&#10;    -&#62;condition(&#39;id&#39;, $entity-&#62;id())&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_entity_update" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_update" value="/**&#10; * Implements hook_ENTITY_TYPE_update().&#10; *&#10; * Respond to updates to an entity of a particular type.&#10; *&#10; * This hook runs once the entity storage has been updated. Note that hook&#10; * implementations may not alter the stored entity data. Get the original entity&#10; * object from $entity-&#62;original.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity object.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_entity_update()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_update(Drupal\Core\Entity\EntityInterface $entity) {&#10;  // Update the entity&#39;s entry in a fictional table of this type of entity.&#10;  db_update(&#39;example_entity&#39;)&#10;    -&#62;fields(array(&#10;      &#39;updated&#39; =&#62; REQUEST_TIME,&#10;    ))&#10;    -&#62;condition(&#39;id&#39;, $entity-&#62;id())&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_update" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_update" value="/**&#10; * Implements hook_ENTITY_TYPE_update().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_update(Drupal\Core\Entity\EntityInterface $entity) {&#10;  // Update the entity&#39;s entry in a fictional table of this type of entity.&#10;  db_update(&#39;example_entity&#39;)&#10;    -&#62;fields(array(&#10;      &#39;updated&#39; =&#62; REQUEST_TIME,&#10;    ))&#10;    -&#62;condition(&#39;id&#39;, $entity-&#62;id())&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_update" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_translation_create" value="/**&#10; * Implements hook_entity_translation_create().&#10; *&#10; * Acts when creating a new entity translation.&#10; *&#10; * This hook runs after a new entity translation object has just been&#10; * instantiated.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $translation&#10; *   The entity object.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_ENTITY_TYPE_translation_create()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_translation_create(\Drupal\Core\Entity\EntityInterface $translation) {&#10;  \Drupal::logger(&#39;example&#39;)-&#62;info(&#39;Entity translation created: @label&#39;, [&#39;@label&#39; =&#62; $translation-&#62;label()]);&#10;  $END$&#10;}" description="hook_entity_translation_create" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_translation_create" value="/**&#10; * Implements hook_entity_translation_create().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_translation_create(\Drupal\Core\Entity\EntityInterface $translation) {&#10;  \Drupal::logger(&#39;example&#39;)-&#62;info(&#39;Entity translation created: @label&#39;, [&#39;@label&#39; =&#62; $translation-&#62;label()]);&#10;  $END$&#10;}" description="hook_entity_translation_create" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_translation_create" value="/**&#10; * Implements hook_ENTITY_TYPE_translation_create().&#10; *&#10; * Acts when creating a new entity translation of a specific type.&#10; *&#10; * This hook runs after a new entity translation object has just been&#10; * instantiated.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $translation&#10; *   The entity object.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_entity_translation_create()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_translation_create(\Drupal\Core\Entity\EntityInterface $translation) {&#10;  \Drupal::logger(&#39;example&#39;)-&#62;info(&#39;ENTITY_TYPE translation created: @label&#39;, [&#39;@label&#39; =&#62; $translation-&#62;label()]);&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_translation_create" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_translation_create" value="/**&#10; * Implements hook_ENTITY_TYPE_translation_create().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_translation_create(\Drupal\Core\Entity\EntityInterface $translation) {&#10;  \Drupal::logger(&#39;example&#39;)-&#62;info(&#39;ENTITY_TYPE translation created: @label&#39;, [&#39;@label&#39; =&#62; $translation-&#62;label()]);&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_translation_create" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_translation_insert" value="/**&#10; * Implements hook_entity_translation_insert().&#10; *&#10; * Respond to creation of a new entity translation.&#10; *&#10; * This hook runs once the entity translation has been stored. Note that hook&#10; * implementations may not alter the stored entity translation data.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $translation&#10; *   The entity object of the translation just stored.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_ENTITY_TYPE_translation_insert()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_translation_insert(\Drupal\Core\Entity\EntityInterface $translation) {&#10;  $variables = array(&#10;    &#39;@language&#39; =&#62; $translation-&#62;language()-&#62;getName(),&#10;    &#39;@label&#39; =&#62; $translation-&#62;getUntranslated()-&#62;label(),&#10;  );&#10;  \Drupal::logger(&#39;example&#39;)-&#62;notice(&#39;The @language translation of @label has just been stored.&#39;, $variables);&#10;  $END$&#10;}" description="hook_entity_translation_insert" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_translation_insert" value="/**&#10; * Implements hook_entity_translation_insert().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_translation_insert(\Drupal\Core\Entity\EntityInterface $translation) {&#10;  $variables = array(&#10;    &#39;@language&#39; =&#62; $translation-&#62;language()-&#62;getName(),&#10;    &#39;@label&#39; =&#62; $translation-&#62;getUntranslated()-&#62;label(),&#10;  );&#10;  \Drupal::logger(&#39;example&#39;)-&#62;notice(&#39;The @language translation of @label has just been stored.&#39;, $variables);&#10;  $END$&#10;}" description="hook_entity_translation_insert" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_translation_insert" value="/**&#10; * Implements hook_ENTITY_TYPE_translation_insert().&#10; *&#10; * Respond to creation of a new entity translation of a particular type.&#10; *&#10; * This hook runs once the entity translation has been stored. Note that hook&#10; * implementations may not alter the stored entity translation data.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $translation&#10; *   The entity object of the translation just stored.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_entity_translation_insert()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_translation_insert(\Drupal\Core\Entity\EntityInterface $translation) {&#10;  $variables = array(&#10;    &#39;@language&#39; =&#62; $translation-&#62;language()-&#62;getName(),&#10;    &#39;@label&#39; =&#62; $translation-&#62;getUntranslated()-&#62;label(),&#10;  );&#10;  \Drupal::logger(&#39;example&#39;)-&#62;notice(&#39;The @language translation of @label has just been stored.&#39;, $variables);&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_translation_insert" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_translation_insert" value="/**&#10; * Implements hook_ENTITY_TYPE_translation_insert().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_translation_insert(\Drupal\Core\Entity\EntityInterface $translation) {&#10;  $variables = array(&#10;    &#39;@language&#39; =&#62; $translation-&#62;language()-&#62;getName(),&#10;    &#39;@label&#39; =&#62; $translation-&#62;getUntranslated()-&#62;label(),&#10;  );&#10;  \Drupal::logger(&#39;example&#39;)-&#62;notice(&#39;The @language translation of @label has just been stored.&#39;, $variables);&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_translation_insert" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_translation_delete" value="/**&#10; * Implements hook_entity_translation_delete().&#10; *&#10; * Respond to entity translation deletion.&#10; *&#10; * This hook runs once the entity translation has been deleted from storage.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $translation&#10; *   The original entity object.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_ENTITY_TYPE_translation_delete()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_translation_delete(\Drupal\Core\Entity\EntityInterface $translation) {&#10;  $variables = array(&#10;    &#39;@language&#39; =&#62; $translation-&#62;language()-&#62;getName(),&#10;    &#39;@label&#39; =&#62; $translation-&#62;label(),&#10;  );&#10;  \Drupal::logger(&#39;example&#39;)-&#62;notice(&#39;The @language translation of @label has just been deleted.&#39;, $variables);&#10;  $END$&#10;}" description="hook_entity_translation_delete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_translation_delete" value="/**&#10; * Implements hook_entity_translation_delete().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_translation_delete(\Drupal\Core\Entity\EntityInterface $translation) {&#10;  $variables = array(&#10;    &#39;@language&#39; =&#62; $translation-&#62;language()-&#62;getName(),&#10;    &#39;@label&#39; =&#62; $translation-&#62;label(),&#10;  );&#10;  \Drupal::logger(&#39;example&#39;)-&#62;notice(&#39;The @language translation of @label has just been deleted.&#39;, $variables);&#10;  $END$&#10;}" description="hook_entity_translation_delete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_translation_delete" value="/**&#10; * Implements hook_ENTITY_TYPE_translation_delete().&#10; *&#10; * Respond to entity translation deletion of a particular type.&#10; *&#10; * This hook runs once the entity translation has been deleted from storage.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $translation&#10; *   The original entity object.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_entity_translation_delete()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_translation_delete(\Drupal\Core\Entity\EntityInterface $translation) {&#10;  $variables = array(&#10;    &#39;@language&#39; =&#62; $translation-&#62;language()-&#62;getName(),&#10;    &#39;@label&#39; =&#62; $translation-&#62;label(),&#10;  );&#10;  \Drupal::logger(&#39;example&#39;)-&#62;notice(&#39;The @language translation of @label has just been deleted.&#39;, $variables);&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_translation_delete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_translation_delete" value="/**&#10; * Implements hook_ENTITY_TYPE_translation_delete().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_translation_delete(\Drupal\Core\Entity\EntityInterface $translation) {&#10;  $variables = array(&#10;    &#39;@language&#39; =&#62; $translation-&#62;language()-&#62;getName(),&#10;    &#39;@label&#39; =&#62; $translation-&#62;label(),&#10;  );&#10;  \Drupal::logger(&#39;example&#39;)-&#62;notice(&#39;The @language translation of @label has just been deleted.&#39;, $variables);&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_translation_delete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_predelete" value="/**&#10; * Implements hook_entity_predelete().&#10; *&#10; * Act before entity deletion.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity object for the entity that is about to be deleted.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_ENTITY_TYPE_predelete()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_predelete(Drupal\Core\Entity\EntityInterface $entity) {&#10;  // Count references to this entity in a custom table before they are removed&#10;  // upon entity deletion.&#10;  $id = $entity-&#62;id();&#10;  $type = $entity-&#62;getEntityTypeId();&#10;  $count = db_select(&#39;example_entity_data&#39;)&#10;    -&#62;condition(&#39;type&#39;, $type)&#10;    -&#62;condition(&#39;id&#39;, $id)&#10;    -&#62;countQuery()&#10;    -&#62;execute()&#10;    -&#62;fetchField();&#10;&#10;  // Log the count in a table that records this statistic for deleted entities.&#10;  db_merge(&#39;example_deleted_entity_statistics&#39;)&#10;    -&#62;key(array(&#39;type&#39; =&#62; $type, &#39;id&#39; =&#62; $id))&#10;    -&#62;fields(array(&#39;count&#39; =&#62; $count))&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_entity_predelete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_predelete" value="/**&#10; * Implements hook_entity_predelete().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_predelete(Drupal\Core\Entity\EntityInterface $entity) {&#10;  // Count references to this entity in a custom table before they are removed&#10;  // upon entity deletion.&#10;  $id = $entity-&#62;id();&#10;  $type = $entity-&#62;getEntityTypeId();&#10;  $count = db_select(&#39;example_entity_data&#39;)&#10;    -&#62;condition(&#39;type&#39;, $type)&#10;    -&#62;condition(&#39;id&#39;, $id)&#10;    -&#62;countQuery()&#10;    -&#62;execute()&#10;    -&#62;fetchField();&#10;&#10;  // Log the count in a table that records this statistic for deleted entities.&#10;  db_merge(&#39;example_deleted_entity_statistics&#39;)&#10;    -&#62;key(array(&#39;type&#39; =&#62; $type, &#39;id&#39; =&#62; $id))&#10;    -&#62;fields(array(&#39;count&#39; =&#62; $count))&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_entity_predelete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_predelete" value="/**&#10; * Implements hook_ENTITY_TYPE_predelete().&#10; *&#10; * Act before entity deletion of a particular entity type.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity object for the entity that is about to be deleted.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_entity_predelete()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_predelete(Drupal\Core\Entity\EntityInterface $entity) {&#10;  // Count references to this entity in a custom table before they are removed&#10;  // upon entity deletion.&#10;  $id = $entity-&#62;id();&#10;  $type = $entity-&#62;getEntityTypeId();&#10;  $count = db_select(&#39;example_entity_data&#39;)&#10;    -&#62;condition(&#39;type&#39;, $type)&#10;    -&#62;condition(&#39;id&#39;, $id)&#10;    -&#62;countQuery()&#10;    -&#62;execute()&#10;    -&#62;fetchField();&#10;&#10;  // Log the count in a table that records this statistic for deleted entities.&#10;  db_merge(&#39;example_deleted_entity_statistics&#39;)&#10;    -&#62;key(array(&#39;type&#39; =&#62; $type, &#39;id&#39; =&#62; $id))&#10;    -&#62;fields(array(&#39;count&#39; =&#62; $count))&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_predelete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_predelete" value="/**&#10; * Implements hook_ENTITY_TYPE_predelete().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_predelete(Drupal\Core\Entity\EntityInterface $entity) {&#10;  // Count references to this entity in a custom table before they are removed&#10;  // upon entity deletion.&#10;  $id = $entity-&#62;id();&#10;  $type = $entity-&#62;getEntityTypeId();&#10;  $count = db_select(&#39;example_entity_data&#39;)&#10;    -&#62;condition(&#39;type&#39;, $type)&#10;    -&#62;condition(&#39;id&#39;, $id)&#10;    -&#62;countQuery()&#10;    -&#62;execute()&#10;    -&#62;fetchField();&#10;&#10;  // Log the count in a table that records this statistic for deleted entities.&#10;  db_merge(&#39;example_deleted_entity_statistics&#39;)&#10;    -&#62;key(array(&#39;type&#39; =&#62; $type, &#39;id&#39; =&#62; $id))&#10;    -&#62;fields(array(&#39;count&#39; =&#62; $count))&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_predelete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_delete" value="/**&#10; * Implements hook_entity_delete().&#10; *&#10; * Respond to entity deletion.&#10; *&#10; * This hook runs once the entity has been deleted from the storage.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity object for the entity that has been deleted.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_ENTITY_TYPE_delete()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {&#10;  // Delete the entity&#39;s entry from a fictional table of all entities.&#10;  db_delete(&#39;example_entity&#39;)&#10;    -&#62;condition(&#39;type&#39;, $entity-&#62;getEntityTypeId())&#10;    -&#62;condition(&#39;id&#39;, $entity-&#62;id())&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_entity_delete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_delete" value="/**&#10; * Implements hook_entity_delete().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {&#10;  // Delete the entity&#39;s entry from a fictional table of all entities.&#10;  db_delete(&#39;example_entity&#39;)&#10;    -&#62;condition(&#39;type&#39;, $entity-&#62;getEntityTypeId())&#10;    -&#62;condition(&#39;id&#39;, $entity-&#62;id())&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_entity_delete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_delete" value="/**&#10; * Implements hook_ENTITY_TYPE_delete().&#10; *&#10; * Respond to entity deletion of a particular type.&#10; *&#10; * This hook runs once the entity has been deleted from the storage.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity object for the entity that has been deleted.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_entity_delete()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_delete(Drupal\Core\Entity\EntityInterface $entity) {&#10;  // Delete the entity&#39;s entry from a fictional table of all entities.&#10;  db_delete(&#39;example_entity&#39;)&#10;    -&#62;condition(&#39;type&#39;, $entity-&#62;getEntityTypeId())&#10;    -&#62;condition(&#39;id&#39;, $entity-&#62;id())&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_delete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_delete" value="/**&#10; * Implements hook_ENTITY_TYPE_delete().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_delete(Drupal\Core\Entity\EntityInterface $entity) {&#10;  // Delete the entity&#39;s entry from a fictional table of all entities.&#10;  db_delete(&#39;example_entity&#39;)&#10;    -&#62;condition(&#39;type&#39;, $entity-&#62;getEntityTypeId())&#10;    -&#62;condition(&#39;id&#39;, $entity-&#62;id())&#10;    -&#62;execute();&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_delete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_revision_delete" value="/**&#10; * Implements hook_entity_revision_delete().&#10; *&#10; * Respond to entity revision deletion.&#10; *&#10; * This hook runs once the entity revision has been deleted from the storage.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity object for the entity revision that has been deleted.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_ENTITY_TYPE_revision_delete()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_revision_delete(Drupal\Core\Entity\EntityInterface $entity) {&#10;  $referenced_files_by_field = _editor_get_file_uuids_by_field($entity);&#10;  foreach ($referenced_files_by_field as $field =&#62; $uuids) {&#10;    _editor_delete_file_usage($uuids, $entity, 1);&#10;  }&#10;  $END$&#10;}" description="hook_entity_revision_delete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_revision_delete" value="/**&#10; * Implements hook_entity_revision_delete().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_revision_delete(Drupal\Core\Entity\EntityInterface $entity) {&#10;  $referenced_files_by_field = _editor_get_file_uuids_by_field($entity);&#10;  foreach ($referenced_files_by_field as $field =&#62; $uuids) {&#10;    _editor_delete_file_usage($uuids, $entity, 1);&#10;  }&#10;  $END$&#10;}" description="hook_entity_revision_delete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_revision_delete" value="/**&#10; * Implements hook_ENTITY_TYPE_revision_delete().&#10; *&#10; * Respond to entity revision deletion of a particular type.&#10; *&#10; * This hook runs once the entity revision has been deleted from the storage.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity object for the entity revision that has been deleted.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_entity_revision_delete()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_revision_delete(Drupal\Core\Entity\EntityInterface $entity) {&#10;  $referenced_files_by_field = _editor_get_file_uuids_by_field($entity);&#10;  foreach ($referenced_files_by_field as $field =&#62; $uuids) {&#10;    _editor_delete_file_usage($uuids, $entity, 1);&#10;  }&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_revision_delete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_revision_delete" value="/**&#10; * Implements hook_ENTITY_TYPE_revision_delete().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_revision_delete(Drupal\Core\Entity\EntityInterface $entity) {&#10;  $referenced_files_by_field = _editor_get_file_uuids_by_field($entity);&#10;  foreach ($referenced_files_by_field as $field =&#62; $uuids) {&#10;    _editor_delete_file_usage($uuids, $entity, 1);&#10;  }&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_revision_delete" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_view" value="/**&#10; * Implements hook_entity_view().&#10; *&#10; * Act on entities being assembled before rendering.&#10; *&#10; * @param &amp;$build&#10; *   A renderable array representing the entity content. The module may add&#10; *   elements to $build prior to rendering. The structure of $build is a&#10; *   renderable array as expected by drupal_render().&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity object.&#10; * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display&#10; *   The entity view display holding the display options configured for the&#10; *   entity components.&#10; * @param $view_mode&#10; *   The view mode the entity is rendered in.&#10; *&#10; * @see hook_entity_view_alter()&#10; * @see hook_ENTITY_TYPE_view()&#10; *&#10; * @ingroup entity_crud&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_view(array &amp;$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {&#10;  // Only do the extra work if the component is configured to be displayed.&#10;  // This assumes a &#39;mymodule_addition&#39; extra field has been defined for the&#10;  // entity bundle in hook_entity_extra_field_info().&#10;  if ($display-&#62;getComponent(&#39;mymodule_addition&#39;)) {&#10;    $build[&#39;mymodule_addition&#39;] = array(&#10;      &#39;#markup&#39; =&#62; mymodule_addition($entity),&#10;      &#39;#theme&#39; =&#62; &#39;mymodule_my_additional_field&#39;,&#10;    );&#10;  }&#10;  $END$&#10;}" description="hook_entity_view" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_view" value="/**&#10; * Implements hook_entity_view().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_view(array &amp;$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {&#10;  // Only do the extra work if the component is configured to be displayed.&#10;  // This assumes a &#39;mymodule_addition&#39; extra field has been defined for the&#10;  // entity bundle in hook_entity_extra_field_info().&#10;  if ($display-&#62;getComponent(&#39;mymodule_addition&#39;)) {&#10;    $build[&#39;mymodule_addition&#39;] = array(&#10;      &#39;#markup&#39; =&#62; mymodule_addition($entity),&#10;      &#39;#theme&#39; =&#62; &#39;mymodule_my_additional_field&#39;,&#10;    );&#10;  }&#10;  $END$&#10;}" description="hook_entity_view" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_view" value="/**&#10; * Implements hook_ENTITY_TYPE_view().&#10; *&#10; * Act on entities of a particular type being assembled before rendering.&#10; *&#10; * @param &amp;$build&#10; *   A renderable array representing the entity content. The module may add&#10; *   elements to $build prior to rendering. The structure of $build is a&#10; *   renderable array as expected by drupal_render().&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity object.&#10; * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display&#10; *   The entity view display holding the display options configured for the&#10; *   entity components.&#10; * @param $view_mode&#10; *   The view mode the entity is rendered in.&#10; *&#10; * @see hook_ENTITY_TYPE_view_alter()&#10; * @see hook_entity_view()&#10; *&#10; * @ingroup entity_crud&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_view(array &amp;$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {&#10;  // Only do the extra work if the component is configured to be displayed.&#10;  // This assumes a &#39;mymodule_addition&#39; extra field has been defined for the&#10;  // entity bundle in hook_entity_extra_field_info().&#10;  if ($display-&#62;getComponent(&#39;mymodule_addition&#39;)) {&#10;    $build[&#39;mymodule_addition&#39;] = array(&#10;      &#39;#markup&#39; =&#62; mymodule_addition($entity),&#10;      &#39;#theme&#39; =&#62; &#39;mymodule_my_additional_field&#39;,&#10;    );&#10;  }&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_view" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_view" value="/**&#10; * Implements hook_ENTITY_TYPE_view().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_view(array &amp;$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {&#10;  // Only do the extra work if the component is configured to be displayed.&#10;  // This assumes a &#39;mymodule_addition&#39; extra field has been defined for the&#10;  // entity bundle in hook_entity_extra_field_info().&#10;  if ($display-&#62;getComponent(&#39;mymodule_addition&#39;)) {&#10;    $build[&#39;mymodule_addition&#39;] = array(&#10;      &#39;#markup&#39; =&#62; mymodule_addition($entity),&#10;      &#39;#theme&#39; =&#62; &#39;mymodule_my_additional_field&#39;,&#10;    );&#10;  }&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_view" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_view_alter" value="/**&#10; * Implements hook_entity_view_alter().&#10; *&#10; * Alter the results of the entity build array.&#10; *&#10; * This hook is called after the content has been assembled in a structured&#10; * array and may be used for doing processing which requires that the complete&#10; * entity content structure has been built.&#10; *&#10; * If a module wishes to act on the rendered HTML of the entity rather than the&#10; * structured content array, it may use this hook to add a #post_render&#10; * callback. Alternatively, it could also implement hook_preprocess_HOOK() for&#10; * the particular entity type template, if there is one (e.g., node.html.twig).&#10; *&#10; * See the @link themeable Default theme implementations topic @endlink and&#10; * drupal_render() for details.&#10; *&#10; * @param array &amp;$build&#10; *   A renderable array representing the entity content.&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity object being rendered.&#10; * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display&#10; *   The entity view display holding the display options configured for the&#10; *   entity components.&#10; *&#10; * @ingroup entity_crud&#10; *&#10; * @see hook_entity_view()&#10; * @see hook_ENTITY_TYPE_view_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_view_alter(array &amp;$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {&#10;  if ($build[&#39;#view_mode&#39;] == &#39;full&#39; &amp;&amp; isset($build[&#39;an_additional_field&#39;])) {&#10;    // Change its weight.&#10;    $build[&#39;an_additional_field&#39;][&#39;#weight&#39;] = -10;&#10;&#10;    // Add a #post_render callback to act on the rendered HTML of the entity.&#10;    $build[&#39;#post_render&#39;][] = &#39;my_module_node_post_render&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_entity_view_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_view_alter" value="/**&#10; * Implements hook_entity_view_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_view_alter(array &amp;$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {&#10;  if ($build[&#39;#view_mode&#39;] == &#39;full&#39; &amp;&amp; isset($build[&#39;an_additional_field&#39;])) {&#10;    // Change its weight.&#10;    $build[&#39;an_additional_field&#39;][&#39;#weight&#39;] = -10;&#10;&#10;    // Add a #post_render callback to act on the rendered HTML of the entity.&#10;    $build[&#39;#post_render&#39;][] = &#39;my_module_node_post_render&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_entity_view_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_view_alter" value="/**&#10; * Implements hook_ENTITY_TYPE_view_alter().&#10; *&#10; * Alter the results of the entity build array for a particular entity type.&#10; *&#10; * This hook is called after the content has been assembled in a structured&#10; * array and may be used for doing processing which requires that the complete&#10; * entity content structure has been built.&#10; *&#10; * If a module wishes to act on the rendered HTML of the entity rather than the&#10; * structured content array, it may use this hook to add a #post_render&#10; * callback. Alternatively, it could also implement hook_preprocess_HOOK() for&#10; * the particular entity type template, if there is one (e.g., node.html.twig).&#10; *&#10; * See the @link themeable Default theme implementations topic @endlink and&#10; * drupal_render() for details.&#10; *&#10; * @param array &amp;$build&#10; *   A renderable array representing the entity content.&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity object being rendered.&#10; * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display&#10; *   The entity view display holding the display options configured for the&#10; *   entity components.&#10; *&#10; * @ingroup entity_crud&#10; *&#10; * @see hook_ENTITY_TYPE_view()&#10; * @see hook_entity_view_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_view_alter(array &amp;$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {&#10;  if ($build[&#39;#view_mode&#39;] == &#39;full&#39; &amp;&amp; isset($build[&#39;an_additional_field&#39;])) {&#10;    // Change its weight.&#10;    $build[&#39;an_additional_field&#39;][&#39;#weight&#39;] = -10;&#10;&#10;    // Add a #post_render callback to act on the rendered HTML of the entity.&#10;    $build[&#39;#post_render&#39;][] = &#39;my_module_node_post_render&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_view_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_view_alter" value="/**&#10; * Implements hook_ENTITY_TYPE_view_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_view_alter(array &amp;$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {&#10;  if ($build[&#39;#view_mode&#39;] == &#39;full&#39; &amp;&amp; isset($build[&#39;an_additional_field&#39;])) {&#10;    // Change its weight.&#10;    $build[&#39;an_additional_field&#39;][&#39;#weight&#39;] = -10;&#10;&#10;    // Add a #post_render callback to act on the rendered HTML of the entity.&#10;    $build[&#39;#post_render&#39;][] = &#39;my_module_node_post_render&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_view_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_prepare_view" value="/**&#10; * Implements hook_entity_prepare_view().&#10; *&#10; * Act on entities as they are being prepared for view.&#10; *&#10; * Allows you to operate on multiple entities as they are being prepared for&#10; * view. Only use this if attaching the data during the entity loading phase&#10; * is not appropriate, for example when attaching other &#39;entity&#39; style objects.&#10; *&#10; * @param string $entity_type_id&#10; *   The type of entities being viewed (i.e. node, user, comment).&#10; * @param array $entities&#10; *   The entities keyed by entity ID.&#10; * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface[] $displays&#10; *   The array of entity view displays holding the display options configured&#10; *   for the entity components, keyed by bundle name.&#10; * @param string $view_mode&#10; *   The view mode.&#10; *&#10; * @ingroup entity_crud&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_prepare_view($entity_type_id, array $entities, array $displays, $view_mode) {&#10;  // Load a specific node into the user object for later theming.&#10;  if (!empty($entities) &amp;&amp; $entity_type_id == &#39;user&#39;) {&#10;    // Only do the extra work if the component is configured to be&#10;    // displayed. This assumes a &#39;mymodule_addition&#39; extra field has been&#10;    // defined for the entity bundle in hook_entity_extra_field_info().&#10;    $ids = array();&#10;    foreach ($entities as $id =&#62; $entity) {&#10;      if ($displays[$entity-&#62;bundle()]-&#62;getComponent(&#39;mymodule_addition&#39;)) {&#10;        $ids[] = $id;&#10;      }&#10;    }&#10;    if ($ids) {&#10;      $nodes = mymodule_get_user_nodes($ids);&#10;      foreach ($ids as $id) {&#10;        $entities[$id]-&#62;user_node = $nodes[$id];&#10;      }&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_entity_prepare_view" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_prepare_view" value="/**&#10; * Implements hook_entity_prepare_view().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_prepare_view($entity_type_id, array $entities, array $displays, $view_mode) {&#10;  // Load a specific node into the user object for later theming.&#10;  if (!empty($entities) &amp;&amp; $entity_type_id == &#39;user&#39;) {&#10;    // Only do the extra work if the component is configured to be&#10;    // displayed. This assumes a &#39;mymodule_addition&#39; extra field has been&#10;    // defined for the entity bundle in hook_entity_extra_field_info().&#10;    $ids = array();&#10;    foreach ($entities as $id =&#62; $entity) {&#10;      if ($displays[$entity-&#62;bundle()]-&#62;getComponent(&#39;mymodule_addition&#39;)) {&#10;        $ids[] = $id;&#10;      }&#10;    }&#10;    if ($ids) {&#10;      $nodes = mymodule_get_user_nodes($ids);&#10;      foreach ($ids as $id) {&#10;        $entities[$id]-&#62;user_node = $nodes[$id];&#10;      }&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_entity_prepare_view" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_view_mode_alter" value="/**&#10; * Implements hook_entity_view_mode_alter().&#10; *&#10; * Change the view mode of an entity that is being displayed.&#10; *&#10; * @param string $view_mode&#10; *   The view_mode that is to be used to display the entity.&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity that is being viewed.&#10; * @param array $context&#10; *   Array with additional context information, currently only contains the&#10; *   langcode the entity is viewed in.&#10; *&#10; * @ingroup entity_crud&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_view_mode_alter(&amp;$view_mode, Drupal\Core\Entity\EntityInterface $entity, $context) {&#10;  // For nodes, change the view mode when it is teaser.&#10;  if ($entity-&#62;getEntityTypeId() == &#39;node&#39; &amp;&amp; $view_mode == &#39;teaser&#39;) {&#10;    $view_mode = &#39;my_custom_view_mode&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_entity_view_mode_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_view_mode_alter" value="/**&#10; * Implements hook_entity_view_mode_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_view_mode_alter(&amp;$view_mode, Drupal\Core\Entity\EntityInterface $entity, $context) {&#10;  // For nodes, change the view mode when it is teaser.&#10;  if ($entity-&#62;getEntityTypeId() == &#39;node&#39; &amp;&amp; $view_mode == &#39;teaser&#39;) {&#10;    $view_mode = &#39;my_custom_view_mode&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_entity_view_mode_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_build_defaults_alter" value="/**&#10; * Implements hook_ENTITY_TYPE_build_defaults_alter().&#10; *&#10; * Alter entity renderable values before cache checking in drupal_render().&#10; *&#10; * Invoked for a specific entity type.&#10; *&#10; * The values in the #cache key of the renderable array are used to determine if&#10; * a cache entry exists for the entity&#39;s rendered output. Ideally only values&#10; * that pertain to caching should be altered in this hook.&#10; *&#10; * @param array &amp;$build&#10; *   A renderable array containing the entity&#39;s caching and view mode values.&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity that is being viewed.&#10; * @param string $view_mode&#10; *   The view_mode that is to be used to display the entity.&#10; *&#10; * @see drupal_render()&#10; * @see \Drupal\Core\Entity\EntityViewBuilder&#10; * @see hook_entity_build_defaults_alter()&#10; *&#10; * @ingroup entity_crud&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_build_defaults_alter(array &amp;$build, \Drupal\Core\Entity\EntityInterface $entity, $view_mode) {&#10;&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_build_defaults_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_build_defaults_alter" value="/**&#10; * Implements hook_ENTITY_TYPE_build_defaults_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_build_defaults_alter(array &amp;$build, \Drupal\Core\Entity\EntityInterface $entity, $view_mode) {&#10;&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_build_defaults_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_build_defaults_alter" value="/**&#10; * Implements hook_entity_build_defaults_alter().&#10; *&#10; * Alter entity renderable values before cache checking in drupal_render().&#10; *&#10; * The values in the #cache key of the renderable array are used to determine if&#10; * a cache entry exists for the entity&#39;s rendered output. Ideally only values&#10; * that pertain to caching should be altered in this hook.&#10; *&#10; * @param array &amp;$build&#10; *   A renderable array containing the entity&#39;s caching and view mode values.&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity that is being viewed.&#10; * @param string $view_mode&#10; *   The view_mode that is to be used to display the entity.&#10; *&#10; * @see drupal_render()&#10; * @see \Drupal\Core\Entity\EntityViewBuilder&#10; * @see hook_ENTITY_TYPE_build_defaults_alter()&#10; *&#10; * @ingroup entity_crud&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_build_defaults_alter(array &amp;$build, \Drupal\Core\Entity\EntityInterface $entity, $view_mode) {&#10;&#10;  $END$&#10;}" description="hook_entity_build_defaults_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_build_defaults_alter" value="/**&#10; * Implements hook_entity_build_defaults_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_build_defaults_alter(array &amp;$build, \Drupal\Core\Entity\EntityInterface $entity, $view_mode) {&#10;&#10;  $END$&#10;}" description="hook_entity_build_defaults_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_view_display_alter" value="/**&#10; * Implements hook_entity_view_display_alter().&#10; *&#10; * Alter the settings used for displaying an entity.&#10; *&#10; * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display&#10; *   The entity view display that will be used to display the entity&#10; *   components.&#10; * @param array $context&#10; *   An associative array containing:&#10; *   - entity_type: The entity type, e.g., &#39;node&#39; or &#39;user&#39;.&#10; *   - bundle: The bundle, e.g., &#39;page&#39; or &#39;article&#39;.&#10; *   - view_mode: The view mode, e.g., &#39;full&#39;, &#39;teaser&#39;, etc.&#10; *&#10; * @ingroup entity_crud&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_view_display_alter(\Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, array $context) {&#10;  // Leave field labels out of the search index.&#10;  if ($context[&#39;entity_type&#39;] == &#39;node&#39; &amp;&amp; $context[&#39;view_mode&#39;] == &#39;search_index&#39;) {&#10;    foreach ($display-&#62;getComponents() as $name =&#62; $options) {&#10;      if (isset($options[&#39;label&#39;])) {&#10;        $options[&#39;label&#39;] = &#39;hidden&#39;;&#10;        $display-&#62;setComponent($name, $options);&#10;      }&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_entity_view_display_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_view_display_alter" value="/**&#10; * Implements hook_entity_view_display_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_view_display_alter(\Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, array $context) {&#10;  // Leave field labels out of the search index.&#10;  if ($context[&#39;entity_type&#39;] == &#39;node&#39; &amp;&amp; $context[&#39;view_mode&#39;] == &#39;search_index&#39;) {&#10;    foreach ($display-&#62;getComponents() as $name =&#62; $options) {&#10;      if (isset($options[&#39;label&#39;])) {&#10;        $options[&#39;label&#39;] = &#39;hidden&#39;;&#10;        $display-&#62;setComponent($name, $options);&#10;      }&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_entity_view_display_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_display_build_alter" value="/**&#10; * Implements hook_entity_display_build_alter().&#10; *&#10; * Alter the render array generated by an EntityDisplay for an entity.&#10; *&#10; * @param array $build&#10; *   The renderable array generated by the EntityDisplay.&#10; * @param array $context&#10; *   An associative array containing:&#10; *   - entity: The entity being rendered.&#10; *   - view_mode: The view mode; for example, &#39;full&#39; or &#39;teaser&#39;.&#10; *   - display: The EntityDisplay holding the display options.&#10; *&#10; * @ingroup entity_crud&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_display_build_alter(&amp;$build, $context) {&#10;  // Append RDF term mappings on displayed taxonomy links.&#10;  foreach (Element::children($build) as $field_name) {&#10;    $element = &amp;$build[$field_name];&#10;    if ($element[&#39;#field_type&#39;] == &#39;entity_reference&#39; &amp;&amp; $element[&#39;#formatter&#39;] == &#39;entity_reference_label&#39;) {&#10;      foreach ($element[&#39;#items&#39;] as $delta =&#62; $item) {&#10;        $term = $item-&#62;entity;&#10;        if (!empty($term-&#62;rdf_mapping[&#39;rdftype&#39;])) {&#10;          $element[$delta][&#39;#options&#39;][&#39;attributes&#39;][&#39;typeof&#39;] = $term-&#62;rdf_mapping[&#39;rdftype&#39;];&#10;        }&#10;        if (!empty($term-&#62;rdf_mapping[&#39;name&#39;][&#39;predicates&#39;])) {&#10;          $element[$delta][&#39;#options&#39;][&#39;attributes&#39;][&#39;property&#39;] = $term-&#62;rdf_mapping[&#39;name&#39;][&#39;predicates&#39;];&#10;        }&#10;      }&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_entity_display_build_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_display_build_alter" value="/**&#10; * Implements hook_entity_display_build_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_display_build_alter(&amp;$build, $context) {&#10;  // Append RDF term mappings on displayed taxonomy links.&#10;  foreach (Element::children($build) as $field_name) {&#10;    $element = &amp;$build[$field_name];&#10;    if ($element[&#39;#field_type&#39;] == &#39;entity_reference&#39; &amp;&amp; $element[&#39;#formatter&#39;] == &#39;entity_reference_label&#39;) {&#10;      foreach ($element[&#39;#items&#39;] as $delta =&#62; $item) {&#10;        $term = $item-&#62;entity;&#10;        if (!empty($term-&#62;rdf_mapping[&#39;rdftype&#39;])) {&#10;          $element[$delta][&#39;#options&#39;][&#39;attributes&#39;][&#39;typeof&#39;] = $term-&#62;rdf_mapping[&#39;rdftype&#39;];&#10;        }&#10;        if (!empty($term-&#62;rdf_mapping[&#39;name&#39;][&#39;predicates&#39;])) {&#10;          $element[$delta][&#39;#options&#39;][&#39;attributes&#39;][&#39;property&#39;] = $term-&#62;rdf_mapping[&#39;name&#39;][&#39;predicates&#39;];&#10;        }&#10;      }&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_entity_display_build_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_prepare_form" value="/**&#10; * Implements hook_entity_prepare_form().&#10; *&#10; * Acts on an entity object about to be shown on an entity form.&#10; *&#10; * This can be typically used to pre-fill entity values or change the form state&#10; * before the entity form is built. It is invoked just once when first building&#10; * the entity form. Rebuilds will not trigger a new invocation.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity that is about to be shown on the form.&#10; * @param $operation&#10; *   The current operation.&#10; * @param \Drupal\Core\Form\FormStateInterface $form_state&#10; *   The current state of the form.&#10; *&#10; * @see \Drupal\Core\Entity\EntityForm::prepareEntity()&#10; * @see hook_ENTITY_TYPE_prepare_form()&#10; *&#10; * @ingroup entity_crud&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_prepare_form(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Form\FormStateInterface $form_state) {&#10;  if ($operation == &#39;edit&#39;) {&#10;    $entity-&#62;label-&#62;value = &#39;Altered label&#39;;&#10;    $form_state-&#62;set(&#39;label_altered&#39;, TRUE);&#10;  }&#10;  $END$&#10;}" description="hook_entity_prepare_form" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_prepare_form" value="/**&#10; * Implements hook_entity_prepare_form().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_prepare_form(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Form\FormStateInterface $form_state) {&#10;  if ($operation == &#39;edit&#39;) {&#10;    $entity-&#62;label-&#62;value = &#39;Altered label&#39;;&#10;    $form_state-&#62;set(&#39;label_altered&#39;, TRUE);&#10;  }&#10;  $END$&#10;}" description="hook_entity_prepare_form" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_prepare_form" value="/**&#10; * Implements hook_ENTITY_TYPE_prepare_form().&#10; *&#10; * Acts on a particular type of entity object about to be in an entity form.&#10; *&#10; * This can be typically used to pre-fill entity values or change the form state&#10; * before the entity form is built. It is invoked just once when first building&#10; * the entity form. Rebuilds will not trigger a new invocation.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity that is about to be shown on the form.&#10; * @param $operation&#10; *   The current operation.&#10; * @param \Drupal\Core\Form\FormStateInterface $form_state&#10; *   The current state of the form.&#10; *&#10; * @see \Drupal\Core\Entity\EntityForm::prepareEntity()&#10; * @see hook_entity_prepare_form()&#10; *&#10; * @ingroup entity_crud&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_prepare_form(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Form\FormStateInterface $form_state) {&#10;  if ($operation == &#39;edit&#39;) {&#10;    $entity-&#62;label-&#62;value = &#39;Altered label&#39;;&#10;    $form_state-&#62;set(&#39;label_altered&#39;, TRUE);&#10;  }&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_prepare_form" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_prepare_form" value="/**&#10; * Implements hook_ENTITY_TYPE_prepare_form().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_prepare_form(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Form\FormStateInterface $form_state) {&#10;  if ($operation == &#39;edit&#39;) {&#10;    $entity-&#62;label-&#62;value = &#39;Altered label&#39;;&#10;    $form_state-&#62;set(&#39;label_altered&#39;, TRUE);&#10;  }&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_prepare_form" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_form_display_alter" value="/**&#10; * Implements hook_entity_form_display_alter().&#10; *&#10; * Alter the settings used for displaying an entity form.&#10; *&#10; * @param \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display&#10; *   The entity_form_display object that will be used to display the entity form&#10; *   components.&#10; * @param array $context&#10; *   An associative array containing:&#10; *   - entity_type: The entity type, e.g., &#39;node&#39; or &#39;user&#39;.&#10; *   - bundle: The bundle, e.g., &#39;page&#39; or &#39;article&#39;.&#10; *   - form_mode: The form mode; e.g., &#39;default&#39;, &#39;profile&#39;, &#39;register&#39;, etc.&#10; *&#10; * @ingroup entity_crud&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_form_display_alter(\Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display, array $context) {&#10;  // Hide the &#39;user_picture&#39; field from the register form.&#10;  if ($context[&#39;entity_type&#39;] == &#39;user&#39; &amp;&amp; $context[&#39;form_mode&#39;] == &#39;register&#39;) {&#10;    $form_display-&#62;setComponent(&#39;user_picture&#39;, array(&#10;      &#39;type&#39; =&#62; &#39;hidden&#39;,&#10;    ));&#10;  }&#10;  $END$&#10;}" description="hook_entity_form_display_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_form_display_alter" value="/**&#10; * Implements hook_entity_form_display_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_form_display_alter(\Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display, array $context) {&#10;  // Hide the &#39;user_picture&#39; field from the register form.&#10;  if ($context[&#39;entity_type&#39;] == &#39;user&#39; &amp;&amp; $context[&#39;form_mode&#39;] == &#39;register&#39;) {&#10;    $form_display-&#62;setComponent(&#39;user_picture&#39;, array(&#10;      &#39;type&#39; =&#62; &#39;hidden&#39;,&#10;    ));&#10;  }&#10;  $END$&#10;}" description="hook_entity_form_display_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_base_field_info" value="/**&#10; * Implements hook_entity_base_field_info().&#10; *&#10; * Provides custom base field definitions for a content entity type.&#10; *&#10; * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type&#10; *   The entity type definition.&#10; *&#10; * @return \Drupal\Core\Field\FieldDefinitionInterface[]&#10; *   An array of field definitions, keyed by field name.&#10; *&#10; * @see hook_entity_base_field_info_alter()&#10; * @see hook_entity_bundle_field_info()&#10; * @see hook_entity_bundle_field_info_alter()&#10; * @see \Drupal\Core\Field\FieldDefinitionInterface&#10; * @see \Drupal\Core\Entity\EntityManagerInterface::getFieldDefinitions()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_base_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {&#10;  if ($entity_type-&#62;id() == &#39;node&#39;) {&#10;    $fields = array();&#10;    $fields[&#39;mymodule_text&#39;] = BaseFieldDefinition::create(&#39;string&#39;)&#10;      -&#62;setLabel(t(&#39;The text&#39;))&#10;      -&#62;setDescription(t(&#39;A text property added by mymodule.&#39;))&#10;      -&#62;setComputed(TRUE)&#10;      -&#62;setClass(&#39;\Drupal\mymodule\EntityComputedText&#39;);&#10;&#10;    return $fields;&#10;  }&#10;  $END$&#10;}" description="hook_entity_base_field_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_base_field_info" value="/**&#10; * Implements hook_entity_base_field_info().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_base_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {&#10;  if ($entity_type-&#62;id() == &#39;node&#39;) {&#10;    $fields = array();&#10;    $fields[&#39;mymodule_text&#39;] = BaseFieldDefinition::create(&#39;string&#39;)&#10;      -&#62;setLabel(t(&#39;The text&#39;))&#10;      -&#62;setDescription(t(&#39;A text property added by mymodule.&#39;))&#10;      -&#62;setComputed(TRUE)&#10;      -&#62;setClass(&#39;\Drupal\mymodule\EntityComputedText&#39;);&#10;&#10;    return $fields;&#10;  }&#10;  $END$&#10;}" description="hook_entity_base_field_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_base_field_info_alter" value="/**&#10; * Implements hook_entity_base_field_info_alter().&#10; *&#10; * Alter base field definitions for a content entity type.&#10; *&#10; * @param \Drupal\Core\Field\FieldDefinitionInterface[] $fields&#10; *   The array of base field definitions for the entity type.&#10; * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type&#10; *   The entity type definition.&#10; *&#10; * @see hook_entity_base_field_info()&#10; * @see hook_entity_bundle_field_info()&#10; * @see hook_entity_bundle_field_info_alter()&#10; *&#10; * @todo WARNING: This hook will be changed in&#10; * https://www.drupal.org/node/2346329.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_base_field_info_alter(&amp;$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type) {&#10;  // Alter the mymodule_text field to use a custom class.&#10;  if ($entity_type-&#62;id() == &#39;node&#39; &amp;&amp; !empty($fields[&#39;mymodule_text&#39;])) {&#10;    $fields[&#39;mymodule_text&#39;]-&#62;setClass(&#39;\Drupal\anothermodule\EntityComputedText&#39;);&#10;  }&#10;  $END$&#10;}" description="hook_entity_base_field_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_base_field_info_alter" value="/**&#10; * Implements hook_entity_base_field_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_base_field_info_alter(&amp;$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type) {&#10;  // Alter the mymodule_text field to use a custom class.&#10;  if ($entity_type-&#62;id() == &#39;node&#39; &amp;&amp; !empty($fields[&#39;mymodule_text&#39;])) {&#10;    $fields[&#39;mymodule_text&#39;]-&#62;setClass(&#39;\Drupal\anothermodule\EntityComputedText&#39;);&#10;  }&#10;  $END$&#10;}" description="hook_entity_base_field_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_bundle_field_info" value="/**&#10; * Implements hook_entity_bundle_field_info().&#10; *&#10; * Provides field definitions for a specific bundle within an entity type.&#10; *&#10; * Bundle fields either have to override an existing base field, or need to&#10; * provide a field storage definition via hook_entity_field_storage_info()&#10; * unless they are computed.&#10; *&#10; * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type&#10; *   The entity type definition.&#10; * @param string $bundle&#10; *   The bundle.&#10; * @param \Drupal\Core\Field\FieldDefinitionInterface[] $base_field_definitions&#10; *   The list of base field definitions for the entity type.&#10; *&#10; * @return \Drupal\Core\Field\FieldDefinitionInterface[]&#10; *   An array of bundle field definitions, keyed by field name.&#10; *&#10; * @see hook_entity_base_field_info()&#10; * @see hook_entity_base_field_info_alter()&#10; * @see hook_entity_field_storage_info()&#10; * @see hook_entity_field_storage_info_alter()&#10; * @see hook_entity_bundle_field_info_alter()&#10; * @see \Drupal\Core\Field\FieldDefinitionInterface&#10; * @see \Drupal\Core\Entity\EntityManagerInterface::getFieldDefinitions()&#10; *&#10; * @todo WARNING: This hook will be changed in&#10; * https://www.drupal.org/node/2346347.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_bundle_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {&#10;  // Add a property only to nodes of the &#39;article&#39; bundle.&#10;  if ($entity_type-&#62;id() == &#39;node&#39; &amp;&amp; $bundle == &#39;article&#39;) {&#10;    $fields = array();&#10;    $fields[&#39;mymodule_text_more&#39;] = BaseFieldDefinition::create(&#39;string&#39;)&#10;        -&#62;setLabel(t(&#39;More text&#39;))&#10;        -&#62;setComputed(TRUE)&#10;        -&#62;setClass(&#39;\Drupal\mymodule\EntityComputedMoreText&#39;);&#10;    return $fields;&#10;  }&#10;  $END$&#10;}" description="hook_entity_bundle_field_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_bundle_field_info" value="/**&#10; * Implements hook_entity_bundle_field_info().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_bundle_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {&#10;  // Add a property only to nodes of the &#39;article&#39; bundle.&#10;  if ($entity_type-&#62;id() == &#39;node&#39; &amp;&amp; $bundle == &#39;article&#39;) {&#10;    $fields = array();&#10;    $fields[&#39;mymodule_text_more&#39;] = BaseFieldDefinition::create(&#39;string&#39;)&#10;        -&#62;setLabel(t(&#39;More text&#39;))&#10;        -&#62;setComputed(TRUE)&#10;        -&#62;setClass(&#39;\Drupal\mymodule\EntityComputedMoreText&#39;);&#10;    return $fields;&#10;  }&#10;  $END$&#10;}" description="hook_entity_bundle_field_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_bundle_field_info_alter" value="/**&#10; * Implements hook_entity_bundle_field_info_alter().&#10; *&#10; * Alter bundle field definitions.&#10; *&#10; * @param \Drupal\Core\Field\FieldDefinitionInterface[] $fields&#10; *   The array of bundle field definitions.&#10; * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type&#10; *   The entity type definition.&#10; * @param string $bundle&#10; *   The bundle.&#10; *&#10; * @see hook_entity_base_field_info()&#10; * @see hook_entity_base_field_info_alter()&#10; * @see hook_entity_bundle_field_info()&#10; *&#10; * @todo WARNING: This hook will be changed in&#10; * https://www.drupal.org/node/2346347.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_bundle_field_info_alter(&amp;$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle) {&#10;  if ($entity_type-&#62;id() == &#39;node&#39; &amp;&amp; $bundle == &#39;article&#39; &amp;&amp; !empty($fields[&#39;mymodule_text&#39;])) {&#10;    // Alter the mymodule_text field to use a custom class.&#10;    $fields[&#39;mymodule_text&#39;]-&#62;setClass(&#39;\Drupal\anothermodule\EntityComputedText&#39;);&#10;  }&#10;  $END$&#10;}" description="hook_entity_bundle_field_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_bundle_field_info_alter" value="/**&#10; * Implements hook_entity_bundle_field_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_bundle_field_info_alter(&amp;$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle) {&#10;  if ($entity_type-&#62;id() == &#39;node&#39; &amp;&amp; $bundle == &#39;article&#39; &amp;&amp; !empty($fields[&#39;mymodule_text&#39;])) {&#10;    // Alter the mymodule_text field to use a custom class.&#10;    $fields[&#39;mymodule_text&#39;]-&#62;setClass(&#39;\Drupal\anothermodule\EntityComputedText&#39;);&#10;  }&#10;  $END$&#10;}" description="hook_entity_bundle_field_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_field_storage_info" value="/**&#10; * Implements hook_entity_field_storage_info().&#10; *&#10; * Provides field storage definitions for a content entity type.&#10; *&#10; * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type&#10; *   The entity type definition.&#10; *&#10; * @return \Drupal\Core\Field\FieldStorageDefinitionInterface[]&#10; *   An array of field storage definitions, keyed by field name.&#10; *&#10; * @see hook_entity_field_storage_info_alter()&#10; * @see \Drupal\Core\Field\FieldStorageDefinitionInterface&#10; * @see \Drupal\Core\Entity\EntityManagerInterface::getFieldStorageDefinitions()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_field_storage_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {&#10;  if (\Drupal::entityManager()-&#62;getStorage($entity_type-&#62;id()) instanceof DynamicallyFieldableEntityStorageInterface) {&#10;    // Query by filtering on the ID as this is more efficient than filtering&#10;    // on the entity_type property directly.&#10;    $ids = \Drupal::entityQuery(&#39;field_storage_config&#39;)&#10;      -&#62;condition(&#39;id&#39;, $entity_type-&#62;id() . &#39;.&#39;, &#39;STARTS_WITH&#39;)&#10;      -&#62;execute();&#10;    // Fetch all fields and key them by field name.&#10;    $field_storages = FieldStorageConfig::loadMultiple($ids);&#10;    $result = array();&#10;    foreach ($field_storages as $field_storage) {&#10;      $result[$field_storage-&#62;getName()] = $field_storage;&#10;    }&#10;&#10;    return $result;&#10;  }&#10;  $END$&#10;}" description="hook_entity_field_storage_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_field_storage_info" value="/**&#10; * Implements hook_entity_field_storage_info().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_field_storage_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {&#10;  if (\Drupal::entityManager()-&#62;getStorage($entity_type-&#62;id()) instanceof DynamicallyFieldableEntityStorageInterface) {&#10;    // Query by filtering on the ID as this is more efficient than filtering&#10;    // on the entity_type property directly.&#10;    $ids = \Drupal::entityQuery(&#39;field_storage_config&#39;)&#10;      -&#62;condition(&#39;id&#39;, $entity_type-&#62;id() . &#39;.&#39;, &#39;STARTS_WITH&#39;)&#10;      -&#62;execute();&#10;    // Fetch all fields and key them by field name.&#10;    $field_storages = FieldStorageConfig::loadMultiple($ids);&#10;    $result = array();&#10;    foreach ($field_storages as $field_storage) {&#10;      $result[$field_storage-&#62;getName()] = $field_storage;&#10;    }&#10;&#10;    return $result;&#10;  }&#10;  $END$&#10;}" description="hook_entity_field_storage_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_field_storage_info_alter" value="/**&#10; * Implements hook_entity_field_storage_info_alter().&#10; *&#10; * Alter field storage definitions for a content entity type.&#10; *&#10; * @param \Drupal\Core\Field\FieldStorageDefinitionInterface[] $fields&#10; *   The array of field storage definitions for the entity type.&#10; * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type&#10; *   The entity type definition.&#10; *&#10; * @see hook_entity_field_storage_info()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_field_storage_info_alter(&amp;$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type) {&#10;  // Alter the max_length setting.&#10;  if ($entity_type-&#62;id() == &#39;node&#39; &amp;&amp; !empty($fields[&#39;mymodule_text&#39;])) {&#10;    $fields[&#39;mymodule_text&#39;]-&#62;setSetting(&#39;max_length&#39;, 128);&#10;  }&#10;  $END$&#10;}" description="hook_entity_field_storage_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_field_storage_info_alter" value="/**&#10; * Implements hook_entity_field_storage_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_field_storage_info_alter(&amp;$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type) {&#10;  // Alter the max_length setting.&#10;  if ($entity_type-&#62;id() == &#39;node&#39; &amp;&amp; !empty($fields[&#39;mymodule_text&#39;])) {&#10;    $fields[&#39;mymodule_text&#39;]-&#62;setSetting(&#39;max_length&#39;, 128);&#10;  }&#10;  $END$&#10;}" description="hook_entity_field_storage_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_operation" value="/**&#10; * Implements hook_entity_operation().&#10; *&#10; * Declares entity operations.&#10; *&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity on which the linked operations will be performed.&#10; *&#10; * @return array&#10; *   An operations array as returned by&#10; *   EntityListBuilderInterface::getOperations().&#10; *&#10; * @see \Drupal\Core\Entity\EntityListBuilderInterface::getOperations()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {&#10;  $operations = array();&#10;  $operations[&#39;translate&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;Translate&#39;),&#10;    &#39;url&#39; =&#62; \Drupal\Core\Url::fromRoute(&#39;foo_module.entity.translate&#39;),&#10;    &#39;weight&#39; =&#62; 50,&#10;  );&#10;&#10;  return $operations;&#10;  $END$&#10;}" description="hook_entity_operation" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_operation" value="/**&#10; * Implements hook_entity_operation().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {&#10;  $operations = array();&#10;  $operations[&#39;translate&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;Translate&#39;),&#10;    &#39;url&#39; =&#62; \Drupal\Core\Url::fromRoute(&#39;foo_module.entity.translate&#39;),&#10;    &#39;weight&#39; =&#62; 50,&#10;  );&#10;&#10;  return $operations;&#10;  $END$&#10;}" description="hook_entity_operation" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_operation_alter" value="/**&#10; * Implements hook_entity_operation_alter().&#10; *&#10; * Alter entity operations.&#10; *&#10; * @param array $operations&#10; *   Operations array as returned by&#10; *   \Drupal\Core\Entity\EntityListBuilderInterface::getOperations().&#10; * @param \Drupal\Core\Entity\EntityInterface $entity&#10; *   The entity on which the linked operations will be performed.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_operation_alter(array &amp;$operations, \Drupal\Core\Entity\EntityInterface $entity) {&#10;  // Alter the title and weight.&#10;  $operations[&#39;translate&#39;][&#39;title&#39;] = t(&#39;Translate @entity_type&#39;, array(&#10;    &#39;@entity_type&#39; =&#62; $entity-&#62;getEntityTypeId(),&#10;  ));&#10;  $operations[&#39;translate&#39;][&#39;weight&#39;] = 99;&#10;  $END$&#10;}" description="hook_entity_operation_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_operation_alter" value="/**&#10; * Implements hook_entity_operation_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_operation_alter(array &amp;$operations, \Drupal\Core\Entity\EntityInterface $entity) {&#10;  // Alter the title and weight.&#10;  $operations[&#39;translate&#39;][&#39;title&#39;] = t(&#39;Translate @entity_type&#39;, array(&#10;    &#39;@entity_type&#39; =&#62; $entity-&#62;getEntityTypeId(),&#10;  ));&#10;  $operations[&#39;translate&#39;][&#39;weight&#39;] = 99;&#10;  $END$&#10;}" description="hook_entity_operation_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_field_access" value="/**&#10; * Implements hook_entity_field_access().&#10; *&#10; * Control access to fields.&#10; *&#10; * This hook is invoked from&#10; * \Drupal\Core\Entity\EntityAccessControlHandler::fieldAccess() to let modules&#10; * grant or deny operations on fields.&#10; *&#10; * @param string $operation&#10; *   The operation to be performed. See&#10; *   \Drupal\Core\Entity\EntityAccessControlHandlerInterface::fieldAccess()&#10; *   for possible values.&#10; * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition&#10; *   The field definition.&#10; * @param \Drupal\Core\Session\AccountInterface $account&#10; *   The user account to check.&#10; * @param \Drupal\Core\Field\FieldItemListInterface $items&#10; *   (optional) The entity field object on which the operation is to be&#10; *   performed.&#10; *&#10; * @return \Drupal\Core\Access\AccessResultInterface&#10; *   The access result.&#10; *&#10; * @see \Drupal\Core\Entity\EntityAccessControlHandlerInterface::fieldAccess()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_field_access($operation, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, \Drupal\Core\Session\AccountInterface $account, \Drupal\Core\Field\FieldItemListInterface $items = NULL) {&#10;  if ($field_definition-&#62;getName() == &#39;field_of_interest&#39; &amp;&amp; $operation == &#39;edit&#39;) {&#10;    return AccessResult::allowedIfHasPermission($account, &#39;update field of interest&#39;);&#10;  }&#10;  return AccessResult::neutral();&#10;  $END$&#10;}" description="hook_entity_field_access" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_field_access" value="/**&#10; * Implements hook_entity_field_access().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_field_access($operation, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, \Drupal\Core\Session\AccountInterface $account, \Drupal\Core\Field\FieldItemListInterface $items = NULL) {&#10;  if ($field_definition-&#62;getName() == &#39;field_of_interest&#39; &amp;&amp; $operation == &#39;edit&#39;) {&#10;    return AccessResult::allowedIfHasPermission($account, &#39;update field of interest&#39;);&#10;  }&#10;  return AccessResult::neutral();&#10;  $END$&#10;}" description="hook_entity_field_access" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_field_access_alter" value="/**&#10; * Implements hook_entity_field_access_alter().&#10; *&#10; * Alter the default access behavior for a given field.&#10; *&#10; * Use this hook to override access grants from another module. Note that the&#10; * original default access flag is masked under the &#39;:default&#39; key.&#10; *&#10; * @param \Drupal\Core\Access\AccessResultInterface[] $grants&#10; *   An array of grants gathered by hook_entity_field_access(). The array is&#10; *   keyed by the module that defines the field&#39;s access control; the values are&#10; *   grant responses for each module (\Drupal\Core\Access\AccessResult).&#10; * @param array $context&#10; *   Context array on the performed operation with the following keys:&#10; *   - operation: The operation to be performed (string).&#10; *   - field_definition: The field definition object&#10; *     (\Drupal\Core\Field\FieldDefinitionInterface)&#10; *   - account: The user account to check access for&#10; *     (Drupal\user\Entity\User).&#10; *   - items: (optional) The entity field items&#10; *     (\Drupal\Core\Field\FieldItemListInterface).&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_field_access_alter(array &amp;$grants, array $context) {&#10;  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */&#10;  $field_definition = $context[&#39;field_definition&#39;];&#10;  if ($field_definition-&#62;getName() == &#39;field_of_interest&#39; &amp;&amp; $grants[&#39;node&#39;]-&#62;isForbidden()) {&#10;    // Override node module&#39;s restriction to no opinion (neither allowed nor&#10;    // forbidden). We don&#39;t want to provide our own access hook, we only want to&#10;    // take out node module&#39;s part in the access handling of this field. We also&#10;    // don&#39;t want to switch node module&#39;s grant to&#10;    // AccessResultInterface::isAllowed() , because the grants of other modules&#10;    // should still decide on their own if this field is accessible or not&#10;    $grants[&#39;node&#39;] = AccessResult::neutral()-&#62;inheritCacheability($grants[&#39;node&#39;]);&#10;  }&#10;  $END$&#10;}" description="hook_entity_field_access_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_field_access_alter" value="/**&#10; * Implements hook_entity_field_access_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_field_access_alter(array &amp;$grants, array $context) {&#10;  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */&#10;  $field_definition = $context[&#39;field_definition&#39;];&#10;  if ($field_definition-&#62;getName() == &#39;field_of_interest&#39; &amp;&amp; $grants[&#39;node&#39;]-&#62;isForbidden()) {&#10;    // Override node module&#39;s restriction to no opinion (neither allowed nor&#10;    // forbidden). We don&#39;t want to provide our own access hook, we only want to&#10;    // take out node module&#39;s part in the access handling of this field. We also&#10;    // don&#39;t want to switch node module&#39;s grant to&#10;    // AccessResultInterface::isAllowed() , because the grants of other modules&#10;    // should still decide on their own if this field is accessible or not&#10;    $grants[&#39;node&#39;] = AccessResult::neutral()-&#62;inheritCacheability($grants[&#39;node&#39;]);&#10;  }&#10;  $END$&#10;}" description="hook_entity_field_access_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_field_values_init" value="/**&#10; * Implements hook_entity_field_values_init().&#10; *&#10; * Acts when initializing a fieldable entity object.&#10; *&#10; * This hook runs after a new entity object or a new entity translation object&#10; * has just been instantiated. It can be used to set initial values, e.g. to&#10; * provide defaults.&#10; *&#10; * @param \Drupal\Core\Entity\FieldableEntityInterface $entity&#10; *   The entity object.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_ENTITY_TYPE_field_values_init()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_field_values_init(\Drupal\Core\Entity\FieldableEntityInterface $entity) {&#10;  if ($entity instanceof \Drupal\Core\Entity\ContentEntityInterface &amp;&amp; !$entity-&#62;foo-&#62;value) {&#10;    $entity-&#62;foo-&#62;value = &#39;some_initial_value&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_entity_field_values_init" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_field_values_init" value="/**&#10; * Implements hook_entity_field_values_init().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_field_values_init(\Drupal\Core\Entity\FieldableEntityInterface $entity) {&#10;  if ($entity instanceof \Drupal\Core\Entity\ContentEntityInterface &amp;&amp; !$entity-&#62;foo-&#62;value) {&#10;    $entity-&#62;foo-&#62;value = &#39;some_initial_value&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_entity_field_values_init" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_field_values_init" value="/**&#10; * Implements hook_ENTITY_TYPE_field_values_init().&#10; *&#10; * Acts when initializing a fieldable entity object.&#10; *&#10; * This hook runs after a new entity object or a new entity translation object&#10; * has just been instantiated. It can be used to set initial values, e.g. to&#10; * provide defaults.&#10; *&#10; * @param \Drupal\Core\Entity\FieldableEntityInterface $entity&#10; *   The entity object.&#10; *&#10; * @ingroup entity_crud&#10; * @see hook_entity_field_values_init()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_field_values_init(\Drupal\Core\Entity\FieldableEntityInterface $entity) {&#10;  if (!$entity-&#62;foo-&#62;value) {&#10;    $entity-&#62;foo-&#62;value = &#39;some_initial_value&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_field_values_init" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ENTITY_TYPE_field_values_init" value="/**&#10; * Implements hook_ENTITY_TYPE_field_values_init().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ENTITY_TYPE_field_values_init(\Drupal\Core\Entity\FieldableEntityInterface $entity) {&#10;  if (!$entity-&#62;foo-&#62;value) {&#10;    $entity-&#62;foo-&#62;value = &#39;some_initial_value&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_ENTITY_TYPE_field_values_init" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_extra_field_info" value="/**&#10; * Implements hook_entity_extra_field_info().&#10; *&#10; * Exposes &#34;pseudo-field&#34; components on content entities.&#10; *&#10; * Field UI&#39;s &#34;Manage fields&#34; and &#34;Manage display&#34; pages let users re-order&#10; * fields, but also non-field components. For nodes, these include elements&#10; * exposed by modules through hook_form_alter(), for instance.&#10; *&#10; * Content entities or modules that want to have their components supported&#10; * should expose them using this hook. The user-defined settings (weight,&#10; * visible) are automatically applied when entities or entity forms are&#10; * rendered.&#10; *&#10; * @see hook_entity_extra_field_info_alter()&#10; *&#10; * @return array&#10; *   The array structure is identical to that of the return value of&#10; *   \Drupal\Core\Entity\EntityFieldManagerInterface::getExtraFields().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_extra_field_info() {&#10;  $extra = array();&#10;  $module_language_enabled = \Drupal::moduleHandler()-&#62;moduleExists(&#39;language&#39;);&#10;  $description = t(&#39;Node module element&#39;);&#10;&#10;  foreach (NodeType::loadMultiple() as $bundle) {&#10;&#10;    // Add also the &#39;language&#39; select if Language module is enabled and the&#10;    // bundle has multilingual support.&#10;    // Visibility of the ordering of the language selector is the same as on the&#10;    // node/add form.&#10;    if ($module_language_enabled) {&#10;      $configuration = ContentLanguageSettings::loadByEntityTypeBundle(&#39;node&#39;, $bundle-&#62;id());&#10;      if ($configuration-&#62;isLanguageAlterable()) {&#10;        $extra[&#39;node&#39;][$bundle-&#62;id()][&#39;form&#39;][&#39;language&#39;] = array(&#10;          &#39;label&#39; =&#62; t(&#39;Language&#39;),&#10;          &#39;description&#39; =&#62; $description,&#10;          &#39;weight&#39; =&#62; 0,&#10;        );&#10;      }&#10;    }&#10;    $extra[&#39;node&#39;][$bundle-&#62;id()][&#39;display&#39;][&#39;language&#39;] = array(&#10;      &#39;label&#39; =&#62; t(&#39;Language&#39;),&#10;      &#39;description&#39; =&#62; $description,&#10;      &#39;weight&#39; =&#62; 0,&#10;      &#39;visible&#39; =&#62; FALSE,&#10;    );&#10;  }&#10;&#10;  return $extra;&#10;  $END$&#10;}" description="hook_entity_extra_field_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_extra_field_info" value="/**&#10; * Implements hook_entity_extra_field_info().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_extra_field_info() {&#10;  $extra = array();&#10;  $module_language_enabled = \Drupal::moduleHandler()-&#62;moduleExists(&#39;language&#39;);&#10;  $description = t(&#39;Node module element&#39;);&#10;&#10;  foreach (NodeType::loadMultiple() as $bundle) {&#10;&#10;    // Add also the &#39;language&#39; select if Language module is enabled and the&#10;    // bundle has multilingual support.&#10;    // Visibility of the ordering of the language selector is the same as on the&#10;    // node/add form.&#10;    if ($module_language_enabled) {&#10;      $configuration = ContentLanguageSettings::loadByEntityTypeBundle(&#39;node&#39;, $bundle-&#62;id());&#10;      if ($configuration-&#62;isLanguageAlterable()) {&#10;        $extra[&#39;node&#39;][$bundle-&#62;id()][&#39;form&#39;][&#39;language&#39;] = array(&#10;          &#39;label&#39; =&#62; t(&#39;Language&#39;),&#10;          &#39;description&#39; =&#62; $description,&#10;          &#39;weight&#39; =&#62; 0,&#10;        );&#10;      }&#10;    }&#10;    $extra[&#39;node&#39;][$bundle-&#62;id()][&#39;display&#39;][&#39;language&#39;] = array(&#10;      &#39;label&#39; =&#62; t(&#39;Language&#39;),&#10;      &#39;description&#39; =&#62; $description,&#10;      &#39;weight&#39; =&#62; 0,&#10;      &#39;visible&#39; =&#62; FALSE,&#10;    );&#10;  }&#10;&#10;  return $extra;&#10;  $END$&#10;}" description="hook_entity_extra_field_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_entity_extra_field_info_alter" value="/**&#10; * Implements hook_entity_extra_field_info_alter().&#10; *&#10; * Alter &#34;pseudo-field&#34; components on content entities.&#10; *&#10; * @param array $info&#10; *   The array structure is identical to that of the return value of&#10; *   \Drupal\Core\Entity\EntityManagerInterface::getExtraFields().&#10; *&#10; * @see hook_entity_extra_field_info()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_extra_field_info_alter(&amp;$info) {&#10;  // Force node title to always be at the top of the list by default.&#10;  foreach (NodeType::loadMultiple() as $bundle) {&#10;    if (isset($info[&#39;node&#39;][$bundle-&#62;id()][&#39;form&#39;][&#39;title&#39;])) {&#10;      $info[&#39;node&#39;][$bundle-&#62;id()][&#39;form&#39;][&#39;title&#39;][&#39;weight&#39;] = -20;&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_entity_extra_field_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_entity_extra_field_info_alter" value="/**&#10; * Implements hook_entity_extra_field_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_entity_extra_field_info_alter(&amp;$info) {&#10;  // Force node title to always be at the top of the list by default.&#10;  foreach (NodeType::loadMultiple() as $bundle) {&#10;    if (isset($info[&#39;node&#39;][$bundle-&#62;id()][&#39;form&#39;][&#39;title&#39;])) {&#10;      $info[&#39;node&#39;][$bundle-&#62;id()][&#39;form&#39;][&#39;title&#39;][&#39;weight&#39;] = -20;&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_entity_extra_field_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_menu_links_discovered_alter" value="/**&#10; * Implements hook_menu_links_discovered_alter().&#10; *&#10; * Alters all the menu links discovered by the menu link plugin manager.&#10; *&#10; * @param array $links&#10; *   The link definitions to be altered.&#10; *&#10; * @return array&#10; *   An array of discovered menu links. Each link has a key that is the machine&#10; *   name, which must be unique. By default, use the route name as the&#10; *   machine name. In cases where multiple links use the same route name, such&#10; *   as two links to the same page in different menus, or two links using the&#10; *   same route name but different route parameters, the suggested machine name&#10; *   patten is the route name followed by a dot and a unique suffix. For&#10; *   example, an additional logout link might have a machine name of&#10; *   user.logout.navigation, and default links provided to edit the article and&#10; *   page content types could use machine names&#10; *   entity.node_type.edit_form.article and entity.node_type.edit_form.page.&#10; *   Since the machine name may be arbitrary, you should never write code that&#10; *   assumes it is identical to the route name.&#10; *&#10; *   The value corresponding to each machine name key is an associative array&#10; *   that may contain the following key-value pairs:&#10; *   - title: (required) The title of the menu link. If this should be&#10; *     translated, create a \Drupal\Core\StringTranslation\TranslatableMarkup&#10; *     object.&#10; *   - description: The description of the link. If this should be&#10; *     translated, create a \Drupal\Core\StringTranslation\TranslatableMarkup&#10; *     object.&#10; *   - route_name: (optional) The route name to be used to build the path.&#10; *     Either the route_name or url element must be provided.&#10; *   - route_parameters: (optional) The route parameters to build the path.&#10; *   - url: (optional) If you have an external link use this element instead of&#10; *     providing route_name.&#10; *   - parent: (optional) The machine name of the link that is this link&#39;s menu&#10; *     parent.&#10; *   - weight: (optional) An integer that determines the relative position of&#10; *     items in the menu; higher-weighted items sink. Defaults to 0. Menu items&#10; *     with the same weight are ordered alphabetically.&#10; *   - menu_name: (optional) The machine name of a menu to put the link in, if&#10; *     not the default Tools menu.&#10; *   - expanded: (optional) If set to TRUE, and if a menu link is provided for&#10; *     this menu item (as a result of other properties), then the menu link is&#10; *     always expanded, equivalent to its &#39;always expanded&#39; checkbox being set&#10; *     in the UI.&#10; *   - options: (optional) An array of options to be passed to&#10; *     \Drupal\Core\Utility\LinkGeneratorInterface::generate() when generating&#10; *     a link from this menu item.&#10; *&#10; * @ingroup menu&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_menu_links_discovered_alter(&amp;$links) {&#10;  // Change the weight and title of the user.logout link.&#10;  $links[&#39;user.logout&#39;][&#39;weight&#39;] = -10;&#10;  $links[&#39;user.logout&#39;][&#39;title&#39;] = new \Drupal\Core\StringTranslation\TranslatableMarkup(&#39;Logout&#39;);&#10;  // Conditionally add an additional link with a title that&#39;s not translated.&#10;  if (\Drupal::moduleHandler()-&#62;moduleExists(&#39;search&#39;)) {&#10;    $links[&#39;menu.api.search&#39;] = array(&#10;      &#39;title&#39; =&#62; \Drupal::config(&#39;system.site&#39;)-&#62;get(&#39;name&#39;),&#10;      &#39;route_name&#39; =&#62; &#39;menu.api.search&#39;,&#10;      &#39;description&#39; =&#62; new \Drupal\Core\StringTranslation\TranslatableMarkup(&#39;View popular search phrases for this site.&#39;),&#10;      &#39;parent&#39; =&#62; &#39;system.admin_reports&#39;,&#10;    );&#10;  }&#10;  $END$&#10;}" description="hook_menu_links_discovered_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_menu_links_discovered_alter" value="/**&#10; * Implements hook_menu_links_discovered_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_menu_links_discovered_alter(&amp;$links) {&#10;  // Change the weight and title of the user.logout link.&#10;  $links[&#39;user.logout&#39;][&#39;weight&#39;] = -10;&#10;  $links[&#39;user.logout&#39;][&#39;title&#39;] = new \Drupal\Core\StringTranslation\TranslatableMarkup(&#39;Logout&#39;);&#10;  // Conditionally add an additional link with a title that&#39;s not translated.&#10;  if (\Drupal::moduleHandler()-&#62;moduleExists(&#39;search&#39;)) {&#10;    $links[&#39;menu.api.search&#39;] = array(&#10;      &#39;title&#39; =&#62; \Drupal::config(&#39;system.site&#39;)-&#62;get(&#39;name&#39;),&#10;      &#39;route_name&#39; =&#62; &#39;menu.api.search&#39;,&#10;      &#39;description&#39; =&#62; new \Drupal\Core\StringTranslation\TranslatableMarkup(&#39;View popular search phrases for this site.&#39;),&#10;      &#39;parent&#39; =&#62; &#39;system.admin_reports&#39;,&#10;    );&#10;  }&#10;  $END$&#10;}" description="hook_menu_links_discovered_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_menu_local_tasks_alter" value="/**&#10; * Implements hook_menu_local_tasks_alter().&#10; *&#10; * Alter local tasks displayed on the page before they are rendered.&#10; *&#10; * This hook is invoked by menu_local_tasks(). The system-determined tabs and&#10; * actions are passed in by reference. Additional tabs may be added.&#10; *&#10; * The local tasks are under the &#39;tabs&#39; element and keyed by plugin ID.&#10; *&#10; * Each local task is an associative array containing:&#10; * - #theme: The theme function to use to render.&#10; * - #link: An associative array containing:&#10; *   - title: The localized title of the link.&#10; *   - url: a Url object.&#10; *   - localized_options: An array of options to pass to&#10; *     \Drupal\Core\Utility\LinkGeneratorInterface::generate().&#10; * - #weight: The link&#39;s weight compared to other links.&#10; * - #active: Whether the link should be marked as &#39;active&#39;.&#10; *&#10; * @param array $data&#10; *   An associative array containing list of (up to 2) tab levels that contain a&#10; *   list of tabs keyed by their href, each one being an associative array&#10; *   as described above.&#10; * @param string $route_name&#10; *   The route name of the page.&#10; *&#10; * @ingroup menu&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_menu_local_tasks_alter(&amp;$data, $route_name) {&#10;&#10;  // Add a tab linking to node/add to all pages.&#10;  $data[&#39;tabs&#39;][0][&#39;node.add_page&#39;] = array(&#10;      &#39;#theme&#39; =&#62; &#39;menu_local_task&#39;,&#10;      &#39;#link&#39; =&#62; array(&#10;          &#39;title&#39; =&#62; t(&#39;Example tab&#39;),&#10;          &#39;url&#39; =&#62; Url::fromRoute(&#39;node.add_page&#39;),&#10;          &#39;localized_options&#39; =&#62; array(&#10;              &#39;attributes&#39; =&#62; array(&#10;                  &#39;title&#39; =&#62; t(&#39;Add content&#39;),&#10;              ),&#10;          ),&#10;      ),&#10;  );&#10;  $END$&#10;}" description="hook_menu_local_tasks_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_menu_local_tasks_alter" value="/**&#10; * Implements hook_menu_local_tasks_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_menu_local_tasks_alter(&amp;$data, $route_name) {&#10;&#10;  // Add a tab linking to node/add to all pages.&#10;  $data[&#39;tabs&#39;][0][&#39;node.add_page&#39;] = array(&#10;      &#39;#theme&#39; =&#62; &#39;menu_local_task&#39;,&#10;      &#39;#link&#39; =&#62; array(&#10;          &#39;title&#39; =&#62; t(&#39;Example tab&#39;),&#10;          &#39;url&#39; =&#62; Url::fromRoute(&#39;node.add_page&#39;),&#10;          &#39;localized_options&#39; =&#62; array(&#10;              &#39;attributes&#39; =&#62; array(&#10;                  &#39;title&#39; =&#62; t(&#39;Add content&#39;),&#10;              ),&#10;          ),&#10;      ),&#10;  );&#10;  $END$&#10;}" description="hook_menu_local_tasks_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_menu_local_actions_alter" value="/**&#10; * Implements hook_menu_local_actions_alter().&#10; *&#10; * Alter local actions plugins.&#10; *&#10; * @param array $local_actions&#10; *   The array of local action plugin definitions, keyed by plugin ID.&#10; *&#10; * @see \Drupal\Core\Menu\LocalActionInterface&#10; * @see \Drupal\Core\Menu\LocalActionManager&#10; *&#10; * @ingroup menu&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_menu_local_actions_alter(&amp;$local_actions) {&#10;  $END$&#10;}" description="hook_menu_local_actions_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_menu_local_actions_alter" value="/**&#10; * Implements hook_menu_local_actions_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_menu_local_actions_alter(&amp;$local_actions) {&#10;  $END$&#10;}" description="hook_menu_local_actions_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_local_tasks_alter" value="/**&#10; * Implements hook_local_tasks_alter().&#10; *&#10; * Alter local tasks plugins.&#10; *&#10; * @param array $local_tasks&#10; *   The array of local tasks plugin definitions, keyed by plugin ID.&#10; *&#10; * @see \Drupal\Core\Menu\LocalTaskInterface&#10; * @see \Drupal\Core\Menu\LocalTaskManager&#10; *&#10; * @ingroup menu&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_local_tasks_alter(&amp;$local_tasks) {&#10;  // Remove a specified local task plugin.&#10;  unset($local_tasks[&#39;example_plugin_id&#39;]);&#10;  $END$&#10;}" description="hook_local_tasks_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_local_tasks_alter" value="/**&#10; * Implements hook_local_tasks_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_local_tasks_alter(&amp;$local_tasks) {&#10;  // Remove a specified local task plugin.&#10;  unset($local_tasks[&#39;example_plugin_id&#39;]);&#10;  $END$&#10;}" description="hook_local_tasks_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_contextual_links_alter" value="/**&#10; * Implements hook_contextual_links_alter().&#10; *&#10; * Alter contextual links before they are rendered.&#10; *&#10; * This hook is invoked by&#10; * \Drupal\Core\Menu\ContextualLinkManager::getContextualLinkPluginsByGroup().&#10; * The system-determined contextual links are passed in by reference. Additional&#10; * links may be added and existing links can be altered.&#10; *&#10; * Each contextual link contains the following entries:&#10; * - title: The localized title of the link.&#10; * - route_name: The route name of the link.&#10; * - route_parameters: The route parameters of the link.&#10; * - localized_options: An array of URL options.&#10; * - (optional) weight: The weight of the link, which is used to sort the links.&#10; *&#10; *&#10; * @param array $links&#10; *   An associative array containing contextual links for the given $group,&#10; *   as described above. The array keys are used to build CSS class names for&#10; *   contextual links and must therefore be unique for each set of contextual&#10; *   links.&#10; * @param string $group&#10; *   The group of contextual links being rendered.&#10; * @param array $route_parameters.&#10; *   The route parameters passed to each route_name of the contextual links.&#10; *   For example:&#10; *   @code&#10; *   array(&#39;node&#39; =&#62; $node-&#62;id())&#10; *   @endcode&#10; *&#10; * @see \Drupal\Core\Menu\ContextualLinkManager&#10; *&#10; * @ingroup menu&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_contextual_links_alter(array &amp;$links, $group, array $route_parameters) {&#10;  if ($group == &#39;menu&#39;) {&#10;    // Dynamically use the menu name for the title of the menu_edit contextual&#10;    // link.&#10;    $menu = \Drupal::entityManager()-&#62;getStorage(&#39;menu&#39;)-&#62;load($route_parameters[&#39;menu&#39;]);&#10;    $links[&#39;menu_edit&#39;][&#39;title&#39;] = t(&#39;Edit menu: @label&#39;, array(&#39;@label&#39; =&#62; $menu-&#62;label()));&#10;  }&#10;  $END$&#10;}" description="hook_contextual_links_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_contextual_links_alter" value="/**&#10; * Implements hook_contextual_links_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_contextual_links_alter(array &amp;$links, $group, array $route_parameters) {&#10;  if ($group == &#39;menu&#39;) {&#10;    // Dynamically use the menu name for the title of the menu_edit contextual&#10;    // link.&#10;    $menu = \Drupal::entityManager()-&#62;getStorage(&#39;menu&#39;)-&#62;load($route_parameters[&#39;menu&#39;]);&#10;    $links[&#39;menu_edit&#39;][&#39;title&#39;] = t(&#39;Edit menu: @label&#39;, array(&#39;@label&#39; =&#62; $menu-&#62;label()));&#10;  }&#10;  $END$&#10;}" description="hook_contextual_links_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_contextual_links_plugins_alter" value="/**&#10; * Implements hook_contextual_links_plugins_alter().&#10; *&#10; * Alter the plugin definition of contextual links.&#10; *&#10; * @param array $contextual_links&#10; *   An array of contextual_links plugin definitions, keyed by contextual link&#10; *   ID. Each entry contains the following keys:&#10; *     - title: The displayed title of the link&#10; *     - route_name: The route_name of the contextual link to be displayed&#10; *     - group: The group under which the contextual links should be added to.&#10; *       Possible values are e.g. &#39;node&#39; or &#39;menu&#39;.&#10; *&#10; * @see \Drupal\Core\Menu\ContextualLinkManager&#10; *&#10; * @ingroup menu&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_contextual_links_plugins_alter(array &amp;$contextual_links) {&#10;  $contextual_links[&#39;menu_edit&#39;][&#39;title&#39;] = &#39;Edit the menu&#39;;&#10;  $END$&#10;}" description="hook_contextual_links_plugins_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_contextual_links_plugins_alter" value="/**&#10; * Implements hook_contextual_links_plugins_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_contextual_links_plugins_alter(array &amp;$contextual_links) {&#10;  $contextual_links[&#39;menu_edit&#39;][&#39;title&#39;] = &#39;Edit the menu&#39;;&#10;  $END$&#10;}" description="hook_contextual_links_plugins_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_system_breadcrumb_alter" value="/**&#10; * Implements hook_system_breadcrumb_alter().&#10; *&#10; * Perform alterations to the breadcrumb built by the BreadcrumbManager.&#10; *&#10; * @param \Drupal\Core\Breadcrumb\Breadcrumb $breadcrumb&#10; *   A breadcrumb object returned by BreadcrumbBuilderInterface::build().&#10; * @param \Drupal\Core\Routing\RouteMatchInterface $route_match&#10; *   The current route match.&#10; * @param array $context&#10; *   May include the following key:&#10; *   - builder: the instance of&#10; *     \Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface that constructed this&#10; *     breadcrumb, or NULL if no builder acted based on the current attributes.&#10; *&#10; * @ingroup menu&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_system_breadcrumb_alter(\Drupal\Core\Breadcrumb\Breadcrumb &amp;$breadcrumb, \Drupal\Core\Routing\RouteMatchInterface $route_match, array $context) {&#10;  // Add an item to the end of the breadcrumb.&#10;  $breadcrumb-&#62;addLink(\Drupal\Core\Link::createFromRoute(t(&#39;Text&#39;), &#39;example_route_name&#39;));&#10;  $END$&#10;}" description="hook_system_breadcrumb_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_system_breadcrumb_alter" value="/**&#10; * Implements hook_system_breadcrumb_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_system_breadcrumb_alter(\Drupal\Core\Breadcrumb\Breadcrumb &amp;$breadcrumb, \Drupal\Core\Routing\RouteMatchInterface $route_match, array $context) {&#10;  // Add an item to the end of the breadcrumb.&#10;  $breadcrumb-&#62;addLink(\Drupal\Core\Link::createFromRoute(t(&#39;Text&#39;), &#39;example_route_name&#39;));&#10;  $END$&#10;}" description="hook_system_breadcrumb_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_link_alter" value="/**&#10; * Implements hook_link_alter().&#10; *&#10; * Alter the parameters for links.&#10; *&#10; * @param array $variables&#10; *   An associative array of variables defining a link. The link may be either a&#10; *   &#34;route link&#34; using \Drupal\Core\Utility\LinkGenerator::link(), which is&#10; *   exposed as the &#39;link_generator&#39; service or a link generated by&#10; *   \Drupal\Core\Utility\LinkGeneratorInterface::generate(). If the link is a&#10; *   &#34;route link&#34;, &#39;route_name&#39; will be set; otherwise, &#39;path&#39; will be set.&#10; *   The following keys can be altered:&#10; *   - text: The link text for the anchor tag. If the hook implementation&#10; *     changes this text it needs to preserve the safeness of the original text.&#10; *     Using t() or \Drupal\Component\Utility\SafeMarkup::format() with&#10; *     @placeholder is recommended as this will escape the original text if&#10; *     necessary. If the resulting text is not marked safe it will be escaped.&#10; *   - url_is_active: Whether or not the link points to the currently active&#10; *     URL.&#10; *   - url: The \Drupal\Core\Url object.&#10; *   - options: An associative array of additional options that will be passed&#10; *     to either \Drupal\Core\Utility\UnroutedUrlAssembler::assemble() or&#10; *     \Drupal\Core\Routing\UrlGenerator::generateFromRoute() to generate the&#10; *     href attribute for this link, and also used when generating the link.&#10; *     Defaults to an empty array. It may contain the following elements:&#10; *     - &#39;query&#39;: An array of query key/value-pairs (without any URL-encoding) to&#10; *       append to the URL.&#10; *     - absolute: Whether to force the output to be an absolute link (beginning&#10; *       with http:). Useful for links that will be displayed outside the site,&#10; *       such as in an RSS feed. Defaults to FALSE.&#10; *     - language: An optional language object. May affect the rendering of&#10; *       the anchor tag, such as by adding a language prefix to the path.&#10; *     - attributes: An associative array of HTML attributes to apply to the&#10; *       anchor tag. If element &#39;class&#39; is included, it must be an array; &#39;title&#39;&#10; *       must be a string; other elements are more flexible, as they just need&#10; *       to work as an argument for the constructor of the class&#10; *       Drupal\Core\Template\Attribute($options[&#39;attributes&#39;]).&#10; *&#10; * @see \Drupal\Core\Utility\UnroutedUrlAssembler::assemble()&#10; * @see \Drupal\Core\Routing\UrlGenerator::generateFromRoute()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_link_alter(&amp;$variables) {&#10;  // Add a warning to the end of route links to the admin section.&#10;  if (isset($variables[&#39;route_name&#39;]) &amp;&amp; strpos($variables[&#39;route_name&#39;], &#39;admin&#39;) !== FALSE) {&#10;    $variables[&#39;text&#39;] = t(&#39;@text (Warning!)&#39;, [&#39;@text&#39; =&#62; $variables[&#39;text&#39;]]);&#10;  }&#10;  $END$&#10;}" description="hook_link_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_link_alter" value="/**&#10; * Implements hook_link_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_link_alter(&amp;$variables) {&#10;  // Add a warning to the end of route links to the admin section.&#10;  if (isset($variables[&#39;route_name&#39;]) &amp;&amp; strpos($variables[&#39;route_name&#39;], &#39;admin&#39;) !== FALSE) {&#10;    $variables[&#39;text&#39;] = t(&#39;@text (Warning!)&#39;, [&#39;@text&#39; =&#62; $variables[&#39;text&#39;]]);&#10;  }&#10;  $END$&#10;}" description="hook_link_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_hook_info" value="/**&#10; * Implements hook_hook_info().&#10; *&#10; * Defines one or more hooks that are exposed by a module.&#10; *&#10; * Normally hooks do not need to be explicitly defined. However, by declaring a&#10; * hook explicitly, a module may define a &#34;group&#34; for it. Modules that implement&#10; * a hook may then place their implementation in either $module.module or in&#10; * $module.$group.inc. If the hook is located in $module.$group.inc, then that&#10; * file will be automatically loaded when needed.&#10; * In general, hooks that are rarely invoked and/or are very large should be&#10; * placed in a separate include file, while hooks that are very short or very&#10; * frequently called should be left in the main module file so that they are&#10; * always available.&#10; *&#10; * See system_hook_info() for all hook groups defined by Drupal core.&#10; *&#10; * @return&#10; *   An associative array whose keys are hook names and whose values are an&#10; *   associative array containing:&#10; *   - group: A string defining the group to which the hook belongs. The module&#10; *     system will determine whether a file with the name $module.$group.inc&#10; *     exists, and automatically load it when required.&#10; *&#10; * @see hook_hook_info_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_hook_info() {&#10;  $hooks[&#39;token_info&#39;] = array(&#10;    &#39;group&#39; =&#62; &#39;tokens&#39;,&#10;  );&#10;  $hooks[&#39;tokens&#39;] = array(&#10;    &#39;group&#39; =&#62; &#39;tokens&#39;,&#10;  );&#10;  return $hooks;&#10;  $END$&#10;}" description="hook_hook_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_hook_info" value="/**&#10; * Implements hook_hook_info().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_hook_info() {&#10;  $hooks[&#39;token_info&#39;] = array(&#10;    &#39;group&#39; =&#62; &#39;tokens&#39;,&#10;  );&#10;  $hooks[&#39;tokens&#39;] = array(&#10;    &#39;group&#39; =&#62; &#39;tokens&#39;,&#10;  );&#10;  return $hooks;&#10;  $END$&#10;}" description="hook_hook_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_module_implements_alter" value="/**&#10; * Implements hook_module_implements_alter().&#10; *&#10; * Alter the registry of modules implementing a hook.&#10; *&#10; * This hook is invoked during \Drupal::moduleHandler()-&#62;getImplementations().&#10; * A module may implement this hook in order to reorder the implementing&#10; * modules, which are otherwise ordered by the module&#39;s system weight.&#10; *&#10; * Note that hooks invoked using \Drupal::moduleHandler-&#62;alter() can have&#10; * multiple variations(such as hook_form_alter() and hook_form_FORM_ID_alter()).&#10; * \Drupal::moduleHandler-&#62;alter() will call all such variants defined by a&#10; * single module in turn. For the purposes of hook_module_implements_alter(),&#10; * these variants are treated as a single hook. Thus, to ensure that your&#10; * implementation of hook_form_FORM_ID_alter() is called at the right time,&#10; * you will have to change the order of hook_form_alter() implementation in&#10; * hook_module_implements_alter().&#10; *&#10; * @param $implementations&#10; *   An array keyed by the module&#39;s name. The value of each item corresponds&#10; *   to a $group, which is usually FALSE, unless the implementation is in a&#10; *   file named $module.$group.inc.&#10; * @param $hook&#10; *   The name of the module hook being implemented.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_module_implements_alter(&amp;$implementations, $hook) {&#10;  if ($hook == &#39;form_alter&#39;) {&#10;    // Move my_module_form_alter() to the end of the list.&#10;    // \Drupal::moduleHandler()-&#62;getImplementations()&#10;    // iterates through $implementations with a foreach loop which PHP iterates&#10;    // in the order that the items were added, so to move an item to the end of&#10;    // the array, we remove it and then add it.&#10;    $group = $implementations[&#39;my_module&#39;];&#10;    unset($implementations[&#39;my_module&#39;]);&#10;    $implementations[&#39;my_module&#39;] = $group;&#10;  }&#10;  $END$&#10;}" description="hook_module_implements_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_module_implements_alter" value="/**&#10; * Implements hook_module_implements_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_module_implements_alter(&amp;$implementations, $hook) {&#10;  if ($hook == &#39;form_alter&#39;) {&#10;    // Move my_module_form_alter() to the end of the list.&#10;    // \Drupal::moduleHandler()-&#62;getImplementations()&#10;    // iterates through $implementations with a foreach loop which PHP iterates&#10;    // in the order that the items were added, so to move an item to the end of&#10;    // the array, we remove it and then add it.&#10;    $group = $implementations[&#39;my_module&#39;];&#10;    unset($implementations[&#39;my_module&#39;]);&#10;    $implementations[&#39;my_module&#39;] = $group;&#10;  }&#10;  $END$&#10;}" description="hook_module_implements_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_system_info_alter" value="/**&#10; * Implements hook_system_info_alter().&#10; *&#10; * Alter the information parsed from module and theme .info.yml files.&#10; *&#10; * This hook is invoked in _system_rebuild_module_data() and in&#10; * \Drupal\Core\Extension\ThemeHandlerInterface::rebuildThemeData(). A module&#10; * may implement this hook in order to add to or alter the data generated by&#10; * reading the .info.yml file with \Drupal\Core\Extension\InfoParser.&#10; *&#10; * Using implementations of this hook to make modules required by setting the&#10; * $info[&#39;required&#39;] key is discouraged. Doing so will slow down the module&#10; * installation and uninstallation process. Instead, use&#10; * \Drupal\Core\Extension\ModuleUninstallValidatorInterface.&#10; *&#10; * @param array $info&#10; *   The .info.yml file contents, passed by reference so that it can be altered.&#10; * @param \Drupal\Core\Extension\Extension $file&#10; *   Full information about the module or theme.&#10; * @param string $type&#10; *   Either &#39;module&#39; or &#39;theme&#39;, depending on the type of .info.yml file that&#10; *   was passed.&#10; *&#10; * @see \Drupal\Core\Extension\ModuleUninstallValidatorInterface&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_system_info_alter(array &amp;$info, \Drupal\Core\Extension\Extension $file, $type) {&#10;  // Only fill this in if the .info.yml file does not define a &#39;datestamp&#39;.&#10;  if (empty($info[&#39;datestamp&#39;])) {&#10;    $info[&#39;datestamp&#39;] = $file-&#62;getMTime();&#10;  }&#10;  $END$&#10;}" description="hook_system_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_system_info_alter" value="/**&#10; * Implements hook_system_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_system_info_alter(array &amp;$info, \Drupal\Core\Extension\Extension $file, $type) {&#10;  // Only fill this in if the .info.yml file does not define a &#39;datestamp&#39;.&#10;  if (empty($info[&#39;datestamp&#39;])) {&#10;    $info[&#39;datestamp&#39;] = $file-&#62;getMTime();&#10;  }&#10;  $END$&#10;}" description="hook_system_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_module_preinstall" value="/**&#10; * Implements hook_module_preinstall().&#10; *&#10; * Perform necessary actions before a module is installed.&#10; *&#10; * @param string $module&#10; *   The name of the module about to be installed.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_module_preinstall($module) {&#10;  mymodule_cache_clear();&#10;  $END$&#10;}" description="hook_module_preinstall" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_module_preinstall" value="/**&#10; * Implements hook_module_preinstall().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_module_preinstall($module) {&#10;  mymodule_cache_clear();&#10;  $END$&#10;}" description="hook_module_preinstall" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_modules_installed" value="/**&#10; * Implements hook_modules_installed().&#10; *&#10; * Perform necessary actions after modules are installed.&#10; *&#10; * This function differs from hook_install() in that it gives all other modules&#10; * a chance to perform actions when a module is installed, whereas&#10; * hook_install() is only called on the module actually being installed. See&#10; * \Drupal\Core\Extension\ModuleInstaller::install() for a detailed description of&#10; * the order in which install hooks are invoked.&#10; *&#10; * This hook should be implemented in a .module file, not in an .install file.&#10; *&#10; * @param $modules&#10; *   An array of the modules that were installed.&#10; *&#10; * @see \Drupal\Core\Extension\ModuleInstaller::install()&#10; * @see hook_install()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_modules_installed($modules) {&#10;  if (in_array(&#39;lousy_module&#39;, $modules)) {&#10;    \Drupal::state()-&#62;set(&#39;mymodule.lousy_module_compatibility&#39;, TRUE);&#10;  }&#10;  $END$&#10;}" description="hook_modules_installed" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_modules_installed" value="/**&#10; * Implements hook_modules_installed().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_modules_installed($modules) {&#10;  if (in_array(&#39;lousy_module&#39;, $modules)) {&#10;    \Drupal::state()-&#62;set(&#39;mymodule.lousy_module_compatibility&#39;, TRUE);&#10;  }&#10;  $END$&#10;}" description="hook_modules_installed" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_install" value="/**&#10; * Implements hook_install().&#10; *&#10; * Perform setup tasks when the module is installed.&#10; *&#10; * If the module implements hook_schema(), the database tables will&#10; * be created before this hook is fired.&#10; *&#10; * If the module provides a MODULE.routing.yml or alters routing information&#10; * these changes will not be available when this hook is fired. If up-to-date&#10; * router information is required, for example to use \Drupal\Core\Url, then&#10; * (preferably) use hook_modules_installed() or rebuild the router in the&#10; * hook_install() implementation.&#10; *&#10; * Implementations of this hook are by convention declared in the module&#39;s&#10; * .install file. The implementation can rely on the .module file being loaded.&#10; * The hook will only be called when a module is installed. The module&#39;s schema&#10; * version will be set to the module&#39;s greatest numbered update hook. Because of&#10; * this, any time a hook_update_N() is added to the module, this function needs&#10; * to be updated to reflect the current version of the database schema.&#10; *&#10; * See the @link https://www.drupal.org/node/146843 Schema API documentation&#10; * @endlink for details on hook_schema and how database tables are defined.&#10; *&#10; * Note that since this function is called from a full bootstrap, all functions&#10; * (including those in modules enabled by the current page request) are&#10; * available when this hook is called. Use cases could be displaying a user&#10; * message, or calling a module function necessary for initial setup, etc.&#10; *&#10; * Please be sure that anything added or modified in this function that can&#10; * be removed during uninstall should be removed with hook_uninstall().&#10; *&#10; * @see hook_schema()&#10; * @see \Drupal\Core\Extension\ModuleInstaller::install()&#10; * @see hook_uninstall()&#10; * @see hook_modules_installed()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_install() {&#10;  // Create the styles directory and ensure it&#39;s writable.&#10;  $directory = file_default_scheme() . &#39;://styles&#39;;&#10;  $mode = isset($GLOBALS[&#39;install_state&#39;][&#39;mode&#39;]) ? $GLOBALS[&#39;install_state&#39;][&#39;mode&#39;] : NULL;&#10;  file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS, $mode);&#10;  $END$&#10;}" description="hook_install" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_install" value="/**&#10; * Implements hook_install().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_install() {&#10;  // Create the styles directory and ensure it&#39;s writable.&#10;  $directory = file_default_scheme() . &#39;://styles&#39;;&#10;  $mode = isset($GLOBALS[&#39;install_state&#39;][&#39;mode&#39;]) ? $GLOBALS[&#39;install_state&#39;][&#39;mode&#39;] : NULL;&#10;  file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS, $mode);&#10;  $END$&#10;}" description="hook_install" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_module_preuninstall" value="/**&#10; * Implements hook_module_preuninstall().&#10; *&#10; * Perform necessary actions before a module is uninstalled.&#10; *&#10; * @param string $module&#10; *   The name of the module about to be uninstalled.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_module_preuninstall($module) {&#10;  mymodule_cache_clear();&#10;  $END$&#10;}" description="hook_module_preuninstall" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_module_preuninstall" value="/**&#10; * Implements hook_module_preuninstall().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_module_preuninstall($module) {&#10;  mymodule_cache_clear();&#10;  $END$&#10;}" description="hook_module_preuninstall" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_modules_uninstalled" value="/**&#10; * Implements hook_modules_uninstalled().&#10; *&#10; * Perform necessary actions after modules are uninstalled.&#10; *&#10; * This function differs from hook_uninstall() in that it gives all other&#10; * modules a chance to perform actions when a module is uninstalled, whereas&#10; * hook_uninstall() is only called on the module actually being uninstalled.&#10; *&#10; * It is recommended that you implement this hook if your module stores&#10; * data that may have been set by other modules.&#10; *&#10; * @param $modules&#10; *   An array of the modules that were uninstalled.&#10; *&#10; * @see hook_uninstall()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_modules_uninstalled($modules) {&#10;  if (in_array(&#39;lousy_module&#39;, $modules)) {&#10;    \Drupal::state()-&#62;delete(&#39;mymodule.lousy_module_compatibility&#39;);&#10;  }&#10;  mymodule_cache_rebuild();&#10;  $END$&#10;}" description="hook_modules_uninstalled" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_modules_uninstalled" value="/**&#10; * Implements hook_modules_uninstalled().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_modules_uninstalled($modules) {&#10;  if (in_array(&#39;lousy_module&#39;, $modules)) {&#10;    \Drupal::state()-&#62;delete(&#39;mymodule.lousy_module_compatibility&#39;);&#10;  }&#10;  mymodule_cache_rebuild();&#10;  $END$&#10;}" description="hook_modules_uninstalled" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_uninstall" value="/**&#10; * Implements hook_uninstall().&#10; *&#10; * Remove any information that the module sets.&#10; *&#10; * The information that the module should remove includes:&#10; * - state that the module has set using \Drupal::state()&#10; * - modifications to existing tables&#10; *&#10; * The module should not remove its entry from the module configuration.&#10; * Database tables defined by hook_schema() will be removed automatically.&#10; *&#10; * The uninstall hook must be implemented in the module&#39;s .install file. It&#10; * will fire when the module gets uninstalled but before the module&#39;s database&#10; * tables are removed, allowing your module to query its own tables during&#10; * this routine.&#10; *&#10; * @see hook_install()&#10; * @see hook_schema()&#10; * @see hook_modules_uninstalled()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_uninstall() {&#10;  // Remove the styles directory and generated images.&#10;  file_unmanaged_delete_recursive(file_default_scheme() . &#39;://styles&#39;);&#10;  $END$&#10;}" description="hook_uninstall" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_uninstall" value="/**&#10; * Implements hook_uninstall().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_uninstall() {&#10;  // Remove the styles directory and generated images.&#10;  file_unmanaged_delete_recursive(file_default_scheme() . &#39;://styles&#39;);&#10;  $END$&#10;}" description="hook_uninstall" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_install_tasks" value="/**&#10; * Implements hook_install_tasks().&#10; *&#10; * Return an array of tasks to be performed by an installation profile.&#10; *&#10; * Any tasks you define here will be run, in order, after the installer has&#10; * finished the site configuration step but before it has moved on to the&#10; * final import of languages and the end of the installation. This is invoked&#10; * by install_tasks(). You can have any number of custom tasks to perform&#10; * during this phase.&#10; *&#10; * Each task you define here corresponds to a callback function which you must&#10; * separately define and which is called when your task is run. This function&#10; * will receive the global installation state variable, $install_state, as&#10; * input, and has the opportunity to access or modify any of its settings. See&#10; * the install_state_defaults() function in the installer for the list of&#10; * $install_state settings used by Drupal core.&#10; *&#10; * At the end of your task function, you can indicate that you want the&#10; * installer to pause and display a page to the user by returning any themed&#10; * output that should be displayed on that page (but see below for tasks that&#10; * use the form API or batch API; the return values of these task functions are&#10; * handled differently). You should also use #title within the task&#10; * callback function to set a custom page title. For some tasks, however, you&#10; * may want to simply do some processing and pass control to the next task&#10; * without ending the page request; to indicate this, simply do not send back&#10; * a return value from your task function at all. This can be used, for&#10; * example, by installation profiles that need to configure certain site&#10; * settings in the database without obtaining any input from the user.&#10; *&#10; * The task function is treated specially if it defines a form or requires&#10; * batch processing; in that case, you should return either the form API&#10; * definition or batch API array, as appropriate. See below for more&#10; * information on the &#39;type&#39; key that you must define in the task definition&#10; * to inform the installer that your task falls into one of those two&#10; * categories. It is important to use these APIs directly, since the installer&#10; * may be run non-interactively (for example, via a command line script), all&#10; * in one page request; in that case, the installer will automatically take&#10; * care of submitting forms and processing batches correctly for both types of&#10; * installations. You can inspect the $install_state[&#39;interactive&#39;] boolean to&#10; * see whether or not the current installation is interactive, if you need&#10; * access to this information.&#10; *&#10; * Remember that a user installing Drupal interactively will be able to reload&#10; * an installation page multiple times, so you should use \Drupal::state() to&#10; * store any data that you may need later in the installation process. Any&#10; * temporary state must be removed using \Drupal::state()-&#62;delete() before&#10; * your last task has completed and control is handed back to the installer.&#10; *&#10; * @param array $install_state&#10; *   An array of information about the current installation state.&#10; *&#10; * @return array&#10; *   A keyed array of tasks the profile will perform during the final stage of&#10; *   the installation. Each key represents the name of a function (usually a&#10; *   function defined by this profile, although that is not strictly required)&#10; *   that is called when that task is run. The values are associative arrays&#10; *   containing the following key-value pairs (all of which are optional):&#10; *   - display_name: The human-readable name of the task. This will be&#10; *     displayed to the user while the installer is running, along with a list&#10; *     of other tasks that are being run. Leave this unset to prevent the task&#10; *     from appearing in the list.&#10; *   - display: This is a boolean which can be used to provide finer-grained&#10; *     control over whether or not the task will display. This is mostly useful&#10; *     for tasks that are intended to display only under certain conditions;&#10; *     for these tasks, you can set &#39;display_name&#39; to the name that you want to&#10; *     display, but then use this boolean to hide the task only when certain&#10; *     conditions apply.&#10; *   - type: A string representing the type of task. This parameter has three&#10; *     possible values:&#10; *     - normal: (default) This indicates that the task will be treated as a&#10; *       regular callback function, which does its processing and optionally&#10; *       returns HTML output.&#10; *     - batch: This indicates that the task function will return a batch API&#10; *       definition suitable for batch_set() or an array of batch definitions&#10; *       suitable for consecutive batch_set() calls. The installer will then&#10; *       take care of automatically running the task via batch processing.&#10; *     - form: This indicates that the task function will return a standard&#10; *       form API definition (and separately define validation and submit&#10; *       handlers, as appropriate). The installer will then take care of&#10; *       automatically directing the user through the form submission process.&#10; *   - run: A constant representing the manner in which the task will be run.&#10; *     This parameter has three possible values:&#10; *     - INSTALL_TASK_RUN_IF_NOT_COMPLETED: (default) This indicates that the&#10; *       task will run once during the installation of the profile.&#10; *     - INSTALL_TASK_SKIP: This indicates that the task will not run during&#10; *       the current installation page request. It can be used to skip running&#10; *       an installation task when certain conditions are met, even though the&#10; *       task may still show on the list of installation tasks presented to the&#10; *       user.&#10; *     - INSTALL_TASK_RUN_IF_REACHED: This indicates that the task will run on&#10; *       each installation page request that reaches it. This is rarely&#10; *       necessary for an installation profile to use; it is primarily used by&#10; *       the Drupal installer for bootstrap-related tasks.&#10; *   - function: Normally this does not need to be set, but it can be used to&#10; *     force the installer to call a different function when the task is run&#10; *     (rather than the function whose name is given by the array key). This&#10; *     could be used, for example, to allow the same function to be called by&#10; *     two different tasks.&#10; *&#10; * @see install_state_defaults()&#10; * @see batch_set()&#10; * @see hook_install_tasks_alter()&#10; * @see install_tasks()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_install_tasks(&amp;$install_state) {&#10;  // Here, we define a variable to allow tasks to indicate that a particular,&#10;  // processor-intensive batch process needs to be triggered later on in the&#10;  // installation.&#10;  $myprofile_needs_batch_processing = \Drupal::state()-&#62;get(&#39;myprofile.needs_batch_processing&#39;, FALSE);&#10;  $tasks = array(&#10;    // This is an example of a task that defines a form which the user who is&#10;    // installing the site will be asked to fill out. To implement this task,&#10;    // your profile would define a function named myprofile_data_import_form()&#10;    // as a normal form API callback function, with associated validation and&#10;    // submit handlers. In the submit handler, in addition to saving whatever&#10;    // other data you have collected from the user, you might also call&#10;    // \Drupal::state()-&#62;set(&#39;myprofile.needs_batch_processing&#39;, TRUE) if the&#10;    // user has entered data which requires that batch processing will need to&#10;    // occur later on.&#10;    &#39;myprofile_data_import_form&#39; =&#62; array(&#10;      &#39;display_name&#39; =&#62; t(&#39;Data import options&#39;),&#10;      &#39;type&#39; =&#62; &#39;form&#39;,&#10;    ),&#10;    // Similarly, to implement this task, your profile would define a function&#10;    // named myprofile_settings_form() with associated validation and submit&#10;    // handlers. This form might be used to collect and save additional&#10;    // information from the user that your profile needs. There are no extra&#10;    // steps required for your profile to act as an &#34;installation wizard&#34;; you&#10;    // can simply define as many tasks of type &#39;form&#39; as you wish to execute,&#10;    // and the forms will be presented to the user, one after another.&#10;    &#39;myprofile_settings_form&#39; =&#62; array(&#10;      &#39;display_name&#39; =&#62; t(&#39;Additional options&#39;),&#10;      &#39;type&#39; =&#62; &#39;form&#39;,&#10;    ),&#10;    // This is an example of a task that performs batch operations. To&#10;    // implement this task, your profile would define a function named&#10;    // myprofile_batch_processing() which returns a batch API array definition&#10;    // that the installer will use to execute your batch operations. Due to the&#10;    // &#39;myprofile.needs_batch_processing&#39; variable used here, this task will be&#10;    // hidden and skipped unless your profile set it to TRUE in one of the&#10;    // previous tasks.&#10;    &#39;myprofile_batch_processing&#39; =&#62; array(&#10;      &#39;display_name&#39; =&#62; t(&#39;Import additional data&#39;),&#10;      &#39;display&#39; =&#62; $myprofile_needs_batch_processing,&#10;      &#39;type&#39; =&#62; &#39;batch&#39;,&#10;      &#39;run&#39; =&#62; $myprofile_needs_batch_processing ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,&#10;    ),&#10;    // This is an example of a task that will not be displayed in the list that&#10;    // the user sees. To implement this task, your profile would define a&#10;    // function named myprofile_final_site_setup(), in which additional,&#10;    // automated site setup operations would be performed. Since this is the&#10;    // last task defined by your profile, you should also use this function to&#10;    // call \Drupal::state()-&#62;delete(&#39;myprofile.needs_batch_processing&#39;) and&#10;    // clean up the state that was used above. If you want the user to pass&#10;    // to the final Drupal installation tasks uninterrupted, return no output&#10;    // from this function. Otherwise, return themed output that the user will&#10;    // see (for example, a confirmation page explaining that your profile&#39;s&#10;    // tasks are complete, with a link to reload the current page and therefore&#10;    // pass on to the final Drupal installation tasks when the user is ready to&#10;    // do so).&#10;    &#39;myprofile_final_site_setup&#39; =&#62; array(&#10;    ),&#10;  );&#10;  return $tasks;&#10;  $END$&#10;}" description="hook_install_tasks" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_install_tasks" value="/**&#10; * Implements hook_install_tasks().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_install_tasks(&amp;$install_state) {&#10;  // Here, we define a variable to allow tasks to indicate that a particular,&#10;  // processor-intensive batch process needs to be triggered later on in the&#10;  // installation.&#10;  $myprofile_needs_batch_processing = \Drupal::state()-&#62;get(&#39;myprofile.needs_batch_processing&#39;, FALSE);&#10;  $tasks = array(&#10;    // This is an example of a task that defines a form which the user who is&#10;    // installing the site will be asked to fill out. To implement this task,&#10;    // your profile would define a function named myprofile_data_import_form()&#10;    // as a normal form API callback function, with associated validation and&#10;    // submit handlers. In the submit handler, in addition to saving whatever&#10;    // other data you have collected from the user, you might also call&#10;    // \Drupal::state()-&#62;set(&#39;myprofile.needs_batch_processing&#39;, TRUE) if the&#10;    // user has entered data which requires that batch processing will need to&#10;    // occur later on.&#10;    &#39;myprofile_data_import_form&#39; =&#62; array(&#10;      &#39;display_name&#39; =&#62; t(&#39;Data import options&#39;),&#10;      &#39;type&#39; =&#62; &#39;form&#39;,&#10;    ),&#10;    // Similarly, to implement this task, your profile would define a function&#10;    // named myprofile_settings_form() with associated validation and submit&#10;    // handlers. This form might be used to collect and save additional&#10;    // information from the user that your profile needs. There are no extra&#10;    // steps required for your profile to act as an &#34;installation wizard&#34;; you&#10;    // can simply define as many tasks of type &#39;form&#39; as you wish to execute,&#10;    // and the forms will be presented to the user, one after another.&#10;    &#39;myprofile_settings_form&#39; =&#62; array(&#10;      &#39;display_name&#39; =&#62; t(&#39;Additional options&#39;),&#10;      &#39;type&#39; =&#62; &#39;form&#39;,&#10;    ),&#10;    // This is an example of a task that performs batch operations. To&#10;    // implement this task, your profile would define a function named&#10;    // myprofile_batch_processing() which returns a batch API array definition&#10;    // that the installer will use to execute your batch operations. Due to the&#10;    // &#39;myprofile.needs_batch_processing&#39; variable used here, this task will be&#10;    // hidden and skipped unless your profile set it to TRUE in one of the&#10;    // previous tasks.&#10;    &#39;myprofile_batch_processing&#39; =&#62; array(&#10;      &#39;display_name&#39; =&#62; t(&#39;Import additional data&#39;),&#10;      &#39;display&#39; =&#62; $myprofile_needs_batch_processing,&#10;      &#39;type&#39; =&#62; &#39;batch&#39;,&#10;      &#39;run&#39; =&#62; $myprofile_needs_batch_processing ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,&#10;    ),&#10;    // This is an example of a task that will not be displayed in the list that&#10;    // the user sees. To implement this task, your profile would define a&#10;    // function named myprofile_final_site_setup(), in which additional,&#10;    // automated site setup operations would be performed. Since this is the&#10;    // last task defined by your profile, you should also use this function to&#10;    // call \Drupal::state()-&#62;delete(&#39;myprofile.needs_batch_processing&#39;) and&#10;    // clean up the state that was used above. If you want the user to pass&#10;    // to the final Drupal installation tasks uninterrupted, return no output&#10;    // from this function. Otherwise, return themed output that the user will&#10;    // see (for example, a confirmation page explaining that your profile&#39;s&#10;    // tasks are complete, with a link to reload the current page and therefore&#10;    // pass on to the final Drupal installation tasks when the user is ready to&#10;    // do so).&#10;    &#39;myprofile_final_site_setup&#39; =&#62; array(&#10;    ),&#10;  );&#10;  return $tasks;&#10;  $END$&#10;}" description="hook_install_tasks" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_install_tasks_alter" value="/**&#10; * Implements hook_install_tasks_alter().&#10; *&#10; * Alter the full list of installation tasks.&#10; *&#10; * You can use this hook to change or replace any part of the Drupal&#10; * installation process that occurs after the installation profile is selected.&#10; *&#10; * This hook is invoked on the install profile in install_tasks().&#10; *&#10; * @param $tasks&#10; *   An array of all available installation tasks, including those provided by&#10; *   Drupal core. You can modify this array to change or replace individual&#10; *   steps within the installation process.&#10; * @param $install_state&#10; *   An array of information about the current installation state.&#10; *&#10; * @see hook_install_tasks()&#10; * @see install_tasks()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_install_tasks_alter(&amp;$tasks, $install_state) {&#10;  // Replace the entire site configuration form provided by Drupal core&#10;  // with a custom callback function defined by this installation profile.&#10;  $tasks[&#39;install_configure_form&#39;][&#39;function&#39;] = &#39;myprofile_install_configure_form&#39;;&#10;  $END$&#10;}" description="hook_install_tasks_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_install_tasks_alter" value="/**&#10; * Implements hook_install_tasks_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_install_tasks_alter(&amp;$tasks, $install_state) {&#10;  // Replace the entire site configuration form provided by Drupal core&#10;  // with a custom callback function defined by this installation profile.&#10;  $tasks[&#39;install_configure_form&#39;][&#39;function&#39;] = &#39;myprofile_install_configure_form&#39;;&#10;  $END$&#10;}" description="hook_install_tasks_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_update_N" value="/**&#10; * Implements hook_update_N().&#10; *&#10; * Perform a single update between minor versions.&#10; *&#10; * hook_update_N() can only be used to update between minor versions of a&#10; * module. To upgrade between major versions of Drupal (for example, between&#10; * Drupal 7 and 8), use the @link migrate Migrate API @endlink instead.&#10; *&#10; * @section sec_naming Naming and documenting your function&#10; * For each change in a module that requires one or more actions to be performed&#10; * when updating a site, add a new implementation of hook_update_N() to your&#10; * mymodule.install file (assuming mymodule is the machine name of your module).&#10; * Implementations of hook_update_N() are named (module name)_update_(number).&#10; * The numbers are normally composed of three parts:&#10; * - 1 or 2 digits for Drupal core compatibility (Drupal 8, 9, 10, etc.). This&#10; *   convention must be followed.&#10; * - 1 digit for your module&#39;s major release version; for example, for 8.x-1.*&#10; *   use 1, for 8.x-2.* use 2, for Core 8.0.x use 0, and for Core 8.1.x use 1.&#10; *   This convention is optional but suggested for clarity.&#10; * - 2 digits for sequential counting, starting with 01. Note that the x000&#10; *   number can never be used: the lowest update number that will be recognized&#10; *   and run for major version x is x001.&#10; * Examples:&#10; * - node_update_8001(): The first update for the Drupal 8.0.x version of the&#10; *   Drupal Core node module.&#10; * - mymodule_update_8101(): The first update for your custom or contributed&#10; *   module&#39;s 8.x-1.x versions.&#10; * - mymodule_update_8201(): The first update for the 8.x-2.x versions.&#10; *&#10; * Never renumber update functions. The numeric part of the hook implementation&#10; * function is stored in the database to keep track of which updates have run,&#10; * so it is important to maintain this information consistently.&#10; *&#10; * The documentation block preceding this function is stripped of newlines and&#10; * used as the description for the update on the pending updates task list,&#10; * which users will see when they run the update.php script.&#10; *&#10; * @section sec_notes Notes about the function body&#10; * Writing hook_update_N() functions is tricky. There are several reasons why&#10; * this is the case:&#10; * - You do not know when updates will be run: someone could be keeping up with&#10; *   every update and run them when the database and code are in the same state&#10; *   as when you wrote your update function, or they could have waited until a&#10; *   few more updates have come out, and run several at the same time.&#10; * - You do not know the state of other modules&#39; updates either.&#10; * - Other modules can use hook_update_dependencies() to run updates between&#10; *   your module&#39;s updates, so you also cannot count on your functions running&#10; *   right after one another.&#10; * - You do not know what environment your update will run in (which modules&#10; *   are installed, whether certain hooks are implemented or not, whether&#10; *   services are overridden, etc.).&#10; *&#10; * Because of these reasons, you&#39;ll need to use care in writing your update&#10; * function. Some things to think about:&#10; * - Never assume that the database schema is the same when the update will run&#10; *   as it is when you wrote the update function. So, when updating a database&#10; *   table or field, put the schema information you want to update to directly&#10; *   into your function instead of calling your hook_schema() function to&#10; *   retrieve it (this is one case where the right thing to do is copy and paste&#10; *   the code).&#10; * - Never assume that the configuration schema is the same when the update will&#10; *   run as it is when you wrote the update function. So, when saving&#10; *   configuration, use the $has_trusted_data = TRUE parameter so that schema is&#10; *   ignored, and make sure that the configuration data you are saving matches&#10; *   the configuration schema at the time when you write the update function&#10; *   (later updates may change it again to match new schema changes).&#10; * - Never assume your field or entity type definitions are the same when the&#10; *   update will run as they are when you wrote the update function. Always&#10; *   retrieve the correct version via&#10; *   \Drupal::entityDefinitionUpdateManager()::getEntityType() or&#10; *   \Drupal::entityDefinitionUpdateManager()::getFieldStorageDefinition(). When&#10; *   adding a new definition always replicate it in the update function body as&#10; *   you would do with a schema definition.&#10; * - Never call \Drupal::entityDefinitionUpdateManager()::applyUpdates() in an&#10; *   update function, as it will apply updates for any module not only yours,&#10; *   which will lead to unpredictable results.&#10; * - Be careful about API functions and especially CRUD operations that you use&#10; *   in your update function. If they invoke hooks or use services, they may&#10; *   not behave as expected, and it may actually not be appropriate to use the&#10; *   normal API functions that invoke all the hooks, use the database schema,&#10; *   and/or use services in an update function -- you may need to switch to&#10; *   using a more direct method (database query, etc.).&#10; * - In particular, loading, saving, or performing any other CRUD operation on&#10; *   an entity is never safe to do (they always involve hooks and services).&#10; * - Never rebuild the router during an update function.&#10; *&#10; * The following actions are examples of things that are safe to do during&#10; * updates:&#10; * - Cache invalidation.&#10; * - Using \Drupal::configFactory()-&#62;getEditable() and \Drupal::config(), as&#10; *   long as you make sure that your update data matches the schema, and you&#10; *   use the $has_trusted_data argument in the save operation.&#10; * - Marking a container for rebuild.&#10; * - Using the API provided by \Drupal::entityDefinitionUpdateManager() to&#10; *   update the entity schema based on changes in entity type or field&#10; *   definitions provided by your module.&#10; *&#10; * See https://www.drupal.org/node/2535316 for more on writing update functions.&#10; *&#10; * @section sec_bulk Batch updates&#10; * If running your update all at once could possibly cause PHP to time out, use&#10; * the $sandbox parameter to indicate that the Batch API should be used for your&#10; * update. In this case, your update function acts as an implementation of&#10; * callback_batch_operation(), and $sandbox acts as the batch context&#10; * parameter. In your function, read the state information from the previous&#10; * run from $sandbox (or initialize), run a chunk of updates, save the state in&#10; * $sandbox, and set $sandbox[&#39;#finished&#39;] to a value between 0 and 1 to&#10; * indicate the percent completed, or 1 if it is finished (you need to do this&#10; * explicitly in each pass).&#10; *&#10; * See the @link batch Batch operations topic @endlink for more information on&#10; * how to use the Batch API.&#10; *&#10; * @param array $sandbox&#10; *   Stores information for batch updates. See above for more information.&#10; *&#10; * @return string|null&#10; *   Optionally, update hooks may return a translated string that will be&#10; *   displayed to the user after the update has completed. If no message is&#10; *   returned, no message will be presented to the user.&#10; *&#10; * @throws \Drupal\Core\Utility\UpdateException|PDOException&#10; *   In case of error, update hooks should throw an instance of&#10; *   Drupal\Core\Utility\UpdateException with a meaningful message for the user.&#10; *   If a database query fails for whatever reason, it will throw a&#10; *   PDOException.&#10; *&#10; * @ingroup update_api&#10; *&#10; * @see batch&#10; * @see schemaapi&#10; * @see hook_update_last_removed()&#10; * @see update_get_update_list()&#10; * @see \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface&#10; * @see node_update_8001&#10; * @see system_update_8004&#10; * @see https://www.drupal.org/node/2535316&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_update_N(&amp;$sandbox) {&#10;  // For non-batch updates, the signature can simply be:&#10;  // function hook_update_N() {&#10;&#10;  // Example function body for adding a field to a database table, which does&#10;  // not require a batch operation:&#10;  $spec = array(&#10;    &#39;type&#39; =&#62; &#39;varchar&#39;,&#10;    &#39;description&#39; =&#62; &#34;New Col&#34;,&#10;    &#39;length&#39; =&#62; 20,&#10;    &#39;not null&#39; =&#62; FALSE,&#10;  );&#10;  $schema = Database::getConnection()-&#62;schema();&#10;  $schema-&#62;addField(&#39;mytable1&#39;, &#39;newcol&#39;, $spec);&#10;&#10;  // Example of what to do if there is an error during your update.&#10;  if ($some_error_condition_met) {&#10;    throw new UpdateException(&#39;Something went wrong; here is what you should do.&#39;);&#10;  }&#10;&#10;  // Example function body for a batch update. In this example, the values in&#10;  // a database field are updated.&#10;  if (!isset($sandbox[&#39;progress&#39;])) {&#10;    // This must be the first run. Initialize the sandbox.&#10;    $sandbox[&#39;progress&#39;] = 0;&#10;    $sandbox[&#39;current_pk&#39;] = 0;&#10;    $sandbox[&#39;max&#39;] = Database::getConnection()-&#62;query(&#39;SELECT COUNT(myprimarykey) FROM {mytable1}&#39;)-&#62;fetchField() - 1;&#10;  }&#10;&#10;  // Update in chunks of 20.&#10;  $records = Database::getConnection()-&#62;select(&#39;mytable1&#39;, &#39;m&#39;)&#10;    -&#62;fields(&#39;m&#39;, array(&#39;myprimarykey&#39;, &#39;otherfield&#39;))&#10;    -&#62;condition(&#39;myprimarykey&#39;, $sandbox[&#39;current_pk&#39;], &#39;&#62;&#39;)&#10;    -&#62;range(0, 20)&#10;    -&#62;orderBy(&#39;myprimarykey&#39;, &#39;ASC&#39;)&#10;    -&#62;execute();&#10;  foreach ($records as $record) {&#10;    // Here, you would make an update something related to this record. In this&#10;    // example, some text is added to the other field.&#10;    Database::getConnection()-&#62;update(&#39;mytable1&#39;)&#10;      -&#62;fields(array(&#39;otherfield&#39; =&#62; $record-&#62;otherfield . &#39;-suffix&#39;))&#10;      -&#62;condition(&#39;myprimarykey&#39;, $record-&#62;myprimarykey)&#10;      -&#62;execute();&#10;&#10;    $sandbox[&#39;progress&#39;]++;&#10;    $sandbox[&#39;current_pk&#39;] = $record-&#62;myprimarykey;&#10;  }&#10;&#10;  $sandbox[&#39;#finished&#39;] = empty($sandbox[&#39;max&#39;]) ? 1 : ($sandbox[&#39;progress&#39;] / $sandbox[&#39;max&#39;]);&#10;&#10;  // To display a message to the user when the update is completed, return it.&#10;  // If you do not want to display a completion message, return nothing.&#10;  return t(&#39;All foo bars were updated with the new suffix&#39;);&#10;  $END$&#10;}" description="hook_update_N" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_update_N" value="/**&#10; * Implements hook_update_N().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_update_N(&amp;$sandbox) {&#10;  // For non-batch updates, the signature can simply be:&#10;  // function hook_update_N() {&#10;&#10;  // Example function body for adding a field to a database table, which does&#10;  // not require a batch operation:&#10;  $spec = array(&#10;    &#39;type&#39; =&#62; &#39;varchar&#39;,&#10;    &#39;description&#39; =&#62; &#34;New Col&#34;,&#10;    &#39;length&#39; =&#62; 20,&#10;    &#39;not null&#39; =&#62; FALSE,&#10;  );&#10;  $schema = Database::getConnection()-&#62;schema();&#10;  $schema-&#62;addField(&#39;mytable1&#39;, &#39;newcol&#39;, $spec);&#10;&#10;  // Example of what to do if there is an error during your update.&#10;  if ($some_error_condition_met) {&#10;    throw new UpdateException(&#39;Something went wrong; here is what you should do.&#39;);&#10;  }&#10;&#10;  // Example function body for a batch update. In this example, the values in&#10;  // a database field are updated.&#10;  if (!isset($sandbox[&#39;progress&#39;])) {&#10;    // This must be the first run. Initialize the sandbox.&#10;    $sandbox[&#39;progress&#39;] = 0;&#10;    $sandbox[&#39;current_pk&#39;] = 0;&#10;    $sandbox[&#39;max&#39;] = Database::getConnection()-&#62;query(&#39;SELECT COUNT(myprimarykey) FROM {mytable1}&#39;)-&#62;fetchField() - 1;&#10;  }&#10;&#10;  // Update in chunks of 20.&#10;  $records = Database::getConnection()-&#62;select(&#39;mytable1&#39;, &#39;m&#39;)&#10;    -&#62;fields(&#39;m&#39;, array(&#39;myprimarykey&#39;, &#39;otherfield&#39;))&#10;    -&#62;condition(&#39;myprimarykey&#39;, $sandbox[&#39;current_pk&#39;], &#39;&#62;&#39;)&#10;    -&#62;range(0, 20)&#10;    -&#62;orderBy(&#39;myprimarykey&#39;, &#39;ASC&#39;)&#10;    -&#62;execute();&#10;  foreach ($records as $record) {&#10;    // Here, you would make an update something related to this record. In this&#10;    // example, some text is added to the other field.&#10;    Database::getConnection()-&#62;update(&#39;mytable1&#39;)&#10;      -&#62;fields(array(&#39;otherfield&#39; =&#62; $record-&#62;otherfield . &#39;-suffix&#39;))&#10;      -&#62;condition(&#39;myprimarykey&#39;, $record-&#62;myprimarykey)&#10;      -&#62;execute();&#10;&#10;    $sandbox[&#39;progress&#39;]++;&#10;    $sandbox[&#39;current_pk&#39;] = $record-&#62;myprimarykey;&#10;  }&#10;&#10;  $sandbox[&#39;#finished&#39;] = empty($sandbox[&#39;max&#39;]) ? 1 : ($sandbox[&#39;progress&#39;] / $sandbox[&#39;max&#39;]);&#10;&#10;  // To display a message to the user when the update is completed, return it.&#10;  // If you do not want to display a completion message, return nothing.&#10;  return t(&#39;All foo bars were updated with the new suffix&#39;);&#10;  $END$&#10;}" description="hook_update_N" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_post_update_NAME" value="/**&#10; * Implements hook_post_update_NAME().&#10; *&#10; * Executes an update which is intended to update data, like entities.&#10; *&#10; * These implementations have to be placed in a MODULE.post_update.php file.&#10; *&#10; * These updates are executed after all hook_update_N() implementations. At this&#10; * stage Drupal is already fully repaired so you can use any API as you wish.&#10; *&#10; * NAME can be arbitrary machine names. In contrast to hook_update_N() the order&#10; * of functions in the file is the only thing which ensures the execution order&#10; * of those functions.&#10; *&#10; * Drupal also ensures to not execute the same hook_post_update_NAME() function&#10; * twice.&#10; *&#10; * @param array $sandbox&#10; *   Stores information for batch updates. See above for more information.&#10; *&#10; * @return string|null&#10; *   Optionally, hook_post_update_NAME() hooks may return a translated string&#10; *   that will be displayed to the user after the update has completed. If no&#10; *   message is returned, no message will be presented to the user.&#10; *&#10; * @throws \Drupal\Core\Utility\UpdateException|PDOException&#10; *   In case of error, update hooks should throw an instance of&#10; *   \Drupal\Core\Utility\UpdateException with a meaningful message for the&#10; *   user. If a database query fails for whatever reason, it will throw a&#10; *   PDOException.&#10; *&#10; * @ingroup update_api&#10; *&#10; * @see hook_update_N()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_post_update_NAME(&amp;$sandbox) {&#10;  // Example of updating some content.&#10;  $node = \Drupal\node\Entity\Node::load(123);&#10;  $node-&#62;setTitle(&#39;foo&#39;);&#10;  $node-&#62;save();&#10;&#10;  $result = t(&#39;Node %nid saved&#39;, [&#39;%nid&#39; =&#62; $node-&#62;id()]);&#10;&#10;  // Example of disabling blocks with missing condition contexts. Note: The&#10;  // block itself is in a state which is valid at that point.&#10;  // @see block_update_8001()&#10;  // @see block_post_update_disable_blocks_with_missing_contexts()&#10;  $block_update_8001 = \Drupal::keyValue(&#39;update_backup&#39;)-&#62;get(&#39;block_update_8001&#39;, []);&#10;&#10;  $block_ids = array_keys($block_update_8001);&#10;  $block_storage = \Drupal::entityManager()-&#62;getStorage(&#39;block&#39;);&#10;  $blocks = $block_storage-&#62;loadMultiple($block_ids);&#10;  /** @var $blocks \Drupal\block\BlockInterface[] */&#10;  foreach ($blocks as $block) {&#10;    // This block has had conditions removed due to an inability to resolve&#10;    // contexts in block_update_8001() so disable it.&#10;&#10;    // Disable currently enabled blocks.&#10;    if ($block_update_8001[$block-&#62;id()][&#39;status&#39;]) {&#10;      $block-&#62;setStatus(FALSE);&#10;      $block-&#62;save();&#10;    }&#10;  }&#10;&#10;  return $result;&#10;  $END$&#10;}" description="hook_post_update_NAME" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_post_update_NAME" value="/**&#10; * Implements hook_post_update_NAME().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_post_update_NAME(&amp;$sandbox) {&#10;  // Example of updating some content.&#10;  $node = \Drupal\node\Entity\Node::load(123);&#10;  $node-&#62;setTitle(&#39;foo&#39;);&#10;  $node-&#62;save();&#10;&#10;  $result = t(&#39;Node %nid saved&#39;, [&#39;%nid&#39; =&#62; $node-&#62;id()]);&#10;&#10;  // Example of disabling blocks with missing condition contexts. Note: The&#10;  // block itself is in a state which is valid at that point.&#10;  // @see block_update_8001()&#10;  // @see block_post_update_disable_blocks_with_missing_contexts()&#10;  $block_update_8001 = \Drupal::keyValue(&#39;update_backup&#39;)-&#62;get(&#39;block_update_8001&#39;, []);&#10;&#10;  $block_ids = array_keys($block_update_8001);&#10;  $block_storage = \Drupal::entityManager()-&#62;getStorage(&#39;block&#39;);&#10;  $blocks = $block_storage-&#62;loadMultiple($block_ids);&#10;  /** @var $blocks \Drupal\block\BlockInterface[] */&#10;  foreach ($blocks as $block) {&#10;    // This block has had conditions removed due to an inability to resolve&#10;    // contexts in block_update_8001() so disable it.&#10;&#10;    // Disable currently enabled blocks.&#10;    if ($block_update_8001[$block-&#62;id()][&#39;status&#39;]) {&#10;      $block-&#62;setStatus(FALSE);&#10;      $block-&#62;save();&#10;    }&#10;  }&#10;&#10;  return $result;&#10;  $END$&#10;}" description="hook_post_update_NAME" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_update_dependencies" value="/**&#10; * Implements hook_update_dependencies().&#10; *&#10; * Return an array of information about module update dependencies.&#10; *&#10; * This can be used to indicate update functions from other modules that your&#10; * module&#39;s update functions depend on, or vice versa. It is used by the update&#10; * system to determine the appropriate order in which updates should be run, as&#10; * well as to search for missing dependencies.&#10; *&#10; * Implementations of this hook should be placed in a mymodule.install file in&#10; * the same directory as mymodule.module.&#10; *&#10; * @return&#10; *   A multidimensional array containing information about the module update&#10; *   dependencies. The first two levels of keys represent the module and update&#10; *   number (respectively) for which information is being returned, and the&#10; *   value is an array of information about that update&#39;s dependencies. Within&#10; *   this array, each key represents a module, and each value represents the&#10; *   number of an update function within that module. In the event that your&#10; *   update function depends on more than one update from a particular module,&#10; *   you should always list the highest numbered one here (since updates within&#10; *   a given module always run in numerical order).&#10; *&#10; * @ingroup update_api&#10; *&#10; * @see update_resolve_dependencies()&#10; * @see hook_update_N()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_update_dependencies() {&#10;  // Indicate that the mymodule_update_8001() function provided by this module&#10;  // must run after the another_module_update_8003() function provided by the&#10;  // &#39;another_module&#39; module.&#10;  $dependencies[&#39;mymodule&#39;][8001] = array(&#10;    &#39;another_module&#39; =&#62; 8003,&#10;  );&#10;  // Indicate that the mymodule_update_8002() function provided by this module&#10;  // must run before the yet_another_module_update_8005() function provided by&#10;  // the &#39;yet_another_module&#39; module. (Note that declaring dependencies in this&#10;  // direction should be done only in rare situations, since it can lead to the&#10;  // following problem: If a site has already run the yet_another_module&#10;  // module&#39;s database updates before it updates its codebase to pick up the&#10;  // newest mymodule code, then the dependency declared here will be ignored.)&#10;  $dependencies[&#39;yet_another_module&#39;][8005] = array(&#10;    &#39;mymodule&#39; =&#62; 8002,&#10;  );&#10;  return $dependencies;&#10;  $END$&#10;}" description="hook_update_dependencies" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_update_dependencies" value="/**&#10; * Implements hook_update_dependencies().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_update_dependencies() {&#10;  // Indicate that the mymodule_update_8001() function provided by this module&#10;  // must run after the another_module_update_8003() function provided by the&#10;  // &#39;another_module&#39; module.&#10;  $dependencies[&#39;mymodule&#39;][8001] = array(&#10;    &#39;another_module&#39; =&#62; 8003,&#10;  );&#10;  // Indicate that the mymodule_update_8002() function provided by this module&#10;  // must run before the yet_another_module_update_8005() function provided by&#10;  // the &#39;yet_another_module&#39; module. (Note that declaring dependencies in this&#10;  // direction should be done only in rare situations, since it can lead to the&#10;  // following problem: If a site has already run the yet_another_module&#10;  // module&#39;s database updates before it updates its codebase to pick up the&#10;  // newest mymodule code, then the dependency declared here will be ignored.)&#10;  $dependencies[&#39;yet_another_module&#39;][8005] = array(&#10;    &#39;mymodule&#39; =&#62; 8002,&#10;  );&#10;  return $dependencies;&#10;  $END$&#10;}" description="hook_update_dependencies" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_update_last_removed" value="/**&#10; * Implements hook_update_last_removed().&#10; *&#10; * Return a number which is no longer available as hook_update_N().&#10; *&#10; * If you remove some update functions from your mymodule.install file, you&#10; * should notify Drupal of those missing functions. This way, Drupal can&#10; * ensure that no update is accidentally skipped.&#10; *&#10; * Implementations of this hook should be placed in a mymodule.install file in&#10; * the same directory as mymodule.module.&#10; *&#10; * @return&#10; *   An integer, corresponding to hook_update_N() which has been removed from&#10; *   mymodule.install.&#10; *&#10; * @ingroup update_api&#10; *&#10; * @see hook_update_N()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_update_last_removed() {&#10;  // We&#39;ve removed the 8.x-1.x version of mymodule, including database updates.&#10;  // The next update function is mymodule_update_8200().&#10;  return 8103;&#10;  $END$&#10;}" description="hook_update_last_removed" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_update_last_removed" value="/**&#10; * Implements hook_update_last_removed().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_update_last_removed() {&#10;  // We&#39;ve removed the 8.x-1.x version of mymodule, including database updates.&#10;  // The next update function is mymodule_update_8200().&#10;  return 8103;&#10;  $END$&#10;}" description="hook_update_last_removed" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_updater_info" value="/**&#10; * Implements hook_updater_info().&#10; *&#10; * Provide information on Updaters (classes that can update Drupal).&#10; *&#10; * Drupal\Core\Updater\Updater is a class that knows how to update various parts&#10; * of the Drupal file system, for example to update modules that have newer&#10; * releases, or to install a new theme.&#10; *&#10; * @return&#10; *   An associative array of information about the updater(s) being provided.&#10; *   This array is keyed by a unique identifier for each updater, and the&#10; *   values are subarrays that can contain the following keys:&#10; *   - class: The name of the PHP class which implements this updater.&#10; *   - name: Human-readable name of this updater.&#10; *   - weight: Controls what order the Updater classes are consulted to decide&#10; *     which one should handle a given task. When an update task is being run,&#10; *     the system will loop through all the Updater classes defined in this&#10; *     registry in weight order and let each class respond to the task and&#10; *     decide if each Updater wants to handle the task. In general, this&#10; *     doesn&#39;t matter, but if you need to override an existing Updater, make&#10; *     sure your Updater has a lighter weight so that it comes first.&#10; *&#10; * @ingroup update_api&#10; *&#10; * @see drupal_get_updaters()&#10; * @see hook_updater_info_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_updater_info() {&#10;  return array(&#10;    &#39;module&#39; =&#62; array(&#10;      &#39;class&#39; =&#62; &#39;Drupal\Core\Updater\Module&#39;,&#10;      &#39;name&#39; =&#62; t(&#39;Update modules&#39;),&#10;      &#39;weight&#39; =&#62; 0,&#10;    ),&#10;    &#39;theme&#39; =&#62; array(&#10;      &#39;class&#39; =&#62; &#39;Drupal\Core\Updater\Theme&#39;,&#10;      &#39;name&#39; =&#62; t(&#39;Update themes&#39;),&#10;      &#39;weight&#39; =&#62; 0,&#10;    ),&#10;  );&#10;  $END$&#10;}" description="hook_updater_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_updater_info" value="/**&#10; * Implements hook_updater_info().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_updater_info() {&#10;  return array(&#10;    &#39;module&#39; =&#62; array(&#10;      &#39;class&#39; =&#62; &#39;Drupal\Core\Updater\Module&#39;,&#10;      &#39;name&#39; =&#62; t(&#39;Update modules&#39;),&#10;      &#39;weight&#39; =&#62; 0,&#10;    ),&#10;    &#39;theme&#39; =&#62; array(&#10;      &#39;class&#39; =&#62; &#39;Drupal\Core\Updater\Theme&#39;,&#10;      &#39;name&#39; =&#62; t(&#39;Update themes&#39;),&#10;      &#39;weight&#39; =&#62; 0,&#10;    ),&#10;  );&#10;  $END$&#10;}" description="hook_updater_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_updater_info_alter" value="/**&#10; * Implements hook_updater_info_alter().&#10; *&#10; * Alter the Updater information array.&#10; *&#10; * An Updater is a class that knows how to update various parts of the Drupal&#10; * file system, for example to update modules that have newer releases, or to&#10; * install a new theme.&#10; *&#10; * @param array $updaters&#10; *   Associative array of updaters as defined through hook_updater_info().&#10; *   Alter this array directly.&#10; *&#10; * @ingroup update_api&#10; *&#10; * @see drupal_get_updaters()&#10; * @see hook_updater_info()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_updater_info_alter(&amp;$updaters) {&#10;  // Adjust weight so that the theme Updater gets a chance to handle a given&#10;  // update task before module updaters.&#10;  $updaters[&#39;theme&#39;][&#39;weight&#39;] = -1;&#10;  $END$&#10;}" description="hook_updater_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_updater_info_alter" value="/**&#10; * Implements hook_updater_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_updater_info_alter(&amp;$updaters) {&#10;  // Adjust weight so that the theme Updater gets a chance to handle a given&#10;  // update task before module updaters.&#10;  $updaters[&#39;theme&#39;][&#39;weight&#39;] = -1;&#10;  $END$&#10;}" description="hook_updater_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_requirements" value="/**&#10; * Implements hook_requirements().&#10; *&#10; * Check installation requirements and do status reporting.&#10; *&#10; * This hook has three closely related uses, determined by the $phase argument:&#10; * - Checking installation requirements ($phase == &#39;install&#39;).&#10; * - Checking update requirements ($phase == &#39;update&#39;).&#10; * - Status reporting ($phase == &#39;runtime&#39;).&#10; *&#10; * Note that this hook, like all others dealing with installation and updates,&#10; * must reside in a module_name.install file, or it will not properly abort&#10; * the installation of the module if a critical requirement is missing.&#10; *&#10; * During the &#39;install&#39; phase, modules can for example assert that&#10; * library or server versions are available or sufficient.&#10; * Note that the installation of a module can happen during installation of&#10; * Drupal itself (by install.php) with an installation profile or later by hand.&#10; * As a consequence, install-time requirements must be checked without access&#10; * to the full Drupal API, because it is not available during install.php.&#10; * If a requirement has a severity of REQUIREMENT_ERROR, install.php will abort&#10; * or at least the module will not install.&#10; * Other severity levels have no effect on the installation.&#10; * Module dependencies do not belong to these installation requirements,&#10; * but should be defined in the module&#39;s .info.yml file.&#10; *&#10; * During installation (when $phase == &#39;install&#39;), if you need to load a class&#10; * from your module, you&#39;ll need to include the class file directly.&#10; *&#10; * The &#39;runtime&#39; phase is not limited to pure installation requirements&#10; * but can also be used for more general status information like maintenance&#10; * tasks and security issues.&#10; * The returned &#39;requirements&#39; will be listed on the status report in the&#10; * administration section, with indication of the severity level.&#10; * Moreover, any requirement with a severity of REQUIREMENT_ERROR severity will&#10; * result in a notice on the administration configuration page.&#10; *&#10; * @param $phase&#10; *   The phase in which requirements are checked:&#10; *   - install: The module is being installed.&#10; *   - update: The module is enabled and update.php is run.&#10; *   - runtime: The runtime requirements are being checked and shown on the&#10; *     status report page.&#10; *&#10; * @return&#10; *   An associative array where the keys are arbitrary but must be unique (it&#10; *   is suggested to use the module short name as a prefix) and the values are&#10; *   themselves associative arrays with the following elements:&#10; *   - title: The name of the requirement.&#10; *   - value: The current value (e.g., version, time, level, etc). During&#10; *     install phase, this should only be used for version numbers, do not set&#10; *     it if not applicable.&#10; *   - description: The description of the requirement/status.&#10; *   - severity: The requirement&#39;s result/severity level, one of:&#10; *     - REQUIREMENT_INFO: For info only.&#10; *     - REQUIREMENT_OK: The requirement is satisfied.&#10; *     - REQUIREMENT_WARNING: The requirement failed with a warning.&#10; *     - REQUIREMENT_ERROR: The requirement failed with an error.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_requirements($phase) {&#10;  $requirements = array();&#10;&#10;  // Report Drupal version&#10;  if ($phase == &#39;runtime&#39;) {&#10;    $requirements[&#39;drupal&#39;] = array(&#10;      &#39;title&#39; =&#62; t(&#39;Drupal&#39;),&#10;      &#39;value&#39; =&#62; \Drupal::VERSION,&#10;      &#39;severity&#39; =&#62; REQUIREMENT_INFO&#10;    );&#10;  }&#10;&#10;  // Test PHP version&#10;  $requirements[&#39;php&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;PHP&#39;),&#10;    &#39;value&#39; =&#62; ($phase == &#39;runtime&#39;) ? \Drupal::l(phpversion(), new Url(&#39;system.php&#39;)) : phpversion(),&#10;  );&#10;  if (version_compare(phpversion(), DRUPAL_MINIMUM_PHP) &#60; 0) {&#10;    $requirements[&#39;php&#39;][&#39;description&#39;] = t(&#39;Your PHP installation is too old. Drupal requires at least PHP %version.&#39;, array(&#39;%version&#39; =&#62; DRUPAL_MINIMUM_PHP));&#10;    $requirements[&#39;php&#39;][&#39;severity&#39;] = REQUIREMENT_ERROR;&#10;  }&#10;&#10;  // Report cron status&#10;  if ($phase == &#39;runtime&#39;) {&#10;    $cron_last = \Drupal::state()-&#62;get(&#39;system.cron_last&#39;);&#10;&#10;    if (is_numeric($cron_last)) {&#10;      $requirements[&#39;cron&#39;][&#39;value&#39;] = t(&#39;Last run @time ago&#39;, array(&#39;@time&#39; =&#62; \Drupal::service(&#39;date.formatter&#39;)-&#62;formatTimeDiffSince($cron_last)));&#10;    }&#10;    else {&#10;      $requirements[&#39;cron&#39;] = array(&#10;        &#39;description&#39; =&#62; t(&#39;Cron has not run. It appears cron jobs have not been setup on your system. Check the help pages for &#60;a href=&#34;:url&#34;&#62;configuring cron jobs&#60;/a&#62;.&#39;, array(&#39;:url&#39; =&#62; &#39;https://www.drupal.org/cron&#39;)),&#10;        &#39;severity&#39; =&#62; REQUIREMENT_ERROR,&#10;        &#39;value&#39; =&#62; t(&#39;Never run&#39;),&#10;      );&#10;    }&#10;&#10;    $requirements[&#39;cron&#39;][&#39;description&#39;] .= &#39; &#39; . t(&#39;You can &#60;a href=&#34;:cron&#34;&#62;run cron manually&#60;/a&#62;.&#39;, array(&#39;:cron&#39; =&#62; \Drupal::url(&#39;system.run_cron&#39;)));&#10;&#10;    $requirements[&#39;cron&#39;][&#39;title&#39;] = t(&#39;Cron maintenance tasks&#39;);&#10;  }&#10;&#10;  return $requirements;&#10;  $END$&#10;}" description="hook_requirements" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_requirements" value="/**&#10; * Implements hook_requirements().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_requirements($phase) {&#10;  $requirements = array();&#10;&#10;  // Report Drupal version&#10;  if ($phase == &#39;runtime&#39;) {&#10;    $requirements[&#39;drupal&#39;] = array(&#10;      &#39;title&#39; =&#62; t(&#39;Drupal&#39;),&#10;      &#39;value&#39; =&#62; \Drupal::VERSION,&#10;      &#39;severity&#39; =&#62; REQUIREMENT_INFO&#10;    );&#10;  }&#10;&#10;  // Test PHP version&#10;  $requirements[&#39;php&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;PHP&#39;),&#10;    &#39;value&#39; =&#62; ($phase == &#39;runtime&#39;) ? \Drupal::l(phpversion(), new Url(&#39;system.php&#39;)) : phpversion(),&#10;  );&#10;  if (version_compare(phpversion(), DRUPAL_MINIMUM_PHP) &#60; 0) {&#10;    $requirements[&#39;php&#39;][&#39;description&#39;] = t(&#39;Your PHP installation is too old. Drupal requires at least PHP %version.&#39;, array(&#39;%version&#39; =&#62; DRUPAL_MINIMUM_PHP));&#10;    $requirements[&#39;php&#39;][&#39;severity&#39;] = REQUIREMENT_ERROR;&#10;  }&#10;&#10;  // Report cron status&#10;  if ($phase == &#39;runtime&#39;) {&#10;    $cron_last = \Drupal::state()-&#62;get(&#39;system.cron_last&#39;);&#10;&#10;    if (is_numeric($cron_last)) {&#10;      $requirements[&#39;cron&#39;][&#39;value&#39;] = t(&#39;Last run @time ago&#39;, array(&#39;@time&#39; =&#62; \Drupal::service(&#39;date.formatter&#39;)-&#62;formatTimeDiffSince($cron_last)));&#10;    }&#10;    else {&#10;      $requirements[&#39;cron&#39;] = array(&#10;        &#39;description&#39; =&#62; t(&#39;Cron has not run. It appears cron jobs have not been setup on your system. Check the help pages for &#60;a href=&#34;:url&#34;&#62;configuring cron jobs&#60;/a&#62;.&#39;, array(&#39;:url&#39; =&#62; &#39;https://www.drupal.org/cron&#39;)),&#10;        &#39;severity&#39; =&#62; REQUIREMENT_ERROR,&#10;        &#39;value&#39; =&#62; t(&#39;Never run&#39;),&#10;      );&#10;    }&#10;&#10;    $requirements[&#39;cron&#39;][&#39;description&#39;] .= &#39; &#39; . t(&#39;You can &#60;a href=&#34;:cron&#34;&#62;run cron manually&#60;/a&#62;.&#39;, array(&#39;:cron&#39; =&#62; \Drupal::url(&#39;system.run_cron&#39;)));&#10;&#10;    $requirements[&#39;cron&#39;][&#39;title&#39;] = t(&#39;Cron maintenance tasks&#39;);&#10;  }&#10;&#10;  return $requirements;&#10;  $END$&#10;}" description="hook_requirements" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_ajax_render_alter" value="/**&#10; * Implements hook_ajax_render_alter().&#10; *&#10; * Alter the Ajax command data that is sent to the client.&#10; *&#10; * @param \Drupal\Core\Ajax\CommandInterface[] $data&#10; *   An array of all the rendered commands that will be sent to the client.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ajax_render_alter(array &amp;$data) {&#10;  // Inject any new status messages into the content area.&#10;  $status_messages = array(&#39;#type&#39; =&#62; &#39;status_messages&#39;);&#10;  $command = new \Drupal\Core\Ajax\PrependCommand(&#39;#block-system-main .content&#39;, \Drupal::service(&#39;renderer&#39;)-&#62;renderRoot($status_messages));&#10;  $data[] = $command-&#62;render();&#10;  $END$&#10;}" description="hook_ajax_render_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_ajax_render_alter" value="/**&#10; * Implements hook_ajax_render_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_ajax_render_alter(array &amp;$data) {&#10;  // Inject any new status messages into the content area.&#10;  $status_messages = array(&#39;#type&#39; =&#62; &#39;status_messages&#39;);&#10;  $command = new \Drupal\Core\Ajax\PrependCommand(&#39;#block-system-main .content&#39;, \Drupal::service(&#39;renderer&#39;)-&#62;renderRoot($status_messages));&#10;  $data[] = $command-&#62;render();&#10;  $END$&#10;}" description="hook_ajax_render_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_form_alter" value="/**&#10; * Implements hook_form_alter().&#10; *&#10; * Perform alterations before a form is rendered.&#10; *&#10; * One popular use of this hook is to add form elements to the node form. When&#10; * altering a node form, the node entity can be retrieved by invoking&#10; * $form_state-&#62;getFormObject()-&#62;getEntity().&#10; *&#10; * Implementations are responsible for adding cache contexts/tags/max-age as&#10; * needed. See https://www.drupal.org/developing/api/8/cache.&#10; *&#10; * In addition to hook_form_alter(), which is called for all forms, there are&#10; * two more specific form hooks available. The first,&#10; * hook_form_BASE_FORM_ID_alter(), allows targeting of a form/forms via a base&#10; * form (if one exists). The second, hook_form_FORM_ID_alter(), can be used to&#10; * target a specific form directly.&#10; *&#10; * The call order is as follows: all existing form alter functions are called&#10; * for module A, then all for module B, etc., followed by all for any base&#10; * theme(s), and finally for the theme itself. The module order is determined&#10; * by system weight, then by module name.&#10; *&#10; * Within each module, form alter hooks are called in the following order:&#10; * first, hook_form_alter(); second, hook_form_BASE_FORM_ID_alter(); third,&#10; * hook_form_FORM_ID_alter(). So, for each module, the more general hooks are&#10; * called first followed by the more specific.&#10; *&#10; * @param $form&#10; *   Nested array of form elements that comprise the form.&#10; * @param $form_state&#10; *   The current state of the form. The arguments that&#10; *   \Drupal::formBuilder()-&#62;getForm() was originally called with are available&#10; *   in the array $form_state-&#62;getBuildInfo()[&#39;args&#39;].&#10; * @param $form_id&#10; *   String representing the name of the form itself. Typically this is the&#10; *   name of the function that generated the form.&#10; *&#10; * @see hook_form_BASE_FORM_ID_alter()&#10; * @see hook_form_FORM_ID_alter()&#10; *&#10; * @ingroup form_api&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_form_alter(&amp;$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {&#10;  if (isset($form[&#39;type&#39;]) &amp;&amp; $form[&#39;type&#39;][&#39;#value&#39;] . &#39;_node_settings&#39; == $form_id) {&#10;    $upload_enabled_types = \Drupal::config(&#39;mymodule.settings&#39;)-&#62;get(&#39;upload_enabled_types&#39;);&#10;    $form[&#39;workflow&#39;][&#39;upload_&#39; . $form[&#39;type&#39;][&#39;#value&#39;]] = array(&#10;      &#39;#type&#39; =&#62; &#39;radios&#39;,&#10;      &#39;#title&#39; =&#62; t(&#39;Attachments&#39;),&#10;      &#39;#default_value&#39; =&#62; in_array($form[&#39;type&#39;][&#39;#value&#39;], $upload_enabled_types) ? 1 : 0,&#10;      &#39;#options&#39; =&#62; array(t(&#39;Disabled&#39;), t(&#39;Enabled&#39;)),&#10;    );&#10;    // Add a custom submit handler to save the array of types back to the config file.&#10;    $form[&#39;actions&#39;][&#39;submit&#39;][&#39;#submit&#39;][] = &#39;mymodule_upload_enabled_types_submit&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_form_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_form_alter" value="/**&#10; * Implements hook_form_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_form_alter(&amp;$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {&#10;  if (isset($form[&#39;type&#39;]) &amp;&amp; $form[&#39;type&#39;][&#39;#value&#39;] . &#39;_node_settings&#39; == $form_id) {&#10;    $upload_enabled_types = \Drupal::config(&#39;mymodule.settings&#39;)-&#62;get(&#39;upload_enabled_types&#39;);&#10;    $form[&#39;workflow&#39;][&#39;upload_&#39; . $form[&#39;type&#39;][&#39;#value&#39;]] = array(&#10;      &#39;#type&#39; =&#62; &#39;radios&#39;,&#10;      &#39;#title&#39; =&#62; t(&#39;Attachments&#39;),&#10;      &#39;#default_value&#39; =&#62; in_array($form[&#39;type&#39;][&#39;#value&#39;], $upload_enabled_types) ? 1 : 0,&#10;      &#39;#options&#39; =&#62; array(t(&#39;Disabled&#39;), t(&#39;Enabled&#39;)),&#10;    );&#10;    // Add a custom submit handler to save the array of types back to the config file.&#10;    $form[&#39;actions&#39;][&#39;submit&#39;][&#39;#submit&#39;][] = &#39;mymodule_upload_enabled_types_submit&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_form_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_form_FORM_ID_alter" value="/**&#10; * Implements hook_form_FORM_ID_alter().&#10; *&#10; * Provide a form-specific alteration instead of the global hook_form_alter().&#10; *&#10; * Implementations are responsible for adding cache contexts/tags/max-age as&#10; * needed. See https://www.drupal.org/developing/api/8/cache.&#10; *&#10; * Modules can implement hook_form_FORM_ID_alter() to modify a specific form,&#10; * rather than implementing hook_form_alter() and checking the form ID, or&#10; * using long switch statements to alter multiple forms.&#10; *&#10; * Form alter hooks are called in the following order: hook_form_alter(),&#10; * hook_form_BASE_FORM_ID_alter(), hook_form_FORM_ID_alter(). See&#10; * hook_form_alter() for more details.&#10; *&#10; * @param $form&#10; *   Nested array of form elements that comprise the form.&#10; * @param $form_state&#10; *   The current state of the form. The arguments that&#10; *   \Drupal::formBuilder()-&#62;getForm() was originally called with are available&#10; *   in the array $form_state-&#62;getBuildInfo()[&#39;args&#39;].&#10; * @param $form_id&#10; *   String representing the name of the form itself. Typically this is the&#10; *   name of the function that generated the form.&#10; *&#10; * @see hook_form_alter()&#10; * @see hook_form_BASE_FORM_ID_alter()&#10; * @see \Drupal\Core\Form\FormBuilderInterface::prepareForm()&#10; *&#10; * @ingroup form_api&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_form_FORM_ID_alter(&amp;$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {&#10;  // Modification for the form with the given form ID goes here. For example, if&#10;  // FORM_ID is &#34;user_register_form&#34; this code would run only on the user&#10;  // registration form.&#10;&#10;  // Add a checkbox to registration form about agreeing to terms of use.&#10;  $form[&#39;terms_of_use&#39;] = array(&#10;    &#39;#type&#39; =&#62; &#39;checkbox&#39;,&#10;    &#39;#title&#39; =&#62; t(&#34;I agree with the website&#39;s terms and conditions.&#34;),&#10;    &#39;#required&#39; =&#62; TRUE,&#10;  );&#10;  $END$&#10;}" description="hook_form_FORM_ID_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_form_FORM_ID_alter" value="/**&#10; * Implements hook_form_FORM_ID_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_form_FORM_ID_alter(&amp;$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {&#10;  // Modification for the form with the given form ID goes here. For example, if&#10;  // FORM_ID is &#34;user_register_form&#34; this code would run only on the user&#10;  // registration form.&#10;&#10;  // Add a checkbox to registration form about agreeing to terms of use.&#10;  $form[&#39;terms_of_use&#39;] = array(&#10;    &#39;#type&#39; =&#62; &#39;checkbox&#39;,&#10;    &#39;#title&#39; =&#62; t(&#34;I agree with the website&#39;s terms and conditions.&#34;),&#10;    &#39;#required&#39; =&#62; TRUE,&#10;  );&#10;  $END$&#10;}" description="hook_form_FORM_ID_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_form_BASE_FORM_ID_alter" value="/**&#10; * Implements hook_form_BASE_FORM_ID_alter().&#10; *&#10; * Provide a form-specific alteration for shared (&#39;base&#39;) forms.&#10; *&#10; * Implementations are responsible for adding cache contexts/tags/max-age as&#10; * needed. See https://www.drupal.org/developing/api/8/cache.&#10; *&#10; * By default, when \Drupal::formBuilder()-&#62;getForm() is called, Drupal looks&#10; * for a function with the same name as the form ID, and uses that function to&#10; * build the form. In contrast, base forms allow multiple form IDs to be mapped&#10; * to a single base (also called &#39;factory&#39;) form function.&#10; *&#10; * Modules can implement hook_form_BASE_FORM_ID_alter() to modify a specific&#10; * base form, rather than implementing hook_form_alter() and checking for&#10; * conditions that would identify the shared form constructor.&#10; *&#10; * To identify the base form ID for a particular form (or to determine whether&#10; * one exists) check the $form_state. The base form ID is stored under&#10; * $form_state-&#62;getBuildInfo()[&#39;base_form_id&#39;].&#10; *&#10; * Form alter hooks are called in the following order: hook_form_alter(),&#10; * hook_form_BASE_FORM_ID_alter(), hook_form_FORM_ID_alter(). See&#10; * hook_form_alter() for more details.&#10; *&#10; * @param $form&#10; *   Nested array of form elements that comprise the form.&#10; * @param $form_state&#10; *   The current state of the form.&#10; * @param $form_id&#10; *   String representing the name of the form itself. Typically this is the&#10; *   name of the function that generated the form.&#10; *&#10; * @see hook_form_alter()&#10; * @see hook_form_FORM_ID_alter()&#10; * @see \Drupal\Core\Form\FormBuilderInterface::prepareForm()&#10; *&#10; * @ingroup form_api&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_form_BASE_FORM_ID_alter(&amp;$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {&#10;  // Modification for the form with the given BASE_FORM_ID goes here. For&#10;  // example, if BASE_FORM_ID is &#34;node_form&#34;, this code would run on every&#10;  // node form, regardless of node type.&#10;&#10;  // Add a checkbox to the node form about agreeing to terms of use.&#10;  $form[&#39;terms_of_use&#39;] = array(&#10;    &#39;#type&#39; =&#62; &#39;checkbox&#39;,&#10;    &#39;#title&#39; =&#62; t(&#34;I agree with the website&#39;s terms and conditions.&#34;),&#10;    &#39;#required&#39; =&#62; TRUE,&#10;  );&#10;  $END$&#10;}" description="hook_form_BASE_FORM_ID_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_form_BASE_FORM_ID_alter" value="/**&#10; * Implements hook_form_BASE_FORM_ID_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_form_BASE_FORM_ID_alter(&amp;$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {&#10;  // Modification for the form with the given BASE_FORM_ID goes here. For&#10;  // example, if BASE_FORM_ID is &#34;node_form&#34;, this code would run on every&#10;  // node form, regardless of node type.&#10;&#10;  // Add a checkbox to the node form about agreeing to terms of use.&#10;  $form[&#39;terms_of_use&#39;] = array(&#10;    &#39;#type&#39; =&#62; &#39;checkbox&#39;,&#10;    &#39;#title&#39; =&#62; t(&#34;I agree with the website&#39;s terms and conditions.&#34;),&#10;    &#39;#required&#39; =&#62; TRUE,&#10;  );&#10;  $END$&#10;}" description="hook_form_BASE_FORM_ID_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_batch_alter" value="/**&#10; * Implements hook_batch_alter().&#10; *&#10; * Alter batch information before a batch is processed.&#10; *&#10; * Called by batch_process() to allow modules to alter a batch before it is&#10; * processed.&#10; *&#10; * @param $batch&#10; *   The associative array of batch information. See batch_set() for details on&#10; *   what this could contain.&#10; *&#10; * @see batch_set()&#10; * @see batch_process()&#10; *&#10; * @ingroup batch&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_batch_alter(&amp;$batch) {&#10;  $END$&#10;}" description="hook_batch_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_batch_alter" value="/**&#10; * Implements hook_batch_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_batch_alter(&amp;$batch) {&#10;  $END$&#10;}" description="hook_batch_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_tokens" value="/**&#10; * Implements hook_tokens().&#10; *&#10; * Provide replacement values for placeholder tokens.&#10; *&#10; * This hook is invoked when someone calls&#10; * \Drupal\Core\Utility\Token::replace(). That function first scans the text for&#10; * [type:token] patterns, and splits the needed tokens into groups by type.&#10; * Then hook_tokens() is invoked on each token-type group, allowing your module&#10; * to respond by providing replacement text for any of the tokens in the group&#10; * that your module knows how to process.&#10; *&#10; * A module implementing this hook should also implement hook_token_info() in&#10; * order to list its available tokens on editing screens.&#10; *&#10; * @param $type&#10; *   The machine-readable name of the type (group) of token being replaced, such&#10; *   as &#39;node&#39;, &#39;user&#39;, or another type defined by a hook_token_info()&#10; *   implementation.&#10; * @param $tokens&#10; *   An array of tokens to be replaced. The keys are the machine-readable token&#10; *   names, and the values are the raw [type:token] strings that appeared in the&#10; *   original text.&#10; * @param array $data&#10; *   An associative array of data objects to be used when generating replacement&#10; *   values, as supplied in the $data parameter to&#10; *   \Drupal\Core\Utility\Token::replace().&#10; * @param array $options&#10; *   An associative array of options for token replacement; see&#10; *   \Drupal\Core\Utility\Token::replace() for possible values.&#10; * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata&#10; *   The bubbleable metadata. Prior to invoking this hook,&#10; *   \Drupal\Core\Utility\Token::generate() collects metadata for all of the&#10; *   data objects in $data. For any data sources not in $data, but that are&#10; *   used by the token replacement logic, such as global configuration (e.g.,&#10; *   &#39;system.site&#39;) and related objects (e.g., $node-&#62;getOwner()),&#10; *   implementations of this hook must add the corresponding metadata.&#10; *   For example:&#10; *   @code&#10; *     $bubbleable_metadata-&#62;addCacheableDependency(\Drupal::config(&#39;system.site&#39;));&#10; *     $bubbleable_metadata-&#62;addCacheableDependency($node-&#62;getOwner());&#10; *   @endcode&#10; *&#10; *   Additionally, implementations of this hook, must forward&#10; *   $bubbleable_metadata to the chained tokens that they invoke.&#10; *   For example:&#10; *   @code&#10; *     if ($created_tokens = $token_service-&#62;findWithPrefix($tokens, &#39;created&#39;)) {&#10; *       $replacements = $token_service-&#62;generate(&#39;date&#39;, $created_tokens, array(&#39;date&#39; =&#62; $node-&#62;getCreatedTime()), $options, $bubbleable_metadata);&#10; *     }&#10; *   @endcode&#10; *&#10; * @return array&#10; *   An associative array of replacement values, keyed by the raw [type:token]&#10; *   strings from the original text. The returned values must be either plain&#10; *   text strings, or an object implementing MarkupInterface if they are&#10; *   HTML-formatted.&#10; *&#10; * @see hook_token_info()&#10; * @see hook_tokens_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {&#10;  $token_service = \Drupal::token();&#10;&#10;  $url_options = array(&#39;absolute&#39; =&#62; TRUE);&#10;  if (isset($options[&#39;langcode&#39;])) {&#10;    $url_options[&#39;language&#39;] = \Drupal::languageManager()-&#62;getLanguage($options[&#39;langcode&#39;]);&#10;    $langcode = $options[&#39;langcode&#39;];&#10;  }&#10;  else {&#10;    $langcode = NULL;&#10;  }&#10;  $replacements = array();&#10;&#10;  if ($type == &#39;node&#39; &amp;&amp; !empty($data[&#39;node&#39;])) {&#10;    /** @var \Drupal\node\NodeInterface $node */&#10;    $node = $data[&#39;node&#39;];&#10;&#10;    foreach ($tokens as $name =&#62; $original) {&#10;      switch ($name) {&#10;        // Simple key values on the node.&#10;        case &#39;nid&#39;:&#10;          $replacements[$original] = $node-&#62;nid;&#10;          break;&#10;&#10;        case &#39;title&#39;:&#10;          $replacements[$original] = $node-&#62;getTitle();&#10;          break;&#10;&#10;        case &#39;edit-url&#39;:&#10;          $replacements[$original] = $node-&#62;url(&#39;edit-form&#39;, $url_options);&#10;          break;&#10;&#10;        // Default values for the chained tokens handled below.&#10;        case &#39;author&#39;:&#10;          $account = $node-&#62;getOwner() ? $node-&#62;getOwner() : User::load(0);&#10;          $replacements[$original] = $account-&#62;label();&#10;          $bubbleable_metadata-&#62;addCacheableDependency($account);&#10;          break;&#10;&#10;        case &#39;created&#39;:&#10;          $replacements[$original] = format_date($node-&#62;getCreatedTime(), &#39;medium&#39;, &#39;&#39;, NULL, $langcode);&#10;          break;&#10;      }&#10;    }&#10;&#10;    if ($author_tokens = $token_service-&#62;findWithPrefix($tokens, &#39;author&#39;)) {&#10;      $replacements = $token_service-&#62;generate(&#39;user&#39;, $author_tokens, array(&#39;user&#39; =&#62; $node-&#62;getOwner()), $options, $bubbleable_metadata);&#10;    }&#10;&#10;    if ($created_tokens = $token_service-&#62;findWithPrefix($tokens, &#39;created&#39;)) {&#10;      $replacements = $token_service-&#62;generate(&#39;date&#39;, $created_tokens, array(&#39;date&#39; =&#62; $node-&#62;getCreatedTime()), $options, $bubbleable_metadata);&#10;    }&#10;  }&#10;&#10;  return $replacements;&#10;  $END$&#10;}" description="hook_tokens" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_tokens" value="/**&#10; * Implements hook_tokens().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {&#10;  $token_service = \Drupal::token();&#10;&#10;  $url_options = array(&#39;absolute&#39; =&#62; TRUE);&#10;  if (isset($options[&#39;langcode&#39;])) {&#10;    $url_options[&#39;language&#39;] = \Drupal::languageManager()-&#62;getLanguage($options[&#39;langcode&#39;]);&#10;    $langcode = $options[&#39;langcode&#39;];&#10;  }&#10;  else {&#10;    $langcode = NULL;&#10;  }&#10;  $replacements = array();&#10;&#10;  if ($type == &#39;node&#39; &amp;&amp; !empty($data[&#39;node&#39;])) {&#10;    /** @var \Drupal\node\NodeInterface $node */&#10;    $node = $data[&#39;node&#39;];&#10;&#10;    foreach ($tokens as $name =&#62; $original) {&#10;      switch ($name) {&#10;        // Simple key values on the node.&#10;        case &#39;nid&#39;:&#10;          $replacements[$original] = $node-&#62;nid;&#10;          break;&#10;&#10;        case &#39;title&#39;:&#10;          $replacements[$original] = $node-&#62;getTitle();&#10;          break;&#10;&#10;        case &#39;edit-url&#39;:&#10;          $replacements[$original] = $node-&#62;url(&#39;edit-form&#39;, $url_options);&#10;          break;&#10;&#10;        // Default values for the chained tokens handled below.&#10;        case &#39;author&#39;:&#10;          $account = $node-&#62;getOwner() ? $node-&#62;getOwner() : User::load(0);&#10;          $replacements[$original] = $account-&#62;label();&#10;          $bubbleable_metadata-&#62;addCacheableDependency($account);&#10;          break;&#10;&#10;        case &#39;created&#39;:&#10;          $replacements[$original] = format_date($node-&#62;getCreatedTime(), &#39;medium&#39;, &#39;&#39;, NULL, $langcode);&#10;          break;&#10;      }&#10;    }&#10;&#10;    if ($author_tokens = $token_service-&#62;findWithPrefix($tokens, &#39;author&#39;)) {&#10;      $replacements = $token_service-&#62;generate(&#39;user&#39;, $author_tokens, array(&#39;user&#39; =&#62; $node-&#62;getOwner()), $options, $bubbleable_metadata);&#10;    }&#10;&#10;    if ($created_tokens = $token_service-&#62;findWithPrefix($tokens, &#39;created&#39;)) {&#10;      $replacements = $token_service-&#62;generate(&#39;date&#39;, $created_tokens, array(&#39;date&#39; =&#62; $node-&#62;getCreatedTime()), $options, $bubbleable_metadata);&#10;    }&#10;  }&#10;&#10;  return $replacements;&#10;  $END$&#10;}" description="hook_tokens" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_tokens_alter" value="/**&#10; * Implements hook_tokens_alter().&#10; *&#10; * Alter replacement values for placeholder tokens.&#10; *&#10; * @param $replacements&#10; *   An associative array of replacements returned by hook_tokens().&#10; * @param $context&#10; *   The context in which hook_tokens() was called. An associative array with&#10; *   the following keys, which have the same meaning as the corresponding&#10; *   parameters of hook_tokens():&#10; *   - &#39;type&#39;&#10; *   - &#39;tokens&#39;&#10; *   - &#39;data&#39;&#10; *   - &#39;options&#39;&#10; * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata&#10; *   The bubbleable metadata. In case you alter an existing token based upon&#10; *   a data source that isn&#39;t in $context[&#39;data&#39;], you must add that&#10; *   dependency to $bubbleable_metadata.&#10; *&#10; * @see hook_tokens()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_tokens_alter(array &amp;$replacements, array $context, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {&#10;  $options = $context[&#39;options&#39;];&#10;&#10;  if (isset($options[&#39;langcode&#39;])) {&#10;    $url_options[&#39;language&#39;] = \Drupal::languageManager()-&#62;getLanguage($options[&#39;langcode&#39;]);&#10;    $langcode = $options[&#39;langcode&#39;];&#10;  }&#10;  else {&#10;    $langcode = NULL;&#10;  }&#10;&#10;  if ($context[&#39;type&#39;] == &#39;node&#39; &amp;&amp; !empty($context[&#39;data&#39;][&#39;node&#39;])) {&#10;    $node = $context[&#39;data&#39;][&#39;node&#39;];&#10;&#10;    // Alter the [node:title] token, and replace it with the rendered content&#10;    // of a field (field_title).&#10;    if (isset($context[&#39;tokens&#39;][&#39;title&#39;])) {&#10;      $title = $node-&#62;field_title-&#62;view(&#39;default&#39;);&#10;      $replacements[$context[&#39;tokens&#39;][&#39;title&#39;]] = drupal_render($title);&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_tokens_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_tokens_alter" value="/**&#10; * Implements hook_tokens_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_tokens_alter(array &amp;$replacements, array $context, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {&#10;  $options = $context[&#39;options&#39;];&#10;&#10;  if (isset($options[&#39;langcode&#39;])) {&#10;    $url_options[&#39;language&#39;] = \Drupal::languageManager()-&#62;getLanguage($options[&#39;langcode&#39;]);&#10;    $langcode = $options[&#39;langcode&#39;];&#10;  }&#10;  else {&#10;    $langcode = NULL;&#10;  }&#10;&#10;  if ($context[&#39;type&#39;] == &#39;node&#39; &amp;&amp; !empty($context[&#39;data&#39;][&#39;node&#39;])) {&#10;    $node = $context[&#39;data&#39;][&#39;node&#39;];&#10;&#10;    // Alter the [node:title] token, and replace it with the rendered content&#10;    // of a field (field_title).&#10;    if (isset($context[&#39;tokens&#39;][&#39;title&#39;])) {&#10;      $title = $node-&#62;field_title-&#62;view(&#39;default&#39;);&#10;      $replacements[$context[&#39;tokens&#39;][&#39;title&#39;]] = drupal_render($title);&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_tokens_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_token_info" value="/**&#10; * Implements hook_token_info().&#10; *&#10; * Provide information about available placeholder tokens and token types.&#10; *&#10; * Tokens are placeholders that can be put into text by using the syntax&#10; * [type:token], where type is the machine-readable name of a token type, and&#10; * token is the machine-readable name of a token within this group. This hook&#10; * provides a list of types and tokens to be displayed on text editing screens,&#10; * so that people editing text can see what their token options are.&#10; *&#10; * The actual token replacement is done by&#10; * \Drupal\Core\Utility\Token::replace(), which invokes hook_tokens(). Your&#10; * module will need to implement that hook in order to generate token&#10; * replacements from the tokens defined here.&#10; *&#10; * @return&#10; *   An associative array of available tokens and token types. The outer array&#10; *   has two components:&#10; *   - types: An associative array of token types (groups). Each token type is&#10; *     an associative array with the following components:&#10; *     - name: The translated human-readable short name of the token type.&#10; *     - description (optional): A translated longer description of the token&#10; *       type.&#10; *     - needs-data: The type of data that must be provided to&#10; *       \Drupal\Core\Utility\Token::replace() in the $data argument (i.e., the&#10; *       key name in $data) in order for tokens of this type to be used in the&#10; *       $text being processed. For instance, if the token needs a node object,&#10; *       &#39;needs-data&#39; should be &#39;node&#39;, and to use this token in&#10; *       \Drupal\Core\Utility\Token::replace(), the caller needs to supply a&#10; *       node object as $data[&#39;node&#39;]. Some token data can also be supplied&#10; *       indirectly; for instance, a node object in $data supplies a user object&#10; *       (the author of the node), allowing user tokens to be used when only&#10; *       a node data object is supplied.&#10; *   - tokens: An associative array of tokens. The outer array is keyed by the&#10; *     group name (the same key as in the types array). Within each group of&#10; *     tokens, each token item is keyed by the machine name of the token, and&#10; *     each token item has the following components:&#10; *     - name: The translated human-readable short name of the token.&#10; *     - description (optional): A translated longer description of the token.&#10; *     - type (optional): A &#39;needs-data&#39; data type supplied by this token, which&#10; *       should match a &#39;needs-data&#39; value from another token type. For example,&#10; *       the node author token provides a user object, which can then be used&#10; *       for token replacement data in \Drupal\Core\Utility\Token::replace()&#10; *       without having to supply a separate user object.&#10; *&#10; * @see hook_token_info_alter()&#10; * @see hook_tokens()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_token_info() {&#10;  $type = array(&#10;    &#39;name&#39; =&#62; t(&#39;Nodes&#39;),&#10;    &#39;description&#39; =&#62; t(&#39;Tokens related to individual nodes.&#39;),&#10;    &#39;needs-data&#39; =&#62; &#39;node&#39;,&#10;  );&#10;&#10;  // Core tokens for nodes.&#10;  $node[&#39;nid&#39;] = array(&#10;    &#39;name&#39; =&#62; t(&#34;Node ID&#34;),&#10;    &#39;description&#39; =&#62; t(&#34;The unique ID of the node.&#34;),&#10;  );&#10;  $node[&#39;title&#39;] = array(&#10;    &#39;name&#39; =&#62; t(&#34;Title&#34;),&#10;  );&#10;  $node[&#39;edit-url&#39;] = array(&#10;    &#39;name&#39; =&#62; t(&#34;Edit URL&#34;),&#10;    &#39;description&#39; =&#62; t(&#34;The URL of the node&#39;s edit page.&#34;),&#10;  );&#10;&#10;  // Chained tokens for nodes.&#10;  $node[&#39;created&#39;] = array(&#10;    &#39;name&#39; =&#62; t(&#34;Date created&#34;),&#10;    &#39;type&#39; =&#62; &#39;date&#39;,&#10;  );&#10;  $node[&#39;author&#39;] = array(&#10;    &#39;name&#39; =&#62; t(&#34;Author&#34;),&#10;    &#39;type&#39; =&#62; &#39;user&#39;,&#10;  );&#10;&#10;  return array(&#10;    &#39;types&#39; =&#62; array(&#39;node&#39; =&#62; $type),&#10;    &#39;tokens&#39; =&#62; array(&#39;node&#39; =&#62; $node),&#10;  );&#10;  $END$&#10;}" description="hook_token_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_token_info" value="/**&#10; * Implements hook_token_info().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_token_info() {&#10;  $type = array(&#10;    &#39;name&#39; =&#62; t(&#39;Nodes&#39;),&#10;    &#39;description&#39; =&#62; t(&#39;Tokens related to individual nodes.&#39;),&#10;    &#39;needs-data&#39; =&#62; &#39;node&#39;,&#10;  );&#10;&#10;  // Core tokens for nodes.&#10;  $node[&#39;nid&#39;] = array(&#10;    &#39;name&#39; =&#62; t(&#34;Node ID&#34;),&#10;    &#39;description&#39; =&#62; t(&#34;The unique ID of the node.&#34;),&#10;  );&#10;  $node[&#39;title&#39;] = array(&#10;    &#39;name&#39; =&#62; t(&#34;Title&#34;),&#10;  );&#10;  $node[&#39;edit-url&#39;] = array(&#10;    &#39;name&#39; =&#62; t(&#34;Edit URL&#34;),&#10;    &#39;description&#39; =&#62; t(&#34;The URL of the node&#39;s edit page.&#34;),&#10;  );&#10;&#10;  // Chained tokens for nodes.&#10;  $node[&#39;created&#39;] = array(&#10;    &#39;name&#39; =&#62; t(&#34;Date created&#34;),&#10;    &#39;type&#39; =&#62; &#39;date&#39;,&#10;  );&#10;  $node[&#39;author&#39;] = array(&#10;    &#39;name&#39; =&#62; t(&#34;Author&#34;),&#10;    &#39;type&#39; =&#62; &#39;user&#39;,&#10;  );&#10;&#10;  return array(&#10;    &#39;types&#39; =&#62; array(&#39;node&#39; =&#62; $type),&#10;    &#39;tokens&#39; =&#62; array(&#39;node&#39; =&#62; $node),&#10;  );&#10;  $END$&#10;}" description="hook_token_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_token_info_alter" value="/**&#10; * Implements hook_token_info_alter().&#10; *&#10; * Alter the metadata about available placeholder tokens and token types.&#10; *&#10; * @param $data&#10; *   The associative array of token definitions from hook_token_info().&#10; *&#10; * @see hook_token_info()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_token_info_alter(&amp;$data) {&#10;  // Modify description of node tokens for our site.&#10;  $data[&#39;tokens&#39;][&#39;node&#39;][&#39;nid&#39;] = array(&#10;    &#39;name&#39; =&#62; t(&#34;Node ID&#34;),&#10;    &#39;description&#39; =&#62; t(&#34;The unique ID of the article.&#34;),&#10;  );&#10;  $data[&#39;tokens&#39;][&#39;node&#39;][&#39;title&#39;] = array(&#10;    &#39;name&#39; =&#62; t(&#34;Title&#34;),&#10;    &#39;description&#39; =&#62; t(&#34;The title of the article.&#34;),&#10;  );&#10;&#10;  // Chained tokens for nodes.&#10;  $data[&#39;tokens&#39;][&#39;node&#39;][&#39;created&#39;] = array(&#10;    &#39;name&#39; =&#62; t(&#34;Date created&#34;),&#10;    &#39;description&#39; =&#62; t(&#34;The date the article was posted.&#34;),&#10;    &#39;type&#39; =&#62; &#39;date&#39;,&#10;  );&#10;  $END$&#10;}" description="hook_token_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_token_info_alter" value="/**&#10; * Implements hook_token_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_token_info_alter(&amp;$data) {&#10;  // Modify description of node tokens for our site.&#10;  $data[&#39;tokens&#39;][&#39;node&#39;][&#39;nid&#39;] = array(&#10;    &#39;name&#39; =&#62; t(&#34;Node ID&#34;),&#10;    &#39;description&#39; =&#62; t(&#34;The unique ID of the article.&#34;),&#10;  );&#10;  $data[&#39;tokens&#39;][&#39;node&#39;][&#39;title&#39;] = array(&#10;    &#39;name&#39; =&#62; t(&#34;Title&#34;),&#10;    &#39;description&#39; =&#62; t(&#34;The title of the article.&#34;),&#10;  );&#10;&#10;  // Chained tokens for nodes.&#10;  $data[&#39;tokens&#39;][&#39;node&#39;][&#39;created&#39;] = array(&#10;    &#39;name&#39; =&#62; t(&#34;Date created&#34;),&#10;    &#39;description&#39; =&#62; t(&#34;The date the article was posted.&#34;),&#10;    &#39;type&#39; =&#62; &#39;date&#39;,&#10;  );&#10;  $END$&#10;}" description="hook_token_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_form_system_theme_settings_alter" value="/**&#10; * Implements hook_form_system_theme_settings_alter().&#10; *&#10; * Allow themes to alter the theme-specific settings form.&#10; *&#10; * With this hook, themes can alter the theme-specific settings form in any way&#10; * allowable by Drupal&#39;s Form API, such as adding form elements, changing&#10; * default values and removing form elements. See the Form API documentation on&#10; * api.drupal.org for detailed information.&#10; *&#10; * Note that the base theme&#39;s form alterations will be run before any sub-theme&#10; * alterations.&#10; *&#10; * @param $form&#10; *   Nested array of form elements that comprise the form.&#10; * @param $form_state&#10; *   The current state of the form.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_form_system_theme_settings_alter(&amp;$form, \Drupal\Core\Form\FormStateInterface $form_state) {&#10;  // Add a checkbox to toggle the breadcrumb trail.&#10;  $form[&#39;toggle_breadcrumb&#39;] = array(&#10;    &#39;#type&#39; =&#62; &#39;checkbox&#39;,&#10;    &#39;#title&#39; =&#62; t(&#39;Display the breadcrumb&#39;),&#10;    &#39;#default_value&#39; =&#62; theme_get_setting(&#39;features.breadcrumb&#39;),&#10;    &#39;#description&#39;   =&#62; t(&#39;Show a trail of links from the homepage to the current page.&#39;),&#10;  );&#10;  $END$&#10;}" description="hook_form_system_theme_settings_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_form_system_theme_settings_alter" value="/**&#10; * Implements hook_form_system_theme_settings_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_form_system_theme_settings_alter(&amp;$form, \Drupal\Core\Form\FormStateInterface $form_state) {&#10;  // Add a checkbox to toggle the breadcrumb trail.&#10;  $form[&#39;toggle_breadcrumb&#39;] = array(&#10;    &#39;#type&#39; =&#62; &#39;checkbox&#39;,&#10;    &#39;#title&#39; =&#62; t(&#39;Display the breadcrumb&#39;),&#10;    &#39;#default_value&#39; =&#62; theme_get_setting(&#39;features.breadcrumb&#39;),&#10;    &#39;#description&#39;   =&#62; t(&#39;Show a trail of links from the homepage to the current page.&#39;),&#10;  );&#10;  $END$&#10;}" description="hook_form_system_theme_settings_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_preprocess" value="/**&#10; * Implements hook_preprocess().&#10; *&#10; * Preprocess theme variables for templates.&#10; *&#10; * This hook allows modules to preprocess theme variables for theme templates.&#10; * It is called for all theme hooks implemented as templates, but not for theme&#10; * hooks implemented as functions. hook_preprocess_HOOK() can be used to&#10; * preprocess variables for a specific theme hook, whether implemented as a&#10; * template or function.&#10; *&#10; * For more detailed information, see the&#10; * @link themeable Theme system overview topic @endlink.&#10; *&#10; * @param $variables&#10; *   The variables array (modify in place).&#10; * @param $hook&#10; *   The name of the theme hook.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_preprocess(&amp;$variables, $hook) {&#10;  static $hooks;&#10;&#10;  // Add contextual links to the variables, if the user has permission.&#10;&#10;  if (!\Drupal::currentUser()-&#62;hasPermission(&#39;access contextual links&#39;)) {&#10;    return;&#10;  }&#10;&#10;  if (!isset($hooks)) {&#10;    $hooks = theme_get_registry();&#10;  }&#10;&#10;  // Determine the primary theme function argument.&#10;  if (isset($hooks[$hook][&#39;variables&#39;])) {&#10;    $keys = array_keys($hooks[$hook][&#39;variables&#39;]);&#10;    $key = $keys[0];&#10;  }&#10;  else {&#10;    $key = $hooks[$hook][&#39;render element&#39;];&#10;  }&#10;&#10;  if (isset($variables[$key])) {&#10;    $element = $variables[$key];&#10;  }&#10;&#10;  if (isset($element) &amp;&amp; is_array($element) &amp;&amp; !empty($element[&#39;#contextual_links&#39;])) {&#10;    $variables[&#39;title_suffix&#39;][&#39;contextual_links&#39;] = contextual_links_view($element);&#10;    if (!empty($variables[&#39;title_suffix&#39;][&#39;contextual_links&#39;])) {&#10;      $variables[&#39;attributes&#39;][&#39;class&#39;][] = &#39;contextual-links-region&#39;;&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_preprocess" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_preprocess" value="/**&#10; * Implements hook_preprocess().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_preprocess(&amp;$variables, $hook) {&#10;  static $hooks;&#10;&#10;  // Add contextual links to the variables, if the user has permission.&#10;&#10;  if (!\Drupal::currentUser()-&#62;hasPermission(&#39;access contextual links&#39;)) {&#10;    return;&#10;  }&#10;&#10;  if (!isset($hooks)) {&#10;    $hooks = theme_get_registry();&#10;  }&#10;&#10;  // Determine the primary theme function argument.&#10;  if (isset($hooks[$hook][&#39;variables&#39;])) {&#10;    $keys = array_keys($hooks[$hook][&#39;variables&#39;]);&#10;    $key = $keys[0];&#10;  }&#10;  else {&#10;    $key = $hooks[$hook][&#39;render element&#39;];&#10;  }&#10;&#10;  if (isset($variables[$key])) {&#10;    $element = $variables[$key];&#10;  }&#10;&#10;  if (isset($element) &amp;&amp; is_array($element) &amp;&amp; !empty($element[&#39;#contextual_links&#39;])) {&#10;    $variables[&#39;title_suffix&#39;][&#39;contextual_links&#39;] = contextual_links_view($element);&#10;    if (!empty($variables[&#39;title_suffix&#39;][&#39;contextual_links&#39;])) {&#10;      $variables[&#39;attributes&#39;][&#39;class&#39;][] = &#39;contextual-links-region&#39;;&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_preprocess" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_preprocess_HOOK" value="/**&#10; * Implements hook_preprocess_HOOK().&#10; *&#10; * Preprocess theme variables for a specific theme hook.&#10; *&#10; * This hook allows modules to preprocess theme variables for a specific theme&#10; * hook. It should only be used if a module needs to override or add to the&#10; * theme preprocessing for a theme hook it didn&#39;t define.&#10; *&#10; * For more detailed information, see the&#10; * @link themeable Theme system overview topic @endlink.&#10; *&#10; * @param $variables&#10; *   The variables array (modify in place).&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_preprocess_HOOK(&amp;$variables) {&#10;  // This example is from rdf_preprocess_image(). It adds an RDF attribute&#10;  // to the image hook&#39;s variables.&#10;  $variables[&#39;attributes&#39;][&#39;typeof&#39;] = array(&#39;foaf:Image&#39;);&#10;  $END$&#10;}" description="hook_preprocess_HOOK" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_preprocess_HOOK" value="/**&#10; * Implements hook_preprocess_HOOK().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_preprocess_HOOK(&amp;$variables) {&#10;  // This example is from rdf_preprocess_image(). It adds an RDF attribute&#10;  // to the image hook&#39;s variables.&#10;  $variables[&#39;attributes&#39;][&#39;typeof&#39;] = array(&#39;foaf:Image&#39;);&#10;  $END$&#10;}" description="hook_preprocess_HOOK" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_theme_suggestions_HOOK" value="/**&#10; * Implements hook_theme_suggestions_HOOK().&#10; *&#10; * Provides alternate named suggestions for a specific theme hook.&#10; *&#10; * This hook allows modules to provide alternative theme function or template&#10; * name suggestions.&#10; *&#10; * HOOK is the least-specific version of the hook being called. For example, if&#10; * &#39;#theme&#39; =&#62; &#39;node__article&#39; is called, then hook_theme_suggestions_node()&#10; * will be invoked, not hook_theme_suggestions_node__article(). The specific&#10; * hook called (in this case &#39;node__article&#39;) is available in&#10; * $variables[&#39;theme_hook_original&#39;].&#10; *&#10; * @todo Add @code sample.&#10; *&#10; * @param array $variables&#10; *   An array of variables passed to the theme hook. Note that this hook is&#10; *   invoked before any preprocessing.&#10; *&#10; * @return array&#10; *   An array of theme suggestions.&#10; *&#10; * @see hook_theme_suggestions_HOOK_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_theme_suggestions_HOOK(array $variables) {&#10;  $suggestions = array();&#10;&#10;  $suggestions[] = &#39;node__&#39; . $variables[&#39;elements&#39;][&#39;#langcode&#39;];&#10;&#10;  return $suggestions;&#10;  $END$&#10;}" description="hook_theme_suggestions_HOOK" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_theme_suggestions_HOOK" value="/**&#10; * Implements hook_theme_suggestions_HOOK().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_theme_suggestions_HOOK(array $variables) {&#10;  $suggestions = array();&#10;&#10;  $suggestions[] = &#39;node__&#39; . $variables[&#39;elements&#39;][&#39;#langcode&#39;];&#10;&#10;  return $suggestions;&#10;  $END$&#10;}" description="hook_theme_suggestions_HOOK" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_theme_suggestions_alter" value="/**&#10; * Implements hook_theme_suggestions_alter().&#10; *&#10; * Alters named suggestions for all theme hooks.&#10; *&#10; * This hook is invoked for all theme hooks, if you are targeting a specific&#10; * theme hook it&#39;s best to use hook_theme_suggestions_HOOK_alter().&#10; *&#10; * The call order is as follows: all existing suggestion alter functions are&#10; * called for module A, then all for module B, etc., followed by all for any&#10; * base theme(s), and finally for the active theme. The order is&#10; * determined by system weight, then by extension (module or theme) name.&#10; *&#10; * Within each module or theme, suggestion alter hooks are called in the&#10; * following order: first, hook_theme_suggestions_alter(); second,&#10; * hook_theme_suggestions_HOOK_alter(). So, for each module or theme, the more&#10; * general hooks are called first followed by the more specific.&#10; *&#10; * In the following example, we provide an alternative template suggestion to&#10; * node and taxonomy term templates based on the user being logged in.&#10; * @code&#10; * function MYMODULE_theme_suggestions_alter(array &amp;$suggestions, array $variables, $hook) {&#10; *   if (\Drupal::currentUser()-&#62;isAuthenticated() &amp;&amp; in_array($hook, array(&#39;node&#39;, &#39;taxonomy_term&#39;))) {&#10; *     $suggestions[] = $hook . &#39;__&#39; . &#39;logged_in&#39;;&#10; *   }&#10; * }&#10; *&#10; * @endcode&#10; *&#10; * @param array $suggestions&#10; *   An array of alternate, more specific names for template files or theme&#10; *   functions.&#10; * @param array $variables&#10; *   An array of variables passed to the theme hook. Note that this hook is&#10; *   invoked before any variable preprocessing.&#10; * @param string $hook&#10; *   The base hook name. For example, if &#39;#theme&#39; =&#62; &#39;node__article&#39; is called,&#10; *   then $hook will be &#39;node&#39;, not &#39;node__article&#39;. The specific hook called&#10; *   (in this case &#39;node__article&#39;) is available in&#10; *   $variables[&#39;theme_hook_original&#39;].&#10; *&#10; * @return array&#10; *   An array of theme suggestions.&#10; *&#10; * @see hook_theme_suggestions_HOOK_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_theme_suggestions_alter(array &amp;$suggestions, array $variables, $hook) {&#10;  // Add an interface-language specific suggestion to all theme hooks.&#10;  $suggestions[] = $hook . &#39;__&#39; . \Drupal::languageManager()-&#62;getCurrentLanguage()-&#62;getId();&#10;  $END$&#10;}" description="hook_theme_suggestions_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_theme_suggestions_alter" value="/**&#10; * Implements hook_theme_suggestions_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_theme_suggestions_alter(array &amp;$suggestions, array $variables, $hook) {&#10;  // Add an interface-language specific suggestion to all theme hooks.&#10;  $suggestions[] = $hook . &#39;__&#39; . \Drupal::languageManager()-&#62;getCurrentLanguage()-&#62;getId();&#10;  $END$&#10;}" description="hook_theme_suggestions_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_theme_suggestions_HOOK_alter" value="/**&#10; * Implements hook_theme_suggestions_HOOK_alter().&#10; *&#10; * Alters named suggestions for a specific theme hook.&#10; *&#10; * This hook allows any module or theme to provide alternative theme function or&#10; * template name suggestions and reorder or remove suggestions provided by&#10; * hook_theme_suggestions_HOOK() or by earlier invocations of this hook.&#10; *&#10; * HOOK is the least-specific version of the hook being called. For example, if&#10; * &#39;#theme&#39; =&#62; &#39;node__article&#39; is called, then node_theme_suggestions_node()&#10; * will be invoked, not node_theme_suggestions_node__article(). The specific&#10; * hook called (in this case &#39;node__article&#39;) is available in&#10; * $variables[&#39;theme_hook_original&#39;].&#10; *&#10; * @todo Add @code sample.&#10; *&#10; * @param array $suggestions&#10; *   An array of theme suggestions.&#10; * @param array $variables&#10; *   An array of variables passed to the theme hook. Note that this hook is&#10; *   invoked before any preprocessing.&#10; *&#10; * @see hook_theme_suggestions_alter()&#10; * @see hook_theme_suggestions_HOOK()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_theme_suggestions_HOOK_alter(array &amp;$suggestions, array $variables) {&#10;  if (empty($variables[&#39;header&#39;])) {&#10;    $suggestions[] = &#39;hookname__&#39; . &#39;no_header&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_theme_suggestions_HOOK_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_theme_suggestions_HOOK_alter" value="/**&#10; * Implements hook_theme_suggestions_HOOK_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_theme_suggestions_HOOK_alter(array &amp;$suggestions, array $variables) {&#10;  if (empty($variables[&#39;header&#39;])) {&#10;    $suggestions[] = &#39;hookname__&#39; . &#39;no_header&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_theme_suggestions_HOOK_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_themes_installed" value="/**&#10; * Implements hook_themes_installed().&#10; *&#10; * Respond to themes being installed.&#10; *&#10; * @param array $theme_list&#10; *   Array containing the names of the themes being installed.&#10; *&#10; * @see \Drupal\Core\Extension\ThemeHandler::install()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_themes_installed($theme_list) {&#10;  foreach ($theme_list as $theme) {&#10;    block_theme_initialize($theme);&#10;  }&#10;  $END$&#10;}" description="hook_themes_installed" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_themes_installed" value="/**&#10; * Implements hook_themes_installed().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_themes_installed($theme_list) {&#10;  foreach ($theme_list as $theme) {&#10;    block_theme_initialize($theme);&#10;  }&#10;  $END$&#10;}" description="hook_themes_installed" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_themes_uninstalled" value="/**&#10; * Implements hook_themes_uninstalled().&#10; *&#10; * Respond to themes being uninstalled.&#10; *&#10; * @param array $theme_list&#10; *   Array containing the names of the themes being uninstalled.&#10; *&#10; * @see \Drupal\Core\Extension\ThemeHandler::uninstall()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_themes_uninstalled(array $themes) {&#10;  // Remove some state entries depending on the theme.&#10;  foreach ($themes as $theme) {&#10;    \Drupal::state()-&#62;delete(&#39;example.&#39; . $theme);&#10;  }&#10;  $END$&#10;}" description="hook_themes_uninstalled" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_themes_uninstalled" value="/**&#10; * Implements hook_themes_uninstalled().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_themes_uninstalled(array $themes) {&#10;  // Remove some state entries depending on the theme.&#10;  foreach ($themes as $theme) {&#10;    \Drupal::state()-&#62;delete(&#39;example.&#39; . $theme);&#10;  }&#10;  $END$&#10;}" description="hook_themes_uninstalled" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_extension" value="/**&#10; * Implements hook_extension().&#10; *&#10; * Declare a template file extension to be used with a theme engine.&#10; *&#10; * This hook is used in a theme engine implementation in the format of&#10; * ENGINE_extension().&#10; *&#10; * @return string&#10; *   The file extension the theme engine will recognize.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_extension() {&#10;  // Extension for template base names in Twig.&#10;  return &#39;.html.twig&#39;;&#10;  $END$&#10;}" description="hook_extension" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_extension" value="/**&#10; * Implements hook_extension().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_extension() {&#10;  // Extension for template base names in Twig.&#10;  return &#39;.html.twig&#39;;&#10;  $END$&#10;}" description="hook_extension" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_render_template" value="/**&#10; * Implements hook_render_template().&#10; *&#10; * Render a template using the theme engine.&#10; *&#10; * @param string $template_file&#10; *   The path (relative to the Drupal root directory) to the template to be&#10; *   rendered including its extension in the format &#39;path/to/TEMPLATE_NAME.EXT&#39;.&#10; * @param array $variables&#10; *   A keyed array of variables that are available for composing the output. The&#10; *   theme engine is responsible for passing all the variables to the template.&#10; *   Depending on the code in the template, all or just a subset of the&#10; *   variables might be used in the template.&#10; *&#10; * @return string&#10; *   The output generated from the template. In most cases this will be a string&#10; *   containing HTML markup.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_render_template($template_file, $variables) {&#10;  $twig_service = \Drupal::service(&#39;twig&#39;);&#10;&#10;  return $twig_service-&#62;loadTemplate($template_file)-&#62;render($variables);&#10;  $END$&#10;}" description="hook_render_template" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_render_template" value="/**&#10; * Implements hook_render_template().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_render_template($template_file, $variables) {&#10;  $twig_service = \Drupal::service(&#39;twig&#39;);&#10;&#10;  return $twig_service-&#62;loadTemplate($template_file)-&#62;render($variables);&#10;  $END$&#10;}" description="hook_render_template" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_element_info_alter" value="/**&#10; * Implements hook_element_info_alter().&#10; *&#10; * Alter the element type information returned from modules.&#10; *&#10; * A module may implement this hook in order to alter the element type defaults&#10; * defined by a module.&#10; *&#10; * @param array $info&#10; *   An associative array with structure identical to that of the return value&#10; *   of \Drupal\Core\Render\ElementInfoManagerInterface::getInfo().&#10; *&#10; * @see \Drupal\Core\Render\ElementInfoManager&#10; * @see \Drupal\Core\Render\Element\ElementInterface&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_element_info_alter(array &amp;$info) {&#10;  // Decrease the default size of textfields.&#10;  if (isset($info[&#39;textfield&#39;][&#39;#size&#39;])) {&#10;    $info[&#39;textfield&#39;][&#39;#size&#39;] = 40;&#10;  }&#10;  $END$&#10;}" description="hook_element_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_element_info_alter" value="/**&#10; * Implements hook_element_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_element_info_alter(array &amp;$info) {&#10;  // Decrease the default size of textfields.&#10;  if (isset($info[&#39;textfield&#39;][&#39;#size&#39;])) {&#10;    $info[&#39;textfield&#39;][&#39;#size&#39;] = 40;&#10;  }&#10;  $END$&#10;}" description="hook_element_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_js_alter" value="/**&#10; * Implements hook_js_alter().&#10; *&#10; * Perform necessary alterations to the JavaScript before it is presented on&#10; * the page.&#10; *&#10; * @param $javascript&#10; *   An array of all JavaScript being presented on the page.&#10; * @param \Drupal\Core\Asset\AttachedAssetsInterface $assets&#10; *   The assets attached to the current response.&#10; *&#10; * @see drupal_js_defaults()&#10; * @see \Drupal\Core\Asset\AssetResolver&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_js_alter(&amp;$javascript, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {&#10;  // Swap out jQuery to use an updated version of the library.&#10;  $javascript[&#39;core/assets/vendor/jquery/jquery.min.js&#39;][&#39;data&#39;] = drupal_get_path(&#39;module&#39;, &#39;jquery_update&#39;) . &#39;/jquery.js&#39;;&#10;  $END$&#10;}" description="hook_js_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_js_alter" value="/**&#10; * Implements hook_js_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_js_alter(&amp;$javascript, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {&#10;  // Swap out jQuery to use an updated version of the library.&#10;  $javascript[&#39;core/assets/vendor/jquery/jquery.min.js&#39;][&#39;data&#39;] = drupal_get_path(&#39;module&#39;, &#39;jquery_update&#39;) . &#39;/jquery.js&#39;;&#10;  $END$&#10;}" description="hook_js_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_library_info_build" value="/**&#10; * Implements hook_library_info_build().&#10; *&#10; * Add dynamic library definitions.&#10; *&#10; * Modules may implement this hook to add dynamic library definitions. Static&#10; * libraries, which do not depend on any runtime information, should be declared&#10; * in a modulename.libraries.yml file instead.&#10; *&#10; * @return array[]&#10; *   An array of library definitions to register, keyed by library ID. The&#10; *   library ID will be prefixed with the module name automatically.&#10; *&#10; * @see core.libraries.yml&#10; * @see hook_library_info_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_library_info_build() {&#10;  $libraries = [];&#10;  // Add a library whose information changes depending on certain conditions.&#10;  $libraries[&#39;mymodule.zombie&#39;] = [&#10;    &#39;dependencies&#39; =&#62; [&#10;      &#39;core/backbone&#39;,&#10;    ],&#10;  ];&#10;  if (Drupal::moduleHandler()-&#62;moduleExists(&#39;minifyzombies&#39;)) {&#10;    $libraries[&#39;mymodule.zombie&#39;] += [&#10;      &#39;js&#39; =&#62; [&#10;        &#39;mymodule.zombie.min.js&#39; =&#62; [],&#10;      ],&#10;      &#39;css&#39; =&#62; [&#10;        &#39;base&#39; =&#62; [&#10;          &#39;mymodule.zombie.min.css&#39; =&#62; [],&#10;        ],&#10;      ],&#10;    ];&#10;  }&#10;  else {&#10;    $libraries[&#39;mymodule.zombie&#39;] += [&#10;      &#39;js&#39; =&#62; [&#10;        &#39;mymodule.zombie.js&#39; =&#62; [],&#10;      ],&#10;      &#39;css&#39; =&#62; [&#10;        &#39;base&#39; =&#62; [&#10;          &#39;mymodule.zombie.css&#39; =&#62; [],&#10;        ],&#10;      ],&#10;    ];&#10;  }&#10;&#10;  // Add a library only if a certain condition is met. If code wants to&#10;  // integrate with this library it is safe to (try to) load it unconditionally&#10;  // without reproducing this check. If the library definition does not exist&#10;  // the library (of course) not be loaded but no notices or errors will be&#10;  // triggered.&#10;  if (Drupal::moduleHandler()-&#62;moduleExists(&#39;vampirize&#39;)) {&#10;    $libraries[&#39;mymodule.vampire&#39;] = [&#10;      &#39;js&#39; =&#62; [&#10;        &#39;js/vampire.js&#39; =&#62; [],&#10;      ],&#10;      &#39;css&#39; =&#62; [&#10;        &#39;base&#39; =&#62; [&#10;          &#39;css/vampire.css&#39;,&#10;        ],&#10;      ],&#10;      &#39;dependencies&#39; =&#62; [&#10;        &#39;core/jquery&#39;,&#10;      ],&#10;    ];&#10;  }&#10;  return $libraries;&#10;  $END$&#10;}" description="hook_library_info_build" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_library_info_build" value="/**&#10; * Implements hook_library_info_build().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_library_info_build() {&#10;  $libraries = [];&#10;  // Add a library whose information changes depending on certain conditions.&#10;  $libraries[&#39;mymodule.zombie&#39;] = [&#10;    &#39;dependencies&#39; =&#62; [&#10;      &#39;core/backbone&#39;,&#10;    ],&#10;  ];&#10;  if (Drupal::moduleHandler()-&#62;moduleExists(&#39;minifyzombies&#39;)) {&#10;    $libraries[&#39;mymodule.zombie&#39;] += [&#10;      &#39;js&#39; =&#62; [&#10;        &#39;mymodule.zombie.min.js&#39; =&#62; [],&#10;      ],&#10;      &#39;css&#39; =&#62; [&#10;        &#39;base&#39; =&#62; [&#10;          &#39;mymodule.zombie.min.css&#39; =&#62; [],&#10;        ],&#10;      ],&#10;    ];&#10;  }&#10;  else {&#10;    $libraries[&#39;mymodule.zombie&#39;] += [&#10;      &#39;js&#39; =&#62; [&#10;        &#39;mymodule.zombie.js&#39; =&#62; [],&#10;      ],&#10;      &#39;css&#39; =&#62; [&#10;        &#39;base&#39; =&#62; [&#10;          &#39;mymodule.zombie.css&#39; =&#62; [],&#10;        ],&#10;      ],&#10;    ];&#10;  }&#10;&#10;  // Add a library only if a certain condition is met. If code wants to&#10;  // integrate with this library it is safe to (try to) load it unconditionally&#10;  // without reproducing this check. If the library definition does not exist&#10;  // the library (of course) not be loaded but no notices or errors will be&#10;  // triggered.&#10;  if (Drupal::moduleHandler()-&#62;moduleExists(&#39;vampirize&#39;)) {&#10;    $libraries[&#39;mymodule.vampire&#39;] = [&#10;      &#39;js&#39; =&#62; [&#10;        &#39;js/vampire.js&#39; =&#62; [],&#10;      ],&#10;      &#39;css&#39; =&#62; [&#10;        &#39;base&#39; =&#62; [&#10;          &#39;css/vampire.css&#39;,&#10;        ],&#10;      ],&#10;      &#39;dependencies&#39; =&#62; [&#10;        &#39;core/jquery&#39;,&#10;      ],&#10;    ];&#10;  }&#10;  return $libraries;&#10;  $END$&#10;}" description="hook_library_info_build" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_js_settings_build" value="/**&#10; * Implements hook_js_settings_build().&#10; *&#10; * Modify the JavaScript settings (drupalSettings).&#10; *&#10; * @param array &amp;$settings&#10; *   An array of all JavaScript settings (drupalSettings) being presented on the&#10; *   page.&#10; * @param \Drupal\Core\Asset\AttachedAssetsInterface $assets&#10; *   The assets attached to the current response.&#10; *&#10; * @see \Drupal\Core\Asset\AssetResolver&#10; *&#10; * The results of this hook are cached, however modules may use&#10; * hook_js_settings_alter() to dynamically alter settings.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_js_settings_build(array &amp;$settings, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {&#10;  // Manipulate settings.&#10;  if (isset($settings[&#39;dialog&#39;])) {&#10;    $settings[&#39;dialog&#39;][&#39;autoResize&#39;] = FALSE;&#10;  }&#10;  $END$&#10;}" description="hook_js_settings_build" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_js_settings_build" value="/**&#10; * Implements hook_js_settings_build().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_js_settings_build(array &amp;$settings, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {&#10;  // Manipulate settings.&#10;  if (isset($settings[&#39;dialog&#39;])) {&#10;    $settings[&#39;dialog&#39;][&#39;autoResize&#39;] = FALSE;&#10;  }&#10;  $END$&#10;}" description="hook_js_settings_build" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_js_settings_alter" value="/**&#10; * Implements hook_js_settings_alter().&#10; *&#10; * Perform necessary alterations to the JavaScript settings (drupalSettings).&#10; *&#10; * @param array &amp;$settings&#10; *   An array of all JavaScript settings (drupalSettings) being presented on the&#10; *   page.&#10; * @param \Drupal\Core\Asset\AttachedAssetsInterface $assets&#10; *   The assets attached to the current response.&#10; *&#10; * @see \Drupal\Core\Asset\AssetResolver&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_js_settings_alter(array &amp;$settings, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {&#10;  // Add settings.&#10;  $settings[&#39;user&#39;][&#39;uid&#39;] = \Drupal::currentUser();&#10;&#10;  // Manipulate settings.&#10;  if (isset($settings[&#39;dialog&#39;])) {&#10;    $settings[&#39;dialog&#39;][&#39;autoResize&#39;] = FALSE;&#10;  }&#10;  $END$&#10;}" description="hook_js_settings_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_js_settings_alter" value="/**&#10; * Implements hook_js_settings_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_js_settings_alter(array &amp;$settings, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {&#10;  // Add settings.&#10;  $settings[&#39;user&#39;][&#39;uid&#39;] = \Drupal::currentUser();&#10;&#10;  // Manipulate settings.&#10;  if (isset($settings[&#39;dialog&#39;])) {&#10;    $settings[&#39;dialog&#39;][&#39;autoResize&#39;] = FALSE;&#10;  }&#10;  $END$&#10;}" description="hook_js_settings_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_library_info_alter" value="/**&#10; * Implements hook_library_info_alter().&#10; *&#10; * Alter libraries provided by an extension.&#10; *&#10; * Allows modules and themes to change libraries&#39; definitions; mostly used to&#10; * update a library to a newer version, while ensuring backward compatibility.&#10; * In general, such manipulations should only be done to extend the library&#39;s&#10; * functionality in a backward-compatible way, to avoid breaking other modules&#10; * and themes that may be using the library.&#10; *&#10; * @param array $libraries&#10; *   An associative array of libraries registered by $extension. Keyed by&#10; *   internal library name and passed by reference.&#10; * @param string $extension&#10; *   Can either be &#39;core&#39; or the machine name of the extension that registered&#10; *   the libraries.&#10; *&#10; * @see \Drupal\Core\Asset\LibraryDiscoveryParser::parseLibraryInfo()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_library_info_alter(&amp;$libraries, $extension) {&#10;  // Update Farbtastic to version 2.0.&#10;  if ($extension == &#39;core&#39; &amp;&amp; isset($libraries[&#39;jquery.farbtastic&#39;])) {&#10;    // Verify existing version is older than the one we are updating to.&#10;    if (version_compare($libraries[&#39;jquery.farbtastic&#39;][&#39;version&#39;], &#39;2.0&#39;, &#39;&#60;&#39;)) {&#10;      // Update the existing Farbtastic to version 2.0.&#10;      $libraries[&#39;jquery.farbtastic&#39;][&#39;version&#39;] = &#39;2.0&#39;;&#10;      // To accurately replace library files, the order of files and the options&#10;      // of each file have to be retained; e.g., like this:&#10;      $old_path = &#39;assets/vendor/farbtastic&#39;;&#10;      // Since the replaced library files are no longer located in a directory&#10;      // relative to the original extension, specify an absolute path (relative&#10;      // to DRUPAL_ROOT / base_path()) to the new location.&#10;      $new_path = &#39;/&#39; . drupal_get_path(&#39;module&#39;, &#39;farbtastic_update&#39;) . &#39;/js&#39;;&#10;      $new_js = array();&#10;      $replacements = array(&#10;        $old_path . &#39;/farbtastic.js&#39; =&#62; $new_path . &#39;/farbtastic-2.0.js&#39;,&#10;      );&#10;      foreach ($libraries[&#39;jquery.farbtastic&#39;][&#39;js&#39;] as $source =&#62; $options) {&#10;        if (isset($replacements[$source])) {&#10;          $new_js[$replacements[$source]] = $options;&#10;        }&#10;        else {&#10;          $new_js[$source] = $options;&#10;        }&#10;      }&#10;      $libraries[&#39;jquery.farbtastic&#39;][&#39;js&#39;] = $new_js;&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_library_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_library_info_alter" value="/**&#10; * Implements hook_library_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_library_info_alter(&amp;$libraries, $extension) {&#10;  // Update Farbtastic to version 2.0.&#10;  if ($extension == &#39;core&#39; &amp;&amp; isset($libraries[&#39;jquery.farbtastic&#39;])) {&#10;    // Verify existing version is older than the one we are updating to.&#10;    if (version_compare($libraries[&#39;jquery.farbtastic&#39;][&#39;version&#39;], &#39;2.0&#39;, &#39;&#60;&#39;)) {&#10;      // Update the existing Farbtastic to version 2.0.&#10;      $libraries[&#39;jquery.farbtastic&#39;][&#39;version&#39;] = &#39;2.0&#39;;&#10;      // To accurately replace library files, the order of files and the options&#10;      // of each file have to be retained; e.g., like this:&#10;      $old_path = &#39;assets/vendor/farbtastic&#39;;&#10;      // Since the replaced library files are no longer located in a directory&#10;      // relative to the original extension, specify an absolute path (relative&#10;      // to DRUPAL_ROOT / base_path()) to the new location.&#10;      $new_path = &#39;/&#39; . drupal_get_path(&#39;module&#39;, &#39;farbtastic_update&#39;) . &#39;/js&#39;;&#10;      $new_js = array();&#10;      $replacements = array(&#10;        $old_path . &#39;/farbtastic.js&#39; =&#62; $new_path . &#39;/farbtastic-2.0.js&#39;,&#10;      );&#10;      foreach ($libraries[&#39;jquery.farbtastic&#39;][&#39;js&#39;] as $source =&#62; $options) {&#10;        if (isset($replacements[$source])) {&#10;          $new_js[$replacements[$source]] = $options;&#10;        }&#10;        else {&#10;          $new_js[$source] = $options;&#10;        }&#10;      }&#10;      $libraries[&#39;jquery.farbtastic&#39;][&#39;js&#39;] = $new_js;&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_library_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_css_alter" value="/**&#10; * Implements hook_css_alter().&#10; *&#10; * Alter CSS files before they are output on the page.&#10; *&#10; * @param $css&#10; *   An array of all CSS items (files and inline CSS) being requested on the page.&#10; * @param \Drupal\Core\Asset\AttachedAssetsInterface $assets&#10; *   The assets attached to the current response.&#10; *&#10; * @see Drupal\Core\Asset\LibraryResolverInterface::getCssAssets()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_css_alter(&amp;$css, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {&#10;  // Remove defaults.css file.&#10;  unset($css[drupal_get_path(&#39;module&#39;, &#39;system&#39;) . &#39;/defaults.css&#39;]);&#10;  $END$&#10;}" description="hook_css_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_css_alter" value="/**&#10; * Implements hook_css_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_css_alter(&amp;$css, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {&#10;  // Remove defaults.css file.&#10;  unset($css[drupal_get_path(&#39;module&#39;, &#39;system&#39;) . &#39;/defaults.css&#39;]);&#10;  $END$&#10;}" description="hook_css_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_page_attachments" value="/**&#10; * Implements hook_page_attachments().&#10; *&#10; * Add attachments (typically assets) to a page before it is rendered.&#10; *&#10; * Use this hook when you want to conditionally add attachments to a page.&#10; *&#10; * If you want to alter the attachments added by other modules or if your module&#10; * depends on the elements of other modules, use hook_page_attachments_alter()&#10; * instead, which runs after this hook.&#10; *&#10; * If you try to add anything but #attached and #cache to the array, an&#10; * exception is thrown.&#10; *&#10; * @param array &amp;$attachments&#10; *   An array that you can add attachments to.&#10; *&#10; * @see hook_page_attachments_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_page_attachments(array &amp;$attachments) {&#10;  // Unconditionally attach an asset to the page.&#10;  $attachments[&#39;#attached&#39;][&#39;library&#39;][] = &#39;core/domready&#39;;&#10;&#10;  // Conditionally attach an asset to the page.&#10;  if (!\Drupal::currentUser()-&#62;hasPermission(&#39;may pet kittens&#39;)) {&#10;    $attachments[&#39;#attached&#39;][&#39;library&#39;][] = &#39;core/jquery&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_page_attachments" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_page_attachments" value="/**&#10; * Implements hook_page_attachments().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_page_attachments(array &amp;$attachments) {&#10;  // Unconditionally attach an asset to the page.&#10;  $attachments[&#39;#attached&#39;][&#39;library&#39;][] = &#39;core/domready&#39;;&#10;&#10;  // Conditionally attach an asset to the page.&#10;  if (!\Drupal::currentUser()-&#62;hasPermission(&#39;may pet kittens&#39;)) {&#10;    $attachments[&#39;#attached&#39;][&#39;library&#39;][] = &#39;core/jquery&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_page_attachments" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_page_attachments_alter" value="/**&#10; * Implements hook_page_attachments_alter().&#10; *&#10; * Alter attachments (typically assets) to a page before it is rendered.&#10; *&#10; * Use this hook when you want to remove or alter attachments on the page, or&#10; * add attachments to the page that depend on another module&#39;s attachments (this&#10; * hook runs after hook_page_attachments().&#10; *&#10; * If you try to add anything but #attached and #cache to the array, an&#10; * exception is thrown.&#10; *&#10; * @param array &amp;$attachments&#10; *   Array of all attachments provided by hook_page_attachments() implementations.&#10; *&#10; * @see hook_page_attachments()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_page_attachments_alter(array &amp;$attachments) {&#10;  // Conditionally remove an asset.&#10;  if (in_array(&#39;core/jquery&#39;, $attachments[&#39;#attached&#39;][&#39;library&#39;])) {&#10;    $index = array_search(&#39;core/jquery&#39;, $attachments[&#39;#attached&#39;][&#39;library&#39;]);&#10;    unset($attachments[&#39;#attached&#39;][&#39;library&#39;][$index]);&#10;  }&#10;  $END$&#10;}" description="hook_page_attachments_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_page_attachments_alter" value="/**&#10; * Implements hook_page_attachments_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_page_attachments_alter(array &amp;$attachments) {&#10;  // Conditionally remove an asset.&#10;  if (in_array(&#39;core/jquery&#39;, $attachments[&#39;#attached&#39;][&#39;library&#39;])) {&#10;    $index = array_search(&#39;core/jquery&#39;, $attachments[&#39;#attached&#39;][&#39;library&#39;]);&#10;    unset($attachments[&#39;#attached&#39;][&#39;library&#39;][$index]);&#10;  }&#10;  $END$&#10;}" description="hook_page_attachments_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_page_top" value="/**&#10; * Implements hook_page_top().&#10; *&#10; * Add a renderable array to the top of the page.&#10; *&#10; * @param array $page_top&#10; *   A renderable array representing the top of the page.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_page_top(array &amp;$page_top) {&#10;  $page_top[&#39;mymodule&#39;] = [&#39;#markup&#39; =&#62; &#39;This is the top.&#39;];&#10;  $END$&#10;}" description="hook_page_top" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_page_top" value="/**&#10; * Implements hook_page_top().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_page_top(array &amp;$page_top) {&#10;  $page_top[&#39;mymodule&#39;] = [&#39;#markup&#39; =&#62; &#39;This is the top.&#39;];&#10;  $END$&#10;}" description="hook_page_top" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_page_bottom" value="/**&#10; * Implements hook_page_bottom().&#10; *&#10; * Add a renderable array to the bottom of the page.&#10; *&#10; * @param array $page_bottom&#10; *   A renderable array representing the bottom of the page.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_page_bottom(array &amp;$page_bottom) {&#10;  $page_bottom[&#39;mymodule&#39;] = [&#39;#markup&#39; =&#62; &#39;This is the bottom.&#39;];&#10;  $END$&#10;}" description="hook_page_bottom" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_page_bottom" value="/**&#10; * Implements hook_page_bottom().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_page_bottom(array &amp;$page_bottom) {&#10;  $page_bottom[&#39;mymodule&#39;] = [&#39;#markup&#39; =&#62; &#39;This is the bottom.&#39;];&#10;  $END$&#10;}" description="hook_page_bottom" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_theme" value="/**&#10; * Implements hook_theme().&#10; *&#10; * Register a module or theme&#39;s theme implementations.&#10; *&#10; * The implementations declared by this hook specify how a particular render&#10; * array is to be rendered as HTML.&#10; *&#10; * @param array $existing&#10; *   An array of existing implementations that may be used for override&#10; *   purposes. This is primarily useful for themes that may wish to examine&#10; *   existing implementations to extract data (such as arguments) so that&#10; *   it may properly register its own, higher priority implementations.&#10; * @param $type&#10; *   Whether a theme, module, etc. is being processed. This is primarily useful&#10; *   so that themes tell if they are the actual theme being called or a parent&#10; *   theme. May be one of:&#10; *   - &#39;module&#39;: A module is being checked for theme implementations.&#10; *   - &#39;base_theme_engine&#39;: A theme engine is being checked for a theme that is&#10; *     a parent of the actual theme being used.&#10; *   - &#39;theme_engine&#39;: A theme engine is being checked for the actual theme&#10; *     being used.&#10; *   - &#39;base_theme&#39;: A base theme is being checked for theme implementations.&#10; *   - &#39;theme&#39;: The actual theme in use is being checked.&#10; * @param $theme&#10; *   The actual name of theme, module, etc. that is being being processed.&#10; * @param $path&#10; *   The directory path of the theme or module, so that it doesn&#39;t need to be&#10; *   looked up.&#10; *&#10; * @return array&#10; *   An associative array of information about theme implementations. The keys&#10; *   on the outer array are known as &#34;theme hooks&#34;. For theme suggestions,&#10; *   instead of the array key being the base theme hook, the key is a theme&#10; *   suggestion name with the format &#39;base_hook_name__sub_hook_name&#39;.&#10; *   For render elements, the key is the machine name of the render element.&#10; *   The array values are themselves arrays containing information about the&#10; *   theme hook and its implementation. Each information array must contain&#10; *   either a &#39;variables&#39; element (for using a #theme element) or a&#10; *   &#39;render element&#39; element (for render elements), but not both.&#10; *   The following elements may be part of each information array:&#10; *   - variables: Only used for #theme in render array: an array of variables,&#10; *     where the array keys are the names of the variables, and the array&#10; *     values are the default values if they are not given in the render array.&#10; *     Template implementations receive each array key as a variable in the&#10; *     template file (so they must be legal PHP/Twig variable names). Function&#10; *     implementations are passed the variables in a single $variables function&#10; *     argument. If you are using these variables in a render array, prefix the&#10; *     variable names defined here with a #.&#10; *   - render element: Used for render element items only: the name of the&#10; *     renderable element or element tree to pass to the theme function. This&#10; *     name is used as the name of the variable that holds the renderable&#10; *     element or tree in preprocess and process functions.&#10; *   - file: The file the implementation resides in. This file will be included&#10; *     prior to the theme being rendered, to make sure that the function or&#10; *     preprocess function (as needed) is actually loaded.&#10; *   - path: Override the path of the file to be used. Ordinarily the module or&#10; *     theme path will be used, but if the file will not be in the default&#10; *     path, include it here. This path should be relative to the Drupal root&#10; *     directory.&#10; *   - template: If specified, the theme implementation is a template file, and&#10; *     this is the template name. Do not add &#39;html.twig&#39; on the end of the&#10; *     template name. The extension will be added automatically by the default&#10; *     rendering engine (which is Twig.) If &#39;path&#39; is specified, &#39;template&#39;&#10; *     should also be specified. If neither &#39;template&#39; nor &#39;function&#39; are&#10; *     specified, a default template name will be assumed. For example, if a&#10; *     module registers the &#39;search_result&#39; theme hook, &#39;search-result&#39; will be&#10; *     assigned as its template name.&#10; *   - function: (deprecated in Drupal 8.0.x, will be removed in Drupal 9.0.x)&#10; *     If specified, this will be the function name to invoke for this&#10; *     implementation. If neither &#39;template&#39; nor &#39;function&#39; are specified, a&#10; *     default template name will be assumed. See above for more details.&#10; *   - base hook: Used for theme suggestions only: the base theme hook name.&#10; *     Instead of this suggestion&#39;s implementation being used directly, the base&#10; *     hook will be invoked with this implementation as its first suggestion.&#10; *     The base hook&#39;s files will be included and the base hook&#39;s preprocess&#10; *     functions will be called in place of any suggestion&#39;s preprocess&#10; *     functions. If an implementation of hook_theme_suggestions_HOOK() (where&#10; *     HOOK is the base hook) changes the suggestion order, a different&#10; *     suggestion may be used in place of this suggestion. If after&#10; *     hook_theme_suggestions_HOOK() this suggestion remains the first&#10; *     suggestion, then this suggestion&#39;s function or template will be used to&#10; *     generate the rendered output.&#10; *   - pattern: A regular expression pattern to be used to allow this theme&#10; *     implementation to have a dynamic name. The convention is to use __ to&#10; *     differentiate the dynamic portion of the theme. For example, to allow&#10; *     forums to be themed individually, the pattern might be: &#39;forum__&#39;. Then,&#10; *     when the forum is rendered, following render array can be used:&#10; *     @code&#10; *     $render_array = array(&#10; *       &#39;#theme&#39; =&#62; array(&#39;forum__&#39; . $tid, &#39;forum&#39;),&#10; *       &#39;#forum&#39; =&#62; $forum,&#10; *     );&#10; *     @endcode&#10; *   - preprocess functions: A list of functions used to preprocess this data.&#10; *     Ordinarily this won&#39;t be used; it&#39;s automatically filled in. By default,&#10; *     for a module this will be filled in as template_preprocess_HOOK. For&#10; *     a theme this will be filled in as twig_preprocess and&#10; *     twig_preprocess_HOOK as well as themename_preprocess and&#10; *     themename_preprocess_HOOK.&#10; *   - override preprocess functions: Set to TRUE when a theme does NOT want&#10; *     the standard preprocess functions to run. This can be used to give a&#10; *     theme FULL control over how variables are set. For example, if a theme&#10; *     wants total control over how certain variables in the page.html.twig are&#10; *     set, this can be set to true. Please keep in mind that when this is used&#10; *     by a theme, that theme becomes responsible for making sure necessary&#10; *     variables are set.&#10; *   - type: (automatically derived) Where the theme hook is defined:&#10; *     &#39;module&#39;, &#39;theme_engine&#39;, or &#39;theme&#39;.&#10; *   - theme path: (automatically derived) The directory path of the theme or&#10; *     module, so that it doesn&#39;t need to be looked up.&#10; *&#10; * @see themeable&#10; * @see hook_theme_registry_alter()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_theme($existing, $type, $theme, $path) {&#10;  return array(&#10;    &#39;forum_display&#39; =&#62; array(&#10;      &#39;variables&#39; =&#62; array(&#39;forums&#39; =&#62; NULL, &#39;topics&#39; =&#62; NULL, &#39;parents&#39; =&#62; NULL, &#39;tid&#39; =&#62; NULL, &#39;sortby&#39; =&#62; NULL, &#39;forum_per_page&#39; =&#62; NULL),&#10;    ),&#10;    &#39;forum_list&#39; =&#62; array(&#10;      &#39;variables&#39; =&#62; array(&#39;forums&#39; =&#62; NULL, &#39;parents&#39; =&#62; NULL, &#39;tid&#39; =&#62; NULL),&#10;    ),&#10;    &#39;forum_icon&#39; =&#62; array(&#10;      &#39;variables&#39; =&#62; array(&#39;new_posts&#39; =&#62; NULL, &#39;num_posts&#39; =&#62; 0, &#39;comment_mode&#39; =&#62; 0, &#39;sticky&#39; =&#62; 0),&#10;    ),&#10;    &#39;status_report&#39; =&#62; array(&#10;      &#39;render element&#39; =&#62; &#39;requirements&#39;,&#10;      &#39;file&#39; =&#62; &#39;system.admin.inc&#39;,&#10;    ),&#10;  );&#10;  $END$&#10;}" description="hook_theme" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_theme" value="/**&#10; * Implements hook_theme().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_theme($existing, $type, $theme, $path) {&#10;  return array(&#10;    &#39;forum_display&#39; =&#62; array(&#10;      &#39;variables&#39; =&#62; array(&#39;forums&#39; =&#62; NULL, &#39;topics&#39; =&#62; NULL, &#39;parents&#39; =&#62; NULL, &#39;tid&#39; =&#62; NULL, &#39;sortby&#39; =&#62; NULL, &#39;forum_per_page&#39; =&#62; NULL),&#10;    ),&#10;    &#39;forum_list&#39; =&#62; array(&#10;      &#39;variables&#39; =&#62; array(&#39;forums&#39; =&#62; NULL, &#39;parents&#39; =&#62; NULL, &#39;tid&#39; =&#62; NULL),&#10;    ),&#10;    &#39;forum_icon&#39; =&#62; array(&#10;      &#39;variables&#39; =&#62; array(&#39;new_posts&#39; =&#62; NULL, &#39;num_posts&#39; =&#62; 0, &#39;comment_mode&#39; =&#62; 0, &#39;sticky&#39; =&#62; 0),&#10;    ),&#10;    &#39;status_report&#39; =&#62; array(&#10;      &#39;render element&#39; =&#62; &#39;requirements&#39;,&#10;      &#39;file&#39; =&#62; &#39;system.admin.inc&#39;,&#10;    ),&#10;  );&#10;  $END$&#10;}" description="hook_theme" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_theme_registry_alter" value="/**&#10; * Implements hook_theme_registry_alter().&#10; *&#10; * Alter the theme registry information returned from hook_theme().&#10; *&#10; * The theme registry stores information about all available theme hooks,&#10; * including which callback functions those hooks will call when triggered,&#10; * what template files are exposed by these hooks, and so on.&#10; *&#10; * Note that this hook is only executed as the theme cache is re-built.&#10; * Changes here will not be visible until the next cache clear.&#10; *&#10; * The $theme_registry array is keyed by theme hook name, and contains the&#10; * information returned from hook_theme(), as well as additional properties&#10; * added by \Drupal\Core\Theme\Registry::processExtension().&#10; *&#10; * For example:&#10; * @code&#10; * $theme_registry[&#39;block_content_add_list&#39;] = array (&#10; *   &#39;template&#39; =&#62; &#39;block-content-add-list&#39;,&#10; *   &#39;path&#39; =&#62; &#39;core/themes/seven/templates&#39;,&#10; *   &#39;type&#39; =&#62; &#39;theme_engine&#39;,&#10; *   &#39;theme path&#39; =&#62; &#39;core/themes/seven&#39;,&#10; *   &#39;includes&#39; =&#62; array (&#10; *     0 =&#62; &#39;core/modules/block_content/block_content.pages.inc&#39;,&#10; *   ),&#10; *   &#39;variables&#39; =&#62; array (&#10; *     &#39;content&#39; =&#62; NULL,&#10; *   ),&#10; *   &#39;preprocess functions&#39; =&#62; array (&#10; *     0 =&#62; &#39;template_preprocess&#39;,&#10; *     1 =&#62; &#39;template_preprocess_block_content_add_list&#39;,&#10; *     2 =&#62; &#39;contextual_preprocess&#39;,&#10; *     3 =&#62; &#39;seven_preprocess_block_content_add_list&#39;,&#10; *   ),&#10; * );&#10; * @endcode&#10; *&#10; * @param $theme_registry&#10; *   The entire cache of theme registry information, post-processing.&#10; *&#10; * @see hook_theme()&#10; * @see \Drupal\Core\Theme\Registry::processExtension()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_theme_registry_alter(&amp;$theme_registry) {&#10;  // Kill the next/previous forum topic navigation links.&#10;  foreach ($theme_registry[&#39;forum_topic_navigation&#39;][&#39;preprocess functions&#39;] as $key =&#62; $value) {&#10;    if ($value == &#39;template_preprocess_forum_topic_navigation&#39;) {&#10;      unset($theme_registry[&#39;forum_topic_navigation&#39;][&#39;preprocess functions&#39;][$key]);&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_theme_registry_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_theme_registry_alter" value="/**&#10; * Implements hook_theme_registry_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_theme_registry_alter(&amp;$theme_registry) {&#10;  // Kill the next/previous forum topic navigation links.&#10;  foreach ($theme_registry[&#39;forum_topic_navigation&#39;][&#39;preprocess functions&#39;] as $key =&#62; $value) {&#10;    if ($value == &#39;template_preprocess_forum_topic_navigation&#39;) {&#10;      unset($theme_registry[&#39;forum_topic_navigation&#39;][&#39;preprocess functions&#39;][$key]);&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_theme_registry_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_template_preprocess_default_variables_alter" value="/**&#10; * Implements hook_template_preprocess_default_variables_alter().&#10; *&#10; * Alter the default, hook-independent variables for all templates.&#10; *&#10; * Allows modules to provide additional default template variables or manipulate&#10; * existing. This hook is invoked from template_preprocess() after basic default&#10; * template variables have been set up and before the next template preprocess&#10; * function is invoked.&#10; *&#10; * Note that the default template variables are statically cached within a&#10; * request. When adding a template variable that depends on other context, it is&#10; * your responsibility to appropriately reset the static cache in&#10; * template_preprocess() when needed:&#10; * @code&#10; * drupal_static_reset(&#39;template_preprocess&#39;);&#10; * @endcode&#10; *&#10; * See user_template_preprocess_default_variables_alter() for an example.&#10; *&#10; * @param array $variables&#10; *   An associative array of default template variables, as set up by&#10; *   _template_preprocess_default_variables(). Passed by reference.&#10; *&#10; * @see template_preprocess()&#10; * @see _template_preprocess_default_variables()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_template_preprocess_default_variables_alter(&amp;$variables) {&#10;  $variables[&#39;is_admin&#39;] = \Drupal::currentUser()-&#62;hasPermission(&#39;access administration pages&#39;);&#10;  $END$&#10;}" description="hook_template_preprocess_default_variables_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_template_preprocess_default_variables_alter" value="/**&#10; * Implements hook_template_preprocess_default_variables_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_template_preprocess_default_variables_alter(&amp;$variables) {&#10;  $variables[&#39;is_admin&#39;] = \Drupal::currentUser()-&#62;hasPermission(&#39;access administration pages&#39;);&#10;  $END$&#10;}" description="hook_template_preprocess_default_variables_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_language_switch_links_alter" value="/**&#10; * Implements hook_language_switch_links_alter().&#10; *&#10; * Perform alterations on language switcher links.&#10; *&#10; * A language switcher link may need to point to a different path or use a&#10; * translated link text before going through the link generator, which will&#10; * just handle the path aliases.&#10; *&#10; * @param $links&#10; *   Nested array of links keyed by language code.&#10; * @param $type&#10; *   The language type the links will switch.&#10; * @param $path&#10; *   The current path.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_language_switch_links_alter(array &amp;$links, $type, $path) {&#10;  $language_interface = \Drupal::languageManager()-&#62;getCurrentLanguage();&#10;&#10;  if ($type == LanguageInterface::TYPE_CONTENT &amp;&amp; isset($links[$language_interface-&#62;getId()])) {&#10;    foreach ($links[$language_interface-&#62;getId()] as $link) {&#10;      $link[&#39;attributes&#39;][&#39;class&#39;][] = &#39;active-language&#39;;&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_language_switch_links_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_language_switch_links_alter" value="/**&#10; * Implements hook_language_switch_links_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_language_switch_links_alter(array &amp;$links, $type, $path) {&#10;  $language_interface = \Drupal::languageManager()-&#62;getCurrentLanguage();&#10;&#10;  if ($type == LanguageInterface::TYPE_CONTENT &amp;&amp; isset($links[$language_interface-&#62;getId()])) {&#10;    foreach ($links[$language_interface-&#62;getId()] as $link) {&#10;      $link[&#39;attributes&#39;][&#39;class&#39;][] = &#39;active-language&#39;;&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_language_switch_links_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_transliteration_overrides_alter" value="/**&#10; * Implements hook_transliteration_overrides_alter().&#10; *&#10; * Provide language-specific overrides for transliteration.&#10; *&#10; * If the overrides you want to provide are standard for your language, consider&#10; * providing a patch for the Drupal Core transliteration system instead of using&#10; * this hook. This hook can be used temporarily until Drupal Core&#39;s&#10; * transliteration tables are fixed, or for sites that want to use a&#10; * non-standard transliteration system.&#10; *&#10; * @param array $overrides&#10; *   Associative array of language-specific overrides whose keys are integer&#10; *   Unicode character codes, and whose values are the transliterations of those&#10; *   characters in the given language, to override default transliterations.&#10; * @param string $langcode&#10; *   The code for the language that is being transliterated.&#10; *&#10; * @ingroup hooks&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_transliteration_overrides_alter(&amp;$overrides, $langcode) {&#10;  // Provide special overrides for German for a custom site.&#10;  if ($langcode == &#39;de&#39;) {&#10;    // The core-provided transliteration of Ä is Ae, but we want just A.&#10;    $overrides[0xC4] = &#39;A&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_transliteration_overrides_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_transliteration_overrides_alter" value="/**&#10; * Implements hook_transliteration_overrides_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_transliteration_overrides_alter(&amp;$overrides, $langcode) {&#10;  // Provide special overrides for German for a custom site.&#10;  if ($langcode == &#39;de&#39;) {&#10;    // The core-provided transliteration of Ä is Ae, but we want just A.&#10;    $overrides[0xC4] = &#39;A&#39;;&#10;  }&#10;  $END$&#10;}" description="hook_transliteration_overrides_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_file_download" value="/**&#10; * Implements hook_file_download().&#10; *&#10; * Control access to private file downloads and specify HTTP headers.&#10; *&#10; * This hook allows modules to enforce permissions on file downloads whenever&#10; * Drupal is handling file download, as opposed to the web server bypassing&#10; * Drupal and returning the file from a public directory. Modules can also&#10; * provide headers to specify information like the file&#39;s name or MIME type.&#10; *&#10; * @param $uri&#10; *   The URI of the file.&#10; * @return&#10; *   If the user does not have permission to access the file, return -1. If the&#10; *   user has permission, return an array with the appropriate headers. If the&#10; *   file is not controlled by the current module, the return value should be&#10; *   NULL.&#10; *&#10; * @see \Drupal\system\FileDownloadController::download()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_file_download($uri) {&#10;  // Check to see if this is a config download.&#10;  $scheme = file_uri_scheme($uri);&#10;  $target = file_uri_target($uri);&#10;  if ($scheme == &#39;temporary&#39; &amp;&amp; $target == &#39;config.tar.gz&#39;) {&#10;    return array(&#10;      &#39;Content-disposition&#39; =&#62; &#39;attachment; filename=&#34;config.tar.gz&#34;&#39;,&#10;    );&#10;  }&#10;  $END$&#10;}" description="hook_file_download" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_file_download" value="/**&#10; * Implements hook_file_download().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_file_download($uri) {&#10;  // Check to see if this is a config download.&#10;  $scheme = file_uri_scheme($uri);&#10;  $target = file_uri_target($uri);&#10;  if ($scheme == &#39;temporary&#39; &amp;&amp; $target == &#39;config.tar.gz&#39;) {&#10;    return array(&#10;      &#39;Content-disposition&#39; =&#62; &#39;attachment; filename=&#34;config.tar.gz&#34;&#39;,&#10;    );&#10;  }&#10;  $END$&#10;}" description="hook_file_download" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_file_url_alter" value="/**&#10; * Implements hook_file_url_alter().&#10; *&#10; * Alter the URL to a file.&#10; *&#10; * This hook is called from file_create_url(), and  is called fairly&#10; * frequently (10+ times per page), depending on how many files there are in a&#10; * given page.&#10; * If CSS and JS aggregation are disabled, this can become very frequently&#10; * (50+ times per page) so performance is critical.&#10; *&#10; * This function should alter the URI, if it wants to rewrite the file URL.&#10; *&#10; * @param $uri&#10; *   The URI to a file for which we need an external URL, or the path to a&#10; *   shipped file.&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_file_url_alter(&amp;$uri) {&#10;  $user = \Drupal::currentUser();&#10;&#10;  // User 1 will always see the local file in this example.&#10;  if ($user-&#62;id() == 1) {&#10;    return;&#10;  }&#10;&#10;  $cdn1 = &#39;http://cdn1.example.com&#39;;&#10;  $cdn2 = &#39;http://cdn2.example.com&#39;;&#10;  $cdn_extensions = array(&#39;css&#39;, &#39;js&#39;, &#39;gif&#39;, &#39;jpg&#39;, &#39;jpeg&#39;, &#39;png&#39;);&#10;&#10;  // Most CDNs don&#39;t support private file transfers without a lot of hassle,&#10;  // so don&#39;t support this in the common case.&#10;  $schemes = array(&#39;public&#39;);&#10;&#10;  $scheme = file_uri_scheme($uri);&#10;&#10;  // Only serve shipped files and public created files from the CDN.&#10;  if (!$scheme || in_array($scheme, $schemes)) {&#10;    // Shipped files.&#10;    if (!$scheme) {&#10;      $path = $uri;&#10;    }&#10;    // Public created files.&#10;    else {&#10;      $wrapper = \Drupal::service(&#39;stream_wrapper_manager&#39;)-&#62;getViaScheme($scheme);&#10;      $path = $wrapper-&#62;getDirectoryPath() . &#39;/&#39; . file_uri_target($uri);&#10;    }&#10;&#10;    // Clean up Windows paths.&#10;    $path = str_replace(&#39;\\&#39;, &#39;/&#39;, $path);&#10;&#10;    // Serve files with one of the CDN extensions from CDN 1, all others from&#10;    // CDN 2.&#10;    $pathinfo = pathinfo($path);&#10;    if (isset($pathinfo[&#39;extension&#39;]) &amp;&amp; in_array($pathinfo[&#39;extension&#39;], $cdn_extensions)) {&#10;      $uri = $cdn1 . &#39;/&#39; . $path;&#10;    }&#10;    else {&#10;      $uri = $cdn2 . &#39;/&#39; . $path;&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_file_url_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_file_url_alter" value="/**&#10; * Implements hook_file_url_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_file_url_alter(&amp;$uri) {&#10;  $user = \Drupal::currentUser();&#10;&#10;  // User 1 will always see the local file in this example.&#10;  if ($user-&#62;id() == 1) {&#10;    return;&#10;  }&#10;&#10;  $cdn1 = &#39;http://cdn1.example.com&#39;;&#10;  $cdn2 = &#39;http://cdn2.example.com&#39;;&#10;  $cdn_extensions = array(&#39;css&#39;, &#39;js&#39;, &#39;gif&#39;, &#39;jpg&#39;, &#39;jpeg&#39;, &#39;png&#39;);&#10;&#10;  // Most CDNs don&#39;t support private file transfers without a lot of hassle,&#10;  // so don&#39;t support this in the common case.&#10;  $schemes = array(&#39;public&#39;);&#10;&#10;  $scheme = file_uri_scheme($uri);&#10;&#10;  // Only serve shipped files and public created files from the CDN.&#10;  if (!$scheme || in_array($scheme, $schemes)) {&#10;    // Shipped files.&#10;    if (!$scheme) {&#10;      $path = $uri;&#10;    }&#10;    // Public created files.&#10;    else {&#10;      $wrapper = \Drupal::service(&#39;stream_wrapper_manager&#39;)-&#62;getViaScheme($scheme);&#10;      $path = $wrapper-&#62;getDirectoryPath() . &#39;/&#39; . file_uri_target($uri);&#10;    }&#10;&#10;    // Clean up Windows paths.&#10;    $path = str_replace(&#39;\\&#39;, &#39;/&#39;, $path);&#10;&#10;    // Serve files with one of the CDN extensions from CDN 1, all others from&#10;    // CDN 2.&#10;    $pathinfo = pathinfo($path);&#10;    if (isset($pathinfo[&#39;extension&#39;]) &amp;&amp; in_array($pathinfo[&#39;extension&#39;], $cdn_extensions)) {&#10;      $uri = $cdn1 . &#39;/&#39; . $path;&#10;    }&#10;    else {&#10;      $uri = $cdn2 . &#39;/&#39; . $path;&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_file_url_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_file_mimetype_mapping_alter" value="/**&#10; * Implements hook_file_mimetype_mapping_alter().&#10; *&#10; * Alter MIME type mappings used to determine MIME type from a file extension.&#10; *&#10; * Invoked by \Drupal\Core\File\MimeType\ExtensionMimeTypeGuesser::guess(). It&#10; * is used to allow modules to add to or modify the default mapping from&#10; * \Drupal\Core\File\MimeType\ExtensionMimeTypeGuesser::$defaultMapping.&#10; *&#10; * @param $mapping&#10; *   An array of mimetypes correlated to the extensions that relate to them.&#10; *   The array has &#39;mimetypes&#39; and &#39;extensions&#39; elements, each of which is an&#10; *   array.&#10; *&#10; * @see \Drupal\Core\File\MimeType\ExtensionMimeTypeGuesser::guess()&#10; * @see \Drupal\Core\File\MimeType\ExtensionMimeTypeGuesser::$defaultMapping&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_file_mimetype_mapping_alter(&amp;$mapping) {&#10;  // Add new MIME type &#39;drupal/info&#39;.&#10;  $mapping[&#39;mimetypes&#39;][&#39;example_info&#39;] = &#39;drupal/info&#39;;&#10;  // Add new extension &#39;.info.yml&#39; and map it to the &#39;drupal/info&#39; MIME type.&#10;  $mapping[&#39;extensions&#39;][&#39;info&#39;] = &#39;example_info&#39;;&#10;  // Override existing extension mapping for &#39;.ogg&#39; files.&#10;  $mapping[&#39;extensions&#39;][&#39;ogg&#39;] = 189;&#10;  $END$&#10;}" description="hook_file_mimetype_mapping_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_file_mimetype_mapping_alter" value="/**&#10; * Implements hook_file_mimetype_mapping_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_file_mimetype_mapping_alter(&amp;$mapping) {&#10;  // Add new MIME type &#39;drupal/info&#39;.&#10;  $mapping[&#39;mimetypes&#39;][&#39;example_info&#39;] = &#39;drupal/info&#39;;&#10;  // Add new extension &#39;.info.yml&#39; and map it to the &#39;drupal/info&#39; MIME type.&#10;  $mapping[&#39;extensions&#39;][&#39;info&#39;] = &#39;example_info&#39;;&#10;  // Override existing extension mapping for &#39;.ogg&#39; files.&#10;  $mapping[&#39;extensions&#39;][&#39;ogg&#39;] = 189;&#10;  $END$&#10;}" description="hook_file_mimetype_mapping_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_archiver_info_alter" value="/**&#10; * Implements hook_archiver_info_alter().&#10; *&#10; * Alter archiver information declared by other modules.&#10; *&#10; * See hook_archiver_info() for a description of archivers and the archiver&#10; * information structure.&#10; *&#10; * @param $info&#10; *   Archiver information to alter (return values from hook_archiver_info()).&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_archiver_info_alter(&amp;$info) {&#10;  $info[&#39;tar&#39;][&#39;extensions&#39;][] = &#39;tgz&#39;;&#10;  $END$&#10;}" description="hook_archiver_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_archiver_info_alter" value="/**&#10; * Implements hook_archiver_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_archiver_info_alter(&amp;$info) {&#10;  $info[&#39;tar&#39;][&#39;extensions&#39;][] = &#39;tgz&#39;;&#10;  $END$&#10;}" description="hook_archiver_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_filetransfer_info" value="/**&#10; * Implements hook_filetransfer_info().&#10; *&#10; * Register information about FileTransfer classes provided by a module.&#10; *&#10; * The FileTransfer class allows transferring files over a specific type of&#10; * connection. Core provides classes for FTP and SSH. Contributed modules are&#10; * free to extend the FileTransfer base class to add other connection types,&#10; * and if these classes are registered via hook_filetransfer_info(), those&#10; * connection types will be available to site administrators using the Update&#10; * manager when they are redirected to the authorize.php script to authorize&#10; * the file operations.&#10; *&#10; * @return array&#10; *   Nested array of information about FileTransfer classes. Each key is a&#10; *   FileTransfer type (not human readable, used for form elements and&#10; *   variable names, etc), and the values are subarrays that define properties&#10; *   of that type. The keys in each subarray are:&#10; *   - &#39;title&#39;: Required. The human-readable name of the connection type.&#10; *   - &#39;class&#39;: Required. The name of the FileTransfer class. The constructor&#10; *     will always be passed the full path to the root of the site that should&#10; *     be used to restrict where file transfer operations can occur (the $jail)&#10; *     and an array of settings values returned by the settings form.&#10; *   - &#39;weight&#39;: Optional. Integer weight used for sorting connection types on&#10; *     the authorize.php form.&#10; *&#10; * @see \Drupal\Core\FileTransfer\FileTransfer&#10; * @see authorize.php&#10; * @see hook_filetransfer_info_alter()&#10; * @see drupal_get_filetransfer_info()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_filetransfer_info() {&#10;  $info[&#39;sftp&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;SFTP (Secure FTP)&#39;),&#10;    &#39;class&#39; =&#62; &#39;Drupal\Core\FileTransfer\SFTP&#39;,&#10;    &#39;weight&#39; =&#62; 10,&#10;  );&#10;  return $info;&#10;  $END$&#10;}" description="hook_filetransfer_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_filetransfer_info" value="/**&#10; * Implements hook_filetransfer_info().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_filetransfer_info() {&#10;  $info[&#39;sftp&#39;] = array(&#10;    &#39;title&#39; =&#62; t(&#39;SFTP (Secure FTP)&#39;),&#10;    &#39;class&#39; =&#62; &#39;Drupal\Core\FileTransfer\SFTP&#39;,&#10;    &#39;weight&#39; =&#62; 10,&#10;  );&#10;  return $info;&#10;  $END$&#10;}" description="hook_filetransfer_info" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_filetransfer_info_alter" value="/**&#10; * Implements hook_filetransfer_info_alter().&#10; *&#10; * Alter the FileTransfer class registry.&#10; *&#10; * @param array $filetransfer_info&#10; *   Reference to a nested array containing information about the FileTransfer&#10; *   class registry.&#10; *&#10; * @see hook_filetransfer_info()&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_filetransfer_info_alter(&amp;$filetransfer_info) {&#10;  // Remove the FTP option entirely.&#10;  unset($filetransfer_info[&#39;ftp&#39;]);&#10;  // Make sure the SSH option is listed first.&#10;  $filetransfer_info[&#39;ssh&#39;][&#39;weight&#39;] = -10;&#10;  $END$&#10;}" description="hook_filetransfer_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_filetransfer_info_alter" value="/**&#10; * Implements hook_filetransfer_info_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_filetransfer_info_alter(&amp;$filetransfer_info) {&#10;  // Remove the FTP option entirely.&#10;  unset($filetransfer_info[&#39;ftp&#39;]);&#10;  // Make sure the SSH option is listed first.&#10;  $filetransfer_info[&#39;ssh&#39;][&#39;weight&#39;] = -10;&#10;  $END$&#10;}" description="hook_filetransfer_info_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_query_alter" value="/**&#10; * Implements hook_query_alter().&#10; *&#10; * Perform alterations to a structured query.&#10; *&#10; * Structured (aka dynamic) queries that have tags associated may be altered by any module&#10; * before the query is executed.&#10; *&#10; * @param $query&#10; *   A Query object describing the composite parts of a SQL query.&#10; *&#10; * @see hook_query_TAG_alter()&#10; * @see node_query_node_access_alter()&#10; * @see AlterableInterface&#10; * @see SelectInterface&#10; *&#10; * @ingroup database&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_query_alter(Drupal\Core\Database\Query\AlterableInterface $query) {&#10;  if ($query-&#62;hasTag(&#39;micro_limit&#39;)) {&#10;    $query-&#62;range(0, 2);&#10;  }&#10;  $END$&#10;}" description="hook_query_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_query_alter" value="/**&#10; * Implements hook_query_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_query_alter(Drupal\Core\Database\Query\AlterableInterface $query) {&#10;  if ($query-&#62;hasTag(&#39;micro_limit&#39;)) {&#10;    $query-&#62;range(0, 2);&#10;  }&#10;  $END$&#10;}" description="hook_query_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_query_TAG_alter" value="/**&#10; * Implements hook_query_TAG_alter().&#10; *&#10; * Perform alterations to a structured query for a given tag.&#10; *&#10; * @param $query&#10; *   An Query object describing the composite parts of a SQL query.&#10; *&#10; * @see hook_query_alter()&#10; * @see node_query_node_access_alter()&#10; * @see AlterableInterface&#10; * @see SelectInterface&#10; *&#10; * @ingroup database&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_query_TAG_alter(Drupal\Core\Database\Query\AlterableInterface $query) {&#10;  // Skip the extra expensive alterations if site has no node access control modules.&#10;  if (!node_access_view_all_nodes()) {&#10;    // Prevent duplicates records.&#10;    $query-&#62;distinct();&#10;    // The recognized operations are &#39;view&#39;, &#39;update&#39;, &#39;delete&#39;.&#10;    if (!$op = $query-&#62;getMetaData(&#39;op&#39;)) {&#10;      $op = &#39;view&#39;;&#10;    }&#10;    // Skip the extra joins and conditions for node admins.&#10;    if (!\Drupal::currentUser()-&#62;hasPermission(&#39;bypass node access&#39;)) {&#10;      // The node_access table has the access grants for any given node.&#10;      $access_alias = $query-&#62;join(&#39;node_access&#39;, &#39;na&#39;, &#39;%alias.nid = n.nid&#39;);&#10;      $or = db_or();&#10;      // If any grant exists for the specified user, then user has access to the node for the specified operation.&#10;      foreach (node_access_grants($op, $query-&#62;getMetaData(&#39;account&#39;)) as $realm =&#62; $gids) {&#10;        foreach ($gids as $gid) {&#10;          $or-&#62;condition(db_and()&#10;            -&#62;condition($access_alias . &#39;.gid&#39;, $gid)&#10;            -&#62;condition($access_alias . &#39;.realm&#39;, $realm)&#10;          );&#10;        }&#10;      }&#10;&#10;      if (count($or-&#62;conditions())) {&#10;        $query-&#62;condition($or);&#10;      }&#10;&#10;      $query-&#62;condition($access_alias . &#39;grant_&#39; . $op, 1, &#39;&#62;=&#39;);&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_query_TAG_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_query_TAG_alter" value="/**&#10; * Implements hook_query_TAG_alter().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_query_TAG_alter(Drupal\Core\Database\Query\AlterableInterface $query) {&#10;  // Skip the extra expensive alterations if site has no node access control modules.&#10;  if (!node_access_view_all_nodes()) {&#10;    // Prevent duplicates records.&#10;    $query-&#62;distinct();&#10;    // The recognized operations are &#39;view&#39;, &#39;update&#39;, &#39;delete&#39;.&#10;    if (!$op = $query-&#62;getMetaData(&#39;op&#39;)) {&#10;      $op = &#39;view&#39;;&#10;    }&#10;    // Skip the extra joins and conditions for node admins.&#10;    if (!\Drupal::currentUser()-&#62;hasPermission(&#39;bypass node access&#39;)) {&#10;      // The node_access table has the access grants for any given node.&#10;      $access_alias = $query-&#62;join(&#39;node_access&#39;, &#39;na&#39;, &#39;%alias.nid = n.nid&#39;);&#10;      $or = db_or();&#10;      // If any grant exists for the specified user, then user has access to the node for the specified operation.&#10;      foreach (node_access_grants($op, $query-&#62;getMetaData(&#39;account&#39;)) as $realm =&#62; $gids) {&#10;        foreach ($gids as $gid) {&#10;          $or-&#62;condition(db_and()&#10;            -&#62;condition($access_alias . &#39;.gid&#39;, $gid)&#10;            -&#62;condition($access_alias . &#39;.realm&#39;, $realm)&#10;          );&#10;        }&#10;      }&#10;&#10;      if (count($or-&#62;conditions())) {&#10;        $query-&#62;condition($or);&#10;      }&#10;&#10;      $query-&#62;condition($access_alias . &#39;grant_&#39; . $op, 1, &#39;&#62;=&#39;);&#10;    }&#10;  }&#10;  $END$&#10;}" description="hook_query_TAG_alter" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="hook_schema" value="/**&#10; * Implements hook_schema().&#10; *&#10; * Define the current version of the database schema.&#10; *&#10; * A Drupal schema definition is an array structure representing one or more&#10; * tables and their related keys and indexes. A schema is defined by&#10; * hook_schema() which must live in your module&#39;s .install file.&#10; *&#10; * The tables declared by this hook will be automatically created when the&#10; * module is installed, and removed when the module is uninstalled. This happens&#10; * before hook_install() is invoked, and after hook_uninstall() is invoked,&#10; * respectively.&#10; *&#10; * By declaring the tables used by your module via an implementation of&#10; * hook_schema(), these tables will be available on all supported database&#10; * engines. You don&#39;t have to deal with the different SQL dialects for table&#10; * creation and alteration of the supported database engines.&#10; *&#10; * See the Schema API Handbook at https://www.drupal.org/node/146843 for details&#10; * on schema definition structures. Note that foreign key definitions are for&#10; * documentation purposes only; foreign keys are not created in the database,&#10; * nor are they enforced by Drupal.&#10; *&#10; * @return array&#10; *   A schema definition structure array. For each element of the&#10; *   array, the key is a table name and the value is a table structure&#10; *   definition.&#10; *&#10; * @ingroup schemaapi&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_schema() {&#10;  $schema[&#39;node&#39;] = array(&#10;    // Example (partial) specification for table &#34;node&#34;.&#10;    &#39;description&#39; =&#62; &#39;The base table for nodes.&#39;,&#10;    &#39;fields&#39; =&#62; array(&#10;      &#39;nid&#39; =&#62; array(&#10;        &#39;description&#39; =&#62; &#39;The primary identifier for a node.&#39;,&#10;        &#39;type&#39; =&#62; &#39;serial&#39;,&#10;        &#39;unsigned&#39; =&#62; TRUE,&#10;        &#39;not null&#39; =&#62; TRUE,&#10;      ),&#10;      &#39;vid&#39; =&#62; array(&#10;        &#39;description&#39; =&#62; &#39;The current {node_field_revision}.vid version identifier.&#39;,&#10;        &#39;type&#39; =&#62; &#39;int&#39;,&#10;        &#39;unsigned&#39; =&#62; TRUE,&#10;        &#39;not null&#39; =&#62; TRUE,&#10;        &#39;default&#39; =&#62; 0,&#10;      ),&#10;      &#39;type&#39; =&#62; array(&#10;        &#39;description&#39; =&#62; &#39;The type of this node.&#39;,&#10;        &#39;type&#39; =&#62; &#39;varchar&#39;,&#10;        &#39;length&#39; =&#62; 32,&#10;        &#39;not null&#39; =&#62; TRUE,&#10;        &#39;default&#39; =&#62; &#39;&#39;,&#10;      ),&#10;      &#39;title&#39; =&#62; array(&#10;        &#39;description&#39; =&#62; &#39;The node title.&#39;,&#10;        &#39;type&#39; =&#62; &#39;varchar&#39;,&#10;        &#39;length&#39; =&#62; 255,&#10;        &#39;not null&#39; =&#62; TRUE,&#10;        &#39;default&#39; =&#62; &#39;&#39;,&#10;      ),&#10;    ),&#10;    &#39;indexes&#39; =&#62; array(&#10;      &#39;node_changed&#39;        =&#62; array(&#39;changed&#39;),&#10;      &#39;node_created&#39;        =&#62; array(&#39;created&#39;),&#10;    ),&#10;    &#39;unique keys&#39; =&#62; array(&#10;      &#39;nid_vid&#39; =&#62; array(&#39;nid&#39;, &#39;vid&#39;),&#10;      &#39;vid&#39;     =&#62; array(&#39;vid&#39;),&#10;    ),&#10;    // For documentation purposes only; foreign keys are not created in the&#10;    // database.&#10;    &#39;foreign keys&#39; =&#62; array(&#10;      &#39;node_revision&#39; =&#62; array(&#10;        &#39;table&#39; =&#62; &#39;node_field_revision&#39;,&#10;        &#39;columns&#39; =&#62; array(&#39;vid&#39; =&#62; &#39;vid&#39;),&#10;      ),&#10;      &#39;node_author&#39; =&#62; array(&#10;        &#39;table&#39; =&#62; &#39;users&#39;,&#10;        &#39;columns&#39; =&#62; array(&#39;uid&#39; =&#62; &#39;uid&#39;),&#10;      ),&#10;    ),&#10;    &#39;primary key&#39; =&#62; array(&#39;nid&#39;),&#10;  );&#10;  return $schema;&#10;  $END$&#10;}" description="hook_schema" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
  <template name="h_schema" value="/**&#10; * Implements hook_schema().&#10; *&#10; * $COMMENT$&#10; */&#10;function $MODULE_NAME$_schema() {&#10;  $schema[&#39;node&#39;] = array(&#10;    // Example (partial) specification for table &#34;node&#34;.&#10;    &#39;description&#39; =&#62; &#39;The base table for nodes.&#39;,&#10;    &#39;fields&#39; =&#62; array(&#10;      &#39;nid&#39; =&#62; array(&#10;        &#39;description&#39; =&#62; &#39;The primary identifier for a node.&#39;,&#10;        &#39;type&#39; =&#62; &#39;serial&#39;,&#10;        &#39;unsigned&#39; =&#62; TRUE,&#10;        &#39;not null&#39; =&#62; TRUE,&#10;      ),&#10;      &#39;vid&#39; =&#62; array(&#10;        &#39;description&#39; =&#62; &#39;The current {node_field_revision}.vid version identifier.&#39;,&#10;        &#39;type&#39; =&#62; &#39;int&#39;,&#10;        &#39;unsigned&#39; =&#62; TRUE,&#10;        &#39;not null&#39; =&#62; TRUE,&#10;        &#39;default&#39; =&#62; 0,&#10;      ),&#10;      &#39;type&#39; =&#62; array(&#10;        &#39;description&#39; =&#62; &#39;The type of this node.&#39;,&#10;        &#39;type&#39; =&#62; &#39;varchar&#39;,&#10;        &#39;length&#39; =&#62; 32,&#10;        &#39;not null&#39; =&#62; TRUE,&#10;        &#39;default&#39; =&#62; &#39;&#39;,&#10;      ),&#10;      &#39;title&#39; =&#62; array(&#10;        &#39;description&#39; =&#62; &#39;The node title.&#39;,&#10;        &#39;type&#39; =&#62; &#39;varchar&#39;,&#10;        &#39;length&#39; =&#62; 255,&#10;        &#39;not null&#39; =&#62; TRUE,&#10;        &#39;default&#39; =&#62; &#39;&#39;,&#10;      ),&#10;    ),&#10;    &#39;indexes&#39; =&#62; array(&#10;      &#39;node_changed&#39;        =&#62; array(&#39;changed&#39;),&#10;      &#39;node_created&#39;        =&#62; array(&#39;created&#39;),&#10;    ),&#10;    &#39;unique keys&#39; =&#62; array(&#10;      &#39;nid_vid&#39; =&#62; array(&#39;nid&#39;, &#39;vid&#39;),&#10;      &#39;vid&#39;     =&#62; array(&#39;vid&#39;),&#10;    ),&#10;    // For documentation purposes only; foreign keys are not created in the&#10;    // database.&#10;    &#39;foreign keys&#39; =&#62; array(&#10;      &#39;node_revision&#39; =&#62; array(&#10;        &#39;table&#39; =&#62; &#39;node_field_revision&#39;,&#10;        &#39;columns&#39; =&#62; array(&#39;vid&#39; =&#62; &#39;vid&#39;),&#10;      ),&#10;      &#39;node_author&#39; =&#62; array(&#10;        &#39;table&#39; =&#62; &#39;users&#39;,&#10;        &#39;columns&#39; =&#62; array(&#39;uid&#39; =&#62; &#39;uid&#39;),&#10;      ),&#10;    ),&#10;    &#39;primary key&#39; =&#62; array(&#39;nid&#39;),&#10;  );&#10;  return $schema;&#10;  $END$&#10;}" description="hook_schema" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="false" />
      <option name="HTML" value="false" />
      <option name="XSL_TEXT" value="false" />
      <option name="XML" value="false" />
      <option name="CSS" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="SQL" value="false" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="false" />
    </context>
  </template>
</templateSet>
